"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[41931],{89290:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=n(74848),c=n(28453);const s={description:"Use Web3.js to execute a smart contract function."},r="Call a contract",o={id:"tutorials/ethereum/call-a-contract",title:"Call a contract",description:"Use Web3.js to execute a smart contract function.",source:"@site/services/tutorials/ethereum/call-a-contract.md",sourceDirName:"tutorials/ethereum",slug:"/tutorials/ethereum/call-a-contract",permalink:"/test-integrate-infura/services/tutorials/ethereum/call-a-contract",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/services/tutorials/ethereum/call-a-contract.md",tags:[],version:"current",frontMatter:{description:"Use Web3.js to execute a smart contract function."}},i={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"1. Create a script to execute the contract",id:"1-create-a-script-to-execute-the-contract",level:3},{value:"2. Call the contract",id:"2-call-the-contract",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"call-a-contract",children:"Call a contract"}),"\n",(0,a.jsx)(t.p,{children:"This tutorial uses Web3.js to execute a function in a smart contract. Calling the contract function is a type of transaction that requires paying gas."}),"\n",(0,a.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(t.p,{children:["Before attempting this tutorial, ensure you completed the tutorial to ",(0,a.jsx)(t.a,{href:"/test-integrate-infura/services/tutorials/ethereum/deploy-a-contract-using-web3.js",children:"deploy a contract"})," and ",(0,a.jsxs)(t.a,{href:"/test-integrate-infura/services/tutorials/ethereum/deploy-a-contract-using-web3.js#10-update-the-env-file",children:["updated the ",(0,a.jsx)(t.code,{children:".env"})," file with the smart contract address"]}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,a.jsx)(t.h3,{id:"1-create-a-script-to-execute-the-contract",children:"1. Create a script to execute the contract"}),"\n",(0,a.jsxs)(t.p,{children:["In the ",(0,a.jsx)(t.code,{children:"deployContract"})," folder created ",(0,a.jsx)(t.a,{href:"/test-integrate-infura/services/tutorials/ethereum/deploy-a-contract-using-web3.js#2-create-a-project-directory",children:"earlier"}),", create the JavaScript file that executes a contract function and signs the transaction."]}),"\n",(0,a.jsxs)(t.p,{children:["In this example we'll create the ",(0,a.jsx)(t.code,{children:"call.js"})," file with the following contents:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:'const { Web3 } = require("web3");\n\n// Loading the contract ABI\n// (the results of a previous compilation step)\nconst fs = require("fs");\nconst { abi } = JSON.parse(fs.readFileSync("Demo.json"));\n\nasync function main() {\n  // Configuring the connection to an Ethereum node\n  const network = process.env.ETHEREUM_NETWORK;\n  const web3 = new Web3(\n    new Web3.providers.HttpProvider(\n      `https://${network}.infura.io/v3/${process.env.INFURA_API_KEY}`,\n    ),\n  );\n  // Creating a signing account from a private key\n  const signer = web3.eth.accounts.privateKeyToAccount(\n    "0x" + process.env.SIGNER_PRIVATE_KEY\n  );\n  web3.eth.accounts.wallet.add(signer);\n  // Creating a Contract instance\n  const contract = new web3.eth.Contract(\n    abi,\n    // Replace this with the address of your deployed contract\n    process.env.DEMO_CONTRACT,\n  );\n  // Issuing a transaction that calls the `echo` method\n  const method_abi = contract.methods.echo("Hello, world!").encodeABI();\n  const tx = {\n    from: signer.address,\n    to: contract.options.address,\n    data: method_abi,\n    value: \'0\',\n    gasPrice: \'100000000000\',\n  };\n  const gas_estimate = await web3.eth.estimateGas(tx);\n  tx.gas = gas_estimate;\n  const signedTx = await web3.eth.accounts.signTransaction(tx, signer.privateKey);\n  console.log("Raw transaction data: " + ( signedTx).rawTransaction);\n  // Sending the transaction to the network\n  const receipt = await web3.eth\n    .sendSignedTransaction(signedTx.rawTransaction)\n    .once("transactionHash", (txhash) => {\n      console.log(`Mining transaction ...`);\n      console.log(`https://${network}.etherscan.io/tx/${txhash}`);\n    });\n  // The transaction is now on chain!\n  console.log(`Mined in block ${receipt.blockNumber}`);\n}\n\nrequire("dotenv").config();\nmain();\n'})}),"\n",(0,a.jsx)(t.h3,{id:"2-call-the-contract",children:"2. Call the contract"}),"\n",(0,a.jsx)(t.p,{children:"Run the script to call the smart contract:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"node call.js\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["If you receive an ",(0,a.jsx)(t.code,{children:"insufficient funds for gas"})," error, then you may need to top up your signer account with some testnet ETH."]})}),"\n",(0,a.jsx)(t.p,{children:"The script will display the details of the transaction in the output. View the transaction in a block explorer such as Etherscan."})]})}function d(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(96540);const c={},s=a.createContext(c);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);