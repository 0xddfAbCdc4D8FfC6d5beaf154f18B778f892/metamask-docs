"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[88187],{66585:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=n(74848),i=n(28453);const a={description:"Send a transaction using Go."},s="Use Go",o={id:"tutorials/ethereum/send-a-transaction/send-a-transaction-go",title:"Use Go",description:"Send a transaction using Go.",source:"@site/services/tutorials/ethereum/send-a-transaction/send-a-transaction-go.md",sourceDirName:"tutorials/ethereum/send-a-transaction",slug:"/tutorials/ethereum/send-a-transaction/send-a-transaction-go",permalink:"/test-integrate-infura/services/tutorials/ethereum/send-a-transaction/send-a-transaction-go",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/services/tutorials/ethereum/send-a-transaction/send-a-transaction-go.md",tags:[],version:"current",frontMatter:{description:"Send a transaction using Go."},sidebar:"servicesSidebar",previous:{title:"Use ethers.js",permalink:"/test-integrate-infura/services/tutorials/ethereum/send-a-transaction/send-a-transaction-ethers"},next:{title:"Use Python",permalink:"/test-integrate-infura/services/tutorials/ethereum/send-a-transaction/send-a-transaction-py"}},c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"1. Create a project directory",id:"1-create-a-project-directory",level:3},{value:"2. Initialize the directory and install the dependencies",id:"2-initialize-the-directory-and-install-the-dependencies",level:3},{value:"3. Create <code>eip1559_tx.go</code> file",id:"3-create-eip1559_txgo-file",level:3},{value:"4. Execute the transaction",id:"4-execute-the-transaction",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"use-go",children:"Use Go"}),"\n",(0,r.jsxs)(t.p,{children:["Send a regular transaction from one account to another with ",(0,r.jsx)(t.a,{href:"https://go.dev/",children:"Go"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://go.dev/doc/install",children:"Go"})," installed."]}),"\n",(0,r.jsxs)(t.li,{children:["An Ethereum account containing some ",(0,r.jsx)(t.a,{href:"https://www.infura.io/faucet",children:"Sepolia test ETH"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["Use ",(0,r.jsx)(t.a,{href:"https://metamask.io",children:"MetaMask"})," or similar to create an Ethereum account for testing."]})}),"\n",(0,r.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,r.jsx)(t.h3,{id:"1-create-a-project-directory",children:"1. Create a project directory"}),"\n",(0,r.jsx)(t.p,{children:"Create a new directory:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"mkdir infura\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"cd"})," into the directory:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"cd infura\n"})}),"\n",(0,r.jsx)(t.h3,{id:"2-initialize-the-directory-and-install-the-dependencies",children:"2. Initialize the directory and install the dependencies"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"go mod init infura\ngo get github.com/ethereum/go-ethereum/common\ngo get github.com/ethereum/go-ethereum/core/types\ngo get github.com/ethereum/go-ethereum/crypto\ngo get github.com/ethereum/go-ethereum/rpc@v1.10.17\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"3-create-eip1559_txgo-file",children:["3. Create ",(0,r.jsx)(t.code,{children:"eip1559_tx.go"})," file"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"context"\n\t"crypto/ecdsa"\n\t"fmt"\n\t"log"\n\t"math/big"\n\n\t"github.com/ethereum/go-ethereum/common"\n\t"github.com/ethereum/go-ethereum/core/types"\n\t"github.com/ethereum/go-ethereum/crypto"\n\t"github.com/ethereum/go-ethereum/ethclient"\n)\n\nfunc main() {\n\tclient, err := ethclient.Dial("https://sepolia.infura.io/v3/API_KEY")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tprivateKey, err := crypto.HexToECDSA("PRIVATE_KEY")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tpublicKey := privateKey.Public()\n\tpublicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)\n\tif !ok {\n\t\tlog.Fatal("error casting public key to ECDSA")\n\t}\n\n\tfromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)\n\n\tnonce, err := client.PendingNonceAt(context.Background(), fromAddress)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n        value := big.NewInt(10000000000000000) // in wei (0.01 eth)\n\tgasLimit := uint64(21000)               // in units\n\ttip := big.NewInt(2000000000)           // maxPriorityFeePerGas = 2 Gwei\n\tfeeCap := big.NewInt(20000000000)       // maxFeePerGas = 20 Gwei\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\ttoAddress := common.HexToAddress("ADDRESS_TO")\n\tvar data []byte\n\n\tchainID, err := client.NetworkID(context.Background())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\ttx := types.NewTx(&types.DynamicFeeTx{\n\t\tChainID:   chainID,\n\t\tNonce:     nonce,\n\t\tGasFeeCap: feeCap,\n\t\tGasTipCap: tip,\n\t\tGas:       gasLimit,\n\t\tTo:        &toAddress,\n\t\tValue:     value,\n\t\tData:      data,\n\t})\n\n\tsignedTx, err := types.SignTx(tx, types.LatestSignerForChainID(chainID), privateKey)\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\terr = client.SendTransaction(context.Background(), signedTx)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Printf("Transaction hash: %s", signedTx.Hash().Hex())\n\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Replace the following values in the script:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"<API_KEY>"})," with the Infura API key."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"<PRIVATE-KEY>"})," with the ",(0,r.jsx)(t.a,{href:"https://metamask.zendesk.com/hc/en-us/articles/360015289632-How-to-Export-an-Account-Private-Key",children:"private key of your Ethereum account"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"<ADDRESS-TO>"})," with the address of the recipient of funds."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"If using a different Ethereum network, update the URL in the script."}),"\n",(0,r.jsxs)(t.admonition,{type:"danger",children:[(0,r.jsx)(t.p,{children:"Never disclose your private key."}),(0,r.jsx)(t.p,{children:"A malicious actor who has access to your private key can steal your assets."})]}),"\n",(0,r.jsx)(t.h3,{id:"4-execute-the-transaction",children:"4. Execute the transaction"}),"\n",(0,r.jsx)(t.p,{children:"Run the script:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"go run eip1559_tx.go\n"})}),"\n",(0,r.jsx)(t.p,{children:"Example output:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Transaction hash: 0x47ed277bdfee88902f971510a7cd7b4c55722ea06488e697fb05dc99454e51ab\n"})}),"\n",(0,r.jsxs)(t.p,{children:["You can search for the transaction on a block explorer like ",(0,r.jsx)(t.a,{href:"https://sepolia.etherscan.io/",children:"Sepolia Etherscan"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"\\"})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(96540);const i={},a=r.createContext(i);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);