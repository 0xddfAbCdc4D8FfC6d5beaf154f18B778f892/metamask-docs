"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[83486],{86467:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=t(74848),r=t(28453);const s={title:"Use Rust",description:"A tutorial for legacy and EIP-1559 transactions."},i="Use Rust",o={id:"tutorials/ethereum/send-a-transaction/use-rust",title:"Use Rust",description:"A tutorial for legacy and EIP-1559 transactions.",source:"@site/services/tutorials/ethereum/send-a-transaction/use-rust.md",sourceDirName:"tutorials/ethereum/send-a-transaction",slug:"/tutorials/ethereum/send-a-transaction/use-rust",permalink:"/test-integrate-infura/services/tutorials/ethereum/send-a-transaction/use-rust",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/services/tutorials/ethereum/send-a-transaction/use-rust.md",tags:[],version:"current",frontMatter:{title:"Use Rust",description:"A tutorial for legacy and EIP-1559 transactions."},sidebar:"servicesSidebar",previous:{title:"Use ethers.js InfuraProvider or Web3Provider",permalink:"/test-integrate-infura/services/tutorials/ethereum/send-a-transaction/use-ethers.js-infuraprovider-or-web3provider"},next:{title:"Use web3.js",permalink:"/test-integrate-infura/services/tutorials/ethereum/send-a-transaction/use-web3.js"}},c={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Send a legacy transaction",id:"send-a-legacy-transaction",level:2},{value:"1. Create a new project",id:"1-create-a-new-project",level:3},{value:"2. Edit the dependencies",id:"2-edit-the-dependencies",level:3},{value:"3. Update the main code",id:"3-update-the-main-code",level:3},{value:"4. Run the code",id:"4-run-the-code",level:3},{value:"Send an EIP-1559 transaction",id:"send-an-eip-1559-transaction",level:2},{value:"1. Modify the main code",id:"1-modify-the-main-code",level:3},{value:"2. Run the modified code",id:"2-run-the-modified-code",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"use-rust",children:"Use Rust"}),"\n",(0,a.jsxs)(n.p,{children:["In this two-part tutorial we'll use Rust and the ",(0,a.jsx)(n.a,{href:"https://www.gakonst.com/ethers-rs/getting-started/intro.html",children:"ethers-rs library"})," to:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Send a legacy transaction ",(0,a.jsx)(n.code,{children:'("type":"0x0")'})]}),"\n",(0,a.jsxs)(n.li,{children:["Send an EIP-1559 transaction ",(0,a.jsx)(n.code,{children:'("type":"0x2")'})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["This tutorial uses the Sepolia testnet. Also see ",(0,a.jsx)(n.a,{href:"../../../network-apis/ethereum/concepts/transaction-types.md",children:"Transaction types"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Make sure that you have test ETH in your MetaMask wallet. You can obtain test ETH for the Sepolia network using the\n",(0,a.jsx)(n.a,{href:"https://www.infura.io/faucet/sepolia",children:"Infura Sepolia faucet"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://doc.rust-lang.org/cargo/getting-started/installation.html",children:"Install Rust from The Cargo Book"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"send-a-legacy-transaction",children:"Send a legacy transaction"}),"\n",(0,a.jsx)(n.h3,{id:"1-create-a-new-project",children:"1. Create a new project"}),"\n",(0,a.jsx)(n.p,{children:"Open a terminal and create a new project."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Rust",children:"cargo new infura_rs\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This creates the ",(0,a.jsx)(n.code,{children:"infura_rs"})," directory with the following structure:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"infura_rs\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main.rs\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Refer to the ",(0,a.jsx)(n.a,{href:"https://doc.rust-lang.org/cargo/getting-started/first-steps.html",children:"Cargo documentation"})," for more information about getting started with Cargo."]})}),"\n",(0,a.jsx)(n.h3,{id:"2-edit-the-dependencies",children:"2. Edit the dependencies"}),"\n",(0,a.jsxs)(n.p,{children:["Open ",(0,a.jsx)(n.code,{children:"Cargo.toml"})," with your preferred editor and add the following dependencies to it:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nethers = "2.0"\neyre = "0.6.8"\nhex = "0.4.3"\ntokio = { version = "1.28.2", features = ["full"] }\nserde_json = "1.0.96"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"3-update-the-main-code",children:"3. Update the main code"}),"\n",(0,a.jsxs)(n.p,{children:["Open the Rust source ",(0,a.jsx)(n.code,{children:"src/main.rs"})," and replace its contents with the following code:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",metastring:"showLineNumbers",children:'use ethers::{\n    core::{types::TransactionRequest},\n    middleware::SignerMiddleware,\n    providers::{Http, Middleware, Provider},\n    signers::{LocalWallet, Signer},\n    utils,\n    prelude::*\n};\nuse eyre::Result;\nuse std::convert::TryFrom;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n\n    // Connect to the network\n    let provider = Provider::<Http>::try_from("https://sepolia.infura.io/v3/INFURA_API_KEY")?;\n\n    let chain_id = provider.get_chainid().await?;\n\n    // Define the signer.\n    // Replace the SIGNER_PRIVATE_KEY with \n    // the private key of your Ethereum account (without the 0x prefix). \n    // However, we recommended that you load it from \n    // an .env file or external vault.\n    let wallet: LocalWallet = "SIGNER_PRIVATE_KEY"\n        .parse::<LocalWallet>()?\n        .with_chain_id(chain_id.as_u64());\n\n    let to_address = "0xAED01C776d98303eE080D25A21f0a42D94a86D9c";\n\n    // connect the wallet to the provider\n    let client = SignerMiddleware::new(provider, wallet);\n\n   // Craft the transaction\n   // The below code knows how to figure out the \n   // default gas value and determine the next nonce \n   // so you do not need to explicitly add them.\n   let tx = TransactionRequest::new()\n        .to(to_address)\n        .value(U256::from(utils::parse_ether(0.01)?));\n\n   // send it!\n   let pending_tx = client.send_transaction(tx, None).await?;\n\n   // get the mined tx\n   let receipt = pending_tx.await?.ok_or_else(|| eyre::format_err!("tx dropped from mempool"))?;\n   let tx = client.get_transaction(receipt.transaction_hash).await?;\n\n   println!("Sent tx: {}\\n", serde_json::to_string(&tx)?);\n   println!("Tx receipt: {}", serde_json::to_string(&receipt)?);\n\n   Ok(())\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Next, make the following updates to the above code:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["On line 16 replace the ",(0,a.jsx)(n.code,{children:"INFURA_API_KEY"})," with you API key from the\n",(0,a.jsx)(n.a,{href:"../../../dashboard/create-api.md",children:"Infura dashboard"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["On line 26 replace the ",(0,a.jsx)(n.code,{children:"SIGNER_PRIVATE_KEY"})," with the private key of your Ethereum account."]}),"\n",(0,a.jsxs)(n.li,{children:["On line 29, use a test address, such as ",(0,a.jsx)(n.a,{href:"https://sepolia.etherscan.io/address/0xaed01c776d98303ee080d25a21f0a42d94a86d9c",children:"0xAED01C776d98303eE080D25A21f0a42D94a86D9c"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{title:"Secure your keys",type:"tip",children:(0,a.jsxs)(n.p,{children:["To better secure your keys, follow the recommended approach described in the section ",(0,a.jsx)(n.a,{href:"/test-integrate-infura/services/tutorials/ethereum/send-a-transaction/use-web3.js#4-create-the-env-file",children:"Create the .env file"}),"."]})}),"\n",(0,a.jsx)(n.h3,{id:"4-run-the-code",children:"4. Run the code"}),"\n",(0,a.jsxs)(n.p,{children:["From the ",(0,a.jsx)(n.code,{children:"infura_rs"})," directory, run the code."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"cargo run\n"})}),"\n",(0,a.jsx)(n.p,{children:"You will see an output similar to the following."}),"\n",(0,a.jsx)(n.admonition,{title:"Use the wrap button",type:"note",children:(0,a.jsx)(n.p,{children:"Use the wrap button on the top right of the below code block window for wrapped display."})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-log",children:'Compiling infura_rs v0.1.0 (/Users/rajkaramchedu/onboarding/traian-tutorials/infura_rs)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.14s\n     Running `target/debug/infura_rs`\nSent tx: {"hash":"0x3cb5a5fac18e889457905351c9950108873a8f0789fe83e8a733b8367f49a67a","nonce":"0x1","blockHash":"0xa2787f5ec22d491588a8ffc6e7cec3ed97fccac4845e448650d02fce672a657c","blockNumber":"0x3a7608","transactionIndex":"0x3d","from":"0xe33fef60722ba79989aeaa1b6e6daf7f351c0fbb","to":"0xaed01c776d98303ee080d25a21f0a42d94a86d9c","value":"0x2386f26fc10000","gasPrice":"0x3cc","gas":"0x5208","input":"0x","v":"0x1546d71","r":"0x92aa9fe6039946db5ea291a245529a5d67f5531e95d74c483fe8283cca9ec666","s":"0x4a5c0de8e64c79659965fb36f2b0ea1d295ae868f5f65809ef4cf1ef55239e09","type":"0x0","chainId":"0xaa36a7"}\n\nTx receipt: {"transactionHash":"0x3cb5a5fac18e889457905351c9950108873a8f0789fe83e8a733b8367f49a67a","transactionIndex":"0x3d","blockHash":"0xa2787f5ec22d491588a8ffc6e7cec3ed97fccac4845e448650d02fce672a657c","blockNumber":"0x3a7608","from":"0xe33fef60722ba79989aeaa1b6e6daf7f351c0fbb","to":"0xaed01c776d98303ee080d25a21f0a42d94a86d9c","cumulativeGasUsed":"0x406e87","gasUsed":"0x5208","contractAddress":null,"logs":[],"status":"0x1","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","type":"0x0","effectiveGasPrice":"0x3cc"}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In the above transaction receipt, the transaction type shows ",(0,a.jsx)(n.code,{children:'"type":"0x0"'})," indicating that this was a legacy transaction. Next, we will send an EIP-1559 transaction, which is of the type ",(0,a.jsx)(n.code,{children:'"type":"0x2"'}),". See below."]}),"\n",(0,a.jsx)(n.h2,{id:"send-an-eip-1559-transaction",children:"Send an EIP-1559 transaction"}),"\n",(0,a.jsx)(n.h3,{id:"1-modify-the-main-code",children:"1. Modify the main code"}),"\n",(0,a.jsxs)(n.p,{children:["To send an EIP-1559 transaction, i.e., of the ",(0,a.jsx)(n.code,{children:'"type":"0x2"'})," you must use ",(0,a.jsx)(n.code,{children:"Eip1559TransactionRequest"})," instead of ",(0,a.jsx)(n.code,{children:"TransactionRequest"})," in the ",(0,a.jsx)(n.code,{children:"main.rs"})," code. Replace the code in ",(0,a.jsx)(n.code,{children:"main.rs"})," with the below code."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",metastring:"showLineNumbers",children:'use ethers::{\n    core::{types::TransactionRequest},\n    middleware::SignerMiddleware,\n    providers::{Http, Middleware, Provider},\n    signers::{LocalWallet, Signer},\n    utils,\n    prelude::*\n};\nuse eyre::Result;\nuse std::convert::TryFrom;\nuse types::Eip1559TransactionRequest;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n\n    // connect to the network\n    let provider = Provider::<Http>::try_from("https://sepolia.infura.io/v3/INFURA_API_KEY")?;\n\n    let chain_id = provider.get_chainid().await?;\n\n    // Define the signer.\n    // Replace the SIGNER_PRIVATE_KEY with \n    // the private key of your Ethereum account (without the 0x prefix). \n    // However, we recommended that you load it from \n    // an .env file or external vault.\n    let wallet: LocalWallet = "SIGNER_PRIVATE_KEY"\n        .parse::<LocalWallet>()?\n        .with_chain_id(chain_id.as_u64());\n\n    let to_address = "0xAED01C776d98303eE080D25A21f0a42D94a86D9c";\n\n    // connect the wallet to the provider\n    let client = SignerMiddleware::new(provider, wallet);\n\n   // craft the transaction\n  // this also knows to estimate the `max_priority_fee_per_gas` but added it manually just to see how it would look\n   let tx = Eip1559TransactionRequest::new()\n        .to(to_address)\n        .value(U256::from(utils::parse_ether(0.01)?))\n        .max_priority_fee_per_gas(U256::from(2000000000_u128)); // 2 Gwei\n\n   // send it!\n   let pending_tx = client.send_transaction(tx, None).await?;\n\n   // get the mined tx\n   let receipt = pending_tx.await?.ok_or_else(|| eyre::format_err!("tx dropped from mempool"))?;\n   let tx = client.get_transaction(receipt.transaction_hash).await?;\n\n   println!("Sent tx: {}\\n", serde_json::to_string(&tx)?);\n   println!("Tx receipt: {}", serde_json::to_string(&receipt)?);\n\n   Ok(())\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"2-run-the-modified-code",children:"2. Run the modified code"}),"\n",(0,a.jsxs)(n.p,{children:["From the ",(0,a.jsx)(n.code,{children:"infura_rs"})," directory, run the code."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"cargo run\n"})}),"\n",(0,a.jsx)(n.p,{children:"You will see an output similar to the following."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-log",children:'Compiling infura_rs v0.1.0 (/Users/rajkaramchedu/onboarding/traian-tutorials/infura_rs)\nwarning: unused import: `types::TransactionRequest`\n --\x3e src/main.rs:2:12\n  |\n2 |     core::{types::TransactionRequest},\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: `infura_rs` (bin "infura_rs") generated 1 warning (run `cargo fix --bin "infura_rs"` to apply 1 suggestion)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.42s\n     Running `target/debug/infura_rs`\nSent tx: {"hash":"0xbbc036f4dfe00b590c3693b8a2516316dec5748b3e4085ec92dfc040d8b8492b","nonce":"0x4","blockHash":"0xe64a029af23b18738a69c6eab19b85d99dc2844e8ce54a4bedcc1a75fe18dc08","blockNumber":"0x3a7a42","transactionIndex":"0xf","from":"0xe33fef60722ba79989aeaa1b6e6daf7f351c0fbb","to":"0xaed01c776d98303ee080d25a21f0a42d94a86d9c","value":"0x2386f26fc10000","gasPrice":"0x7735940c","gas":"0x5208","input":"0x","v":"0x1","r":"0xa0e4125501b3146910750408adaa255cd3e3a06461e311e1146a0983fcd9b0e0","s":"0x35c5c6cf6650dcff0ed1e25689d0ce17f7f5986342276f11651976c7048172d1","type":"0x2","accessList":[],"maxPriorityFeePerGas":"0x77359400","maxFeePerGas":"0xb2d05e16","chainId":"0xaa36a7"}\n\nTx receipt: {"transactionHash":"0xbbc036f4dfe00b590c3693b8a2516316dec5748b3e4085ec92dfc040d8b8492b","transactionIndex":"0xf","blockHash":"0xe64a029af23b18738a69c6eab19b85d99dc2844e8ce54a4bedcc1a75fe18dc08","blockNumber":"0x3a7a42","from":"0xe33fef60722ba79989aeaa1b6e6daf7f351c0fbb","to":"0xaed01c776d98303ee080d25a21f0a42d94a86d9c","cumulativeGasUsed":"0x6a7187","gasUsed":"0x5208","contractAddress":null,"logs":[],"status":"0x1","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","type":"0x2","effectiveGasPrice":"0x7735940c"}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Ignore the ",(0,a.jsx)(n.code,{children:'"warning: unused import: types::TransactionRequest"'})," above. In the above transaction receipt, the transaction type shows ",(0,a.jsx)(n.code,{children:'"type":"0x2"'})," indicating that this was an EIP-1559 transaction."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(96540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);