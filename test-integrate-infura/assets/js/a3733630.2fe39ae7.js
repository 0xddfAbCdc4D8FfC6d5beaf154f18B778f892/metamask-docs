"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[48879],{29960:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var a=t(74848),s=t(28453);const r={description:"Send a transaction using Python."},i="Use Python",c={id:"tutorials/ethereum/send-a-transaction/send-a-transaction-py",title:"Use Python",description:"Send a transaction using Python.",source:"@site/services/tutorials/ethereum/send-a-transaction/send-a-transaction-py.md",sourceDirName:"tutorials/ethereum/send-a-transaction",slug:"/tutorials/ethereum/send-a-transaction/send-a-transaction-py",permalink:"/test-integrate-infura/services/tutorials/ethereum/send-a-transaction/send-a-transaction-py",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/services/tutorials/ethereum/send-a-transaction/send-a-transaction-py.md",tags:[],version:"current",frontMatter:{description:"Send a transaction using Python."}},o={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"1. Create a project directory",id:"1-create-a-project-directory",level:3},{value:"2. install the dependencies",id:"2-install-the-dependencies",level:3},{value:"3. Create <code>.env</code> file",id:"3-create-env-file",level:3},{value:"4. Create <code>eip1559_tx.py</code> file",id:"4-create-eip1559_txpy-file",level:3},{value:"4. Execute the transaction",id:"4-execute-the-transaction",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"use-python",children:"Use Python"}),"\n",(0,a.jsxs)(n.p,{children:["Send a regular transaction from one account to another with ",(0,a.jsx)(n.a,{href:"https://www.python.org/",children:"Python"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://nodejs.org/en/download/",children:"Node.js"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["An Ethereum account containing some ",(0,a.jsx)(n.a,{href:"https://www.infura.io/faucet",children:"Sepolia test ETH"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.a,{href:"https://metamask.io",children:"MetaMask"})," or similar to create an Ethereum account for testing."]})}),"\n",(0,a.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,a.jsx)(n.h3,{id:"1-create-a-project-directory",children:"1. Create a project directory"}),"\n",(0,a.jsx)(n.p,{children:"Create a new directory:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir infura\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"cd"})," into the directory:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd infura\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-install-the-dependencies",children:"2. install the dependencies"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install web3\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install python-dotenv\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"3-create-env-file",children:["3. Create ",(0,a.jsx)(n.code,{children:".env"})," file"]}),"\n",(0,a.jsxs)(n.p,{children:["Create a ",(0,a.jsx)(n.code,{children:".env"})," file in your project directory to store the private key of your Ethereum account."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"PRIVATE_KEY = <PRIVATE-KEY>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Find out how to access the ",(0,a.jsx)(n.a,{href:"https://metamask.zendesk.com/hc/en-us/articles/360015289632-How-to-Export-an-Account-Private-Key",children:"private key of your Ethereum account"}),". Make sure that you prefix the ",(0,a.jsx)(n.code,{children:"<PRIVATE_KEY>"})," value with ",(0,a.jsx)(n.code,{children:"0x"}),". The\nprivate key you export from MetaMask will not be prefixed with ",(0,a.jsx)(n.code,{children:"0x"}),"."]}),"\n",(0,a.jsxs)(n.admonition,{type:"danger",children:[(0,a.jsx)(n.p,{children:"Never disclose your private key."}),(0,a.jsx)(n.p,{children:"A malicious actor who has access to your private key can steal your assets."})]}),"\n",(0,a.jsxs)(n.h3,{id:"4-create-eip1559_txpy-file",children:["4. Create ",(0,a.jsx)(n.code,{children:"eip1559_tx.py"})," file"]}),"\n",(0,a.jsxs)(n.p,{children:["Create a file named ",(0,a.jsx)(n.code,{children:"eip1559_tx.py"})," and add the following lines of code."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import os  \nfrom dotenv import load_dotenv  \nfrom web3 import Web3, exceptions  \n  \nload_dotenv()  \n  \ninfura_url = 'https://sepolia.infura.io/v3/<API-KEY>'  \nprivate_key = os.getenv('PRIVATE_KEY')  \nfrom_account = '<PUBLIC-KEY>'  \nto_account = '<RECIPIENT-PUBLIC-KEY>'  \nweb3 = Web3(Web3.HTTPProvider(infura_url))  \n  \ntry:  \n    from_account = web3.to_checksum_address(from_account)  \nexcept exceptions.InvalidAddress:  \n    print(f\"Invalid 'from_account' address: {from_account}\")  \n  \ntry:  \n    to_account = web3.to_checksum_address(to_account)  \nexcept exceptions.InvalidAddress:  \n    print(f\"Invalid 'to_account' address: {to_account}\")  \n  \nnonce = web3.eth.get_transaction_count(from_account)  \ntx = {\n    'type': '0x2',\n    'nonce': nonce,\n    'from': from_account,\n    'to': to_account,\n    'value': web3.to_wei(0.01, 'ether'),\n    'maxFeePerGas': web3.to_wei('250', 'gwei'),\n    'maxPriorityFeePerGas': web3.to_wei('3', 'gwei'),\n    'chainId': 11155111\n}\ngas = web3.eth.estimate_gas(tx)\ntx['gas'] = gas\nsigned_tx = web3.eth.account.sign_transaction(tx, private_key)\ntx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)\nprint(\"Transaction hash: \" + str(web3.to_hex(tx_hash)))\n"})}),"\n",(0,a.jsx)(n.p,{children:"Ensure you replace the following values in the code:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"<API-KEY>"})," with the API key of the Web3 project."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"<PUBLIC-KEY>"})," with the public key associated with the private key you added in the ",(0,a.jsx)(n.code,{children:".env"})," file."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"<RECIPIENT-PUBLIC-KEY>"})," With the public key of the recipient of the transfer."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"If using a different Ethereum network, update the URL in the code."}),"\n",(0,a.jsx)(n.h3,{id:"4-execute-the-transaction",children:"4. Execute the transaction"}),"\n",(0,a.jsx)(n.p,{children:"Run the script:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"python eip1559_tx.py\n"})}),"\n",(0,a.jsx)(n.p,{children:"Example output:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Transaction hash: 0x30c0ef29111ca7aecc78a99149649b5076d104afa7ed2f603ff2d2ec1aa27a8c\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can search for the transaction on a block explorer like ",(0,a.jsx)(n.a,{href:"https://sepolia.etherscan.io/tx/0x28e414889b47ba43b00086bc3ae42ea4ea521739f77b78afcaefb1b7fe42e955",children:"Sepolia Etherscan"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var a=t(96540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);