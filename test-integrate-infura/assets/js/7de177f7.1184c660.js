"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[40663],{65065:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var s=t(74848),r=t(28453);const a={description:"Send a transaction using Web3.js."},i="Use web3.js",c={id:"tutorials/ethereum/send-a-transaction/use-web3.js",title:"Use web3.js",description:"Send a transaction using Web3.js.",source:"@site/services/tutorials/ethereum/send-a-transaction/use-web3.js.md",sourceDirName:"tutorials/ethereum/send-a-transaction",slug:"/tutorials/ethereum/send-a-transaction/use-web3.js",permalink:"/test-integrate-infura/services/tutorials/ethereum/send-a-transaction/use-web3.js",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/services/tutorials/ethereum/send-a-transaction/use-web3.js.md",tags:[],version:"current",frontMatter:{description:"Send a transaction using Web3.js."},sidebar:"servicesSidebar",previous:{title:"Use Rust",permalink:"/test-integrate-infura/services/tutorials/ethereum/send-a-transaction/use-rust"},next:{title:"Send an ERC-20 token",permalink:"/test-integrate-infura/services/tutorials/ethereum/send-erc-20-token-rust"}},o={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"1. Fund your Ethereum account",id:"1-fund-your-ethereum-account",level:3},{value:"2. Create a project directory",id:"2-create-a-project-directory",level:3},{value:"3. Install required packages",id:"3-install-required-packages",level:3},{value:"4. Create the <code>.env</code> file",id:"4-create-the-env-file",level:3},{value:"5. Create <code>send.js</code> file",id:"5-create-sendjs-file",level:3},{value:"6. Execute the transaction",id:"6-execute-the-transaction",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"use-web3js",children:"Use web3.js"}),"\n",(0,s.jsx)(n.p,{children:"In this tutorial, you'll send a regular transaction from one account to another using the Web3 JavaScript library."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.a,{href:"/test-integrate-infura/services/get-started/infura",children:"Web3 project"})," on Infura"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://nodejs.org/en/download/",children:"Node.js installed"})}),"\n",(0,s.jsx)(n.li,{children:"An Ethereum account for testing purposes"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.a,{href:"https://metamask.io",children:"MetaMask"})," or similar to create an Ethereum account for testing purposes."]})}),"\n",(0,s.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,s.jsx)(n.h3,{id:"1-fund-your-ethereum-account",children:"1. Fund your Ethereum account"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.infura.io/faucet",children:"Use the Infura faucet to load testnet ETH"})," on your Ethereum account for the Sepolia network."]}),"\n",(0,s.jsxs)(n.p,{children:["If using a network other than Sepolia, ensure you ",(0,s.jsx)(n.a,{href:"#4-create-the-env-file",children:"update your environment file"})," with the network name."]}),"\n",(0,s.jsx)(n.h3,{id:"2-create-a-project-directory",children:"2. Create a project directory"}),"\n",(0,s.jsx)(n.p,{children:"Create a new directory for your project. This can be done from the command line:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir sendTransaction\n"})}),"\n",(0,s.jsx)(n.p,{children:"Change into the new directory:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd sendTransaction\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-install-required-packages",children:"3. Install required packages"}),"\n",(0,s.jsxs)(n.p,{children:["Install the ",(0,s.jsx)(n.code,{children:"web3"})," and ",(0,s.jsx)(n.code,{children:"dotenv"})," packages in the project directory."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"/test-integrate-infura/services/tutorials/developer-tools/javascript-dotenv",children:(0,s.jsx)(n.code,{children:"dotenv"})})," package allows you to use a ",(0,s.jsx)(n.code,{children:".env"})," file to securely store private environment variables on your local machine."]})}),"\n",(0,s.jsxs)(n.p,{children:["Install the ",(0,s.jsx)(n.code,{children:"web3"})," package:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install web3\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Install the ",(0,s.jsx)(n.code,{children:"dotenv"})," package:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install dotenv --save\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"4-create-the-env-file",children:["4. Create the ",(0,s.jsx)(n.code,{children:".env"})," file"]}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:".env"})," file in your project directory to store the project and Ethereum account details."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:'ETHEREUM_NETWORK = "sepolia"\nINFURA_API_KEY = "<Your-API-Key>"\nSIGNER_PRIVATE_KEY = "<Your-Private-Key>"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Ensure you replace the following values in the ",(0,s.jsx)(n.code,{children:".env"})," file:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<Your-API-Key>"})," with the API key of the Web3 project."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<Your-Private-Key>"})," with the ",(0,s.jsx)(n.a,{href:"https://metamask.zendesk.com/hc/en-us/articles/360015289632-How-to-Export-an-Account-Private-Key",children:"private key of your Ethereum account"}),". A transaction must be signed with the sender's private key. Make sure that you prefix the ",(0,s.jsx)(n.code,{children:"SIGNER_PRIVATE_KEY"})," value with ",(0,s.jsx)(n.code,{children:"0x"}),". The private key you export from MetaMask will not be prefixed with ",(0,s.jsx)(n.code,{children:"0x"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If using a network other than Sepolia, ensure you update ",(0,s.jsx)(n.code,{children:"ETHEREUM_NETWORK"})," with the network name."]}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsx)(n.p,{children:"Never disclose your private key. Anyone with your private keys can steal any assets held in your account."})}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example ",(0,s.jsx)(n.code,{children:".env"})," file showing the valid prefix ",(0,s.jsx)(n.code,{children:"0x"})," for the ",(0,s.jsx)(n.code,{children:"SIGNER_PRIVATE_KEY"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:'ETHEREUM_NETWORK = "sepolia"\nINFURA_API_KEY = "d23...x...6e"\nSIGNER_PRIVATE_KEY = "0x561...x...61df"\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"5-create-sendjs-file",children:["5. Create ",(0,s.jsx)(n.code,{children:"send.js"})," file"]}),"\n",(0,s.jsxs)(n.p,{children:["In this example we'll create a JavaScript file (",(0,s.jsx)(n.code,{children:"send.js"}),") in the project directory which configures and sends the transaction."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:"showLineNumbers",children:'const { Web3 } = require("web3");\nconst { ETH_DATA_FORMAT, DEFAULT_RETURN_FORMAT } = require("web3");\nasync function main() {\n  // Configuring the connection to an Ethereum node\n  const network = process.env.ETHEREUM_NETWORK;\n  const web3 = new Web3(\n    new Web3.providers.HttpProvider(\n      `https://${network}.infura.io/v3/${process.env.INFURA_API_KEY}`,\n    ),\n  );\n  // Creating a signing account from a private key\n  const signer = web3.eth.accounts.privateKeyToAccount(\n    process.env.SIGNER_PRIVATE_KEY,\n  );\n  web3.eth.accounts.wallet.add(signer);\n  await web3.eth\n    .estimateGas(\n      {\n        from: signer.address,\n        to: "0xAED01C776d98303eE080D25A21f0a42D94a86D9c",\n        value: web3.utils.toWei("0.0001", "ether"),\n      },\n      "latest",\n      ETH_DATA_FORMAT,\n    )\n    .then((value) => {\n      limit = value;\n    });\n\n  // Creating the transaction object\n  const tx = {\n    from: signer.address,\n    to: "0xAED01C776d98303eE080D25A21f0a42D94a86D9c",\n    value: web3.utils.toWei("0.0001", "ether"),\n    gas: limit,\n    nonce: await web3.eth.getTransactionCount(signer.address),\n    maxPriorityFeePerGas: web3.utils.toWei("3", "gwei"),\n    maxFeePerGas: web3.utils.toWei("3", "gwei"),\n    chainId: 11155111,\n    type: 0x2,\n  };\n  signedTx = await web3.eth.accounts.signTransaction(tx, signer.privateKey);\n  console.log("Raw transaction data: " + signedTx.rawTransaction);\n  // Sending the transaction to the network\n  const receipt = await web3.eth\n    .sendSignedTransaction(signedTx.rawTransaction)\n    .once("transactionHash", (txhash) => {\n      console.log(`Mining transaction ...`);\n      console.log(`https://${network}.etherscan.io/tx/${txhash}`);\n    });\n  // The transaction is now on chain!\n  console.log(`Mined in block ${receipt.blockNumber}`);\n}\nrequire("dotenv").config();\nmain();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"6-execute-the-transaction",children:"6. Execute the transaction"}),"\n",(0,s.jsx)(n.p,{children:"To execute the transaction, run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"node send.js\n"})}),"\n",(0,s.jsx)(n.p,{children:"The terminal displays a log similar to the following. Click on the URL to view the transaction details."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"Raw transaction data:\n0x02f87383aa36a78084b2d05e0084b2d05e0082520894aed01c776d98303ee080d25a21f0a42d94a86d9c865af3107a400080c080a058b88e1e01517ecaab0349f838aa07cbc90297679b2bbf2f48fa6f53b02ae358a00564373fe50e923d87f1da8d7805533c71cf81af32d66b3b2f45e972e4896fde\nMining transaction ...\nhttps://sepolia.etherscan.io/tx/0x31581c7ac2020de48d48363171fb3406f19fd14e67575695dafba51295959049\nMined in block 3773903\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(96540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);