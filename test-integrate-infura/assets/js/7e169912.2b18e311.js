"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[29673],{61437:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var n=t(74848),r=t(28453);const a={description:"Learn about different types of Ethereum transactions.",sidebar_position:4},i="Ethereum transaction types",c={id:"concepts/transaction-types",title:"Ethereum transaction types",description:"Learn about different types of Ethereum transactions.",source:"@site/services/concepts/transaction-types.md",sourceDirName:"concepts",slug:"/concepts/transaction-types",permalink:"/test-integrate-infura/services/concepts/transaction-types",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/services/concepts/transaction-types.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Learn about different types of Ethereum transactions.",sidebar_position:4},sidebar:"servicesSidebar",previous:{title:"Filters and subscriptions",permalink:"/test-integrate-infura/services/concepts/filters-and-subscriptions"},next:{title:"curl",permalink:"/test-integrate-infura/services/concepts/curl"}},o={},d=[{value:"Legacy transactions",id:"legacy-transactions",level:2},{value:"Access list transactions",id:"access-list-transactions",level:2},{value:"EIP-1559 transactions",id:"eip-1559-transactions",level:2}];function h(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"ethereum-transaction-types",children:"Ethereum transaction types"}),"\n",(0,n.jsxs)(s.p,{children:["You can interact with the ",(0,n.jsx)(s.a,{href:"../json-rpc-methods/",children:"Ethereum JSON-RPC API"})," using different transaction types (specified by the ",(0,n.jsx)(s.code,{children:"type"})," parameter)."]}),"\n",(0,n.jsx)(s.p,{children:"The following methods use a unique format depending on the transaction type:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"../json-rpc-methods/eth_call.mdx",children:(0,n.jsx)(s.code,{children:"eth_call"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"../json-rpc-methods/eth_estimategas.mdx",children:(0,n.jsx)(s.code,{children:"eth_estimateGas"})})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsxs)(s.a,{href:"../json-rpc-methods/eth_gettransactionbyblockhashandindex.mdx",children:[(0,n.jsx)(s.code,{children:"eth_getTransactionByBlockHashAndIndex"})," "]})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsxs)(s.a,{href:"../json-rpc-methods/eth_gettransactionbyblocknumberandindex.mdx",children:[(0,n.jsx)(s.code,{children:"eth_getTransactionByBlockNumberAndIndex"})," "]})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsxs)(s.a,{href:"../json-rpc-methods/eth_gettransactionbyhash.mdx",children:[(0,n.jsx)(s.code,{children:"eth_getTransactionByHash"})," "]})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsxs)(s.a,{href:"../json-rpc-methods/eth_gettransactionreceipt.mdx",children:[(0,n.jsx)(s.code,{children:"eth_getTransactionReceipt"})," "]})}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"legacy-transactions",children:"Legacy transactions"}),"\n",(0,n.jsxs)(s.p,{children:["Transactions with type ",(0,n.jsx)(s.code,{children:"0x0"})," are legacy transactions that use the transaction format existing before typed transactions were introduced in ",(0,n.jsx)(s.a,{href:"https://eips.ethereum.org/EIPS/eip-2718",children:"EIP-2718"}),". They contain the parameters ",(0,n.jsx)(s.code,{children:"nonce"}),", ",(0,n.jsx)(s.code,{children:"gasPrice"}),", ",(0,n.jsx)(s.code,{children:"gasLimit"}),", ",(0,n.jsx)(s.code,{children:"to"}),", ",(0,n.jsx)(s.code,{children:"value"}),", ",(0,n.jsx)(s.code,{children:"data"}),", ",(0,n.jsx)(s.code,{children:"v"}),", ",(0,n.jsx)(s.code,{children:"r"}),", and ",(0,n.jsx)(s.code,{children:"s"}),". Legacy transactions don\u2019t use ",(0,n.jsx)(s.a,{href:"/test-integrate-infura/services/concepts/transaction-types#access-list-transactions",children:"access lists"})," or incorporate ",(0,n.jsx)(s.a,{href:"/test-integrate-infura/services/concepts/transaction-types#undefined",children:"EIP-1559 fee market changes"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"access-list-transactions",children:"Access list transactions"}),"\n",(0,n.jsxs)(s.p,{children:["Transactions with type ",(0,n.jsx)(s.code,{children:"0x1"})," are transactions introduced in ",(0,n.jsx)(s.a,{href:"https://eips.ethereum.org/EIPS/eip-2930",children:"EIP-2930"}),". They contain, along with the ",(0,n.jsx)(s.a,{href:"#legacy-transactions",children:"legacy parameters"}),", an ",(0,n.jsx)(s.code,{children:"accessList"})," parameter, which specifies an array of addresses and storage keys that the transaction plans to access (an ",(0,n.jsx)(s.em,{children:"access list"}),"). Access list transactions must specify an access list, and they don\u2019t incorporate ",(0,n.jsx)(s.a,{href:"#eip-1559-transactions",children:"EIP-1559 fee market changes"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["Also, access list transactions contain the ",(0,n.jsx)(s.code,{children:"yParity"})," parameter. The returned values for this parameter can either be ",(0,n.jsx)(s.code,{children:"0x0"})," or ",(0,n.jsx)(s.code,{children:"0x1"}),". This is the parity (0 for even, 1 for odd) of the y-value of a ",(0,n.jsx)(s.a,{href:"https://eips.ethereum.org/EIPS/eip-2098#:~:text=A%20secp256k1%20signature%20is%20made%20up%20of%203%20parameters%2C%20r%2C%20s%20and%20yParity.",children:(0,n.jsx)(s.code,{children:"secp256k1"})})," signature."]}),"\n",(0,n.jsxs)(s.p,{children:["Use the ",(0,n.jsx)(s.a,{href:"../json-rpc-methods/eth_createaccesslist.mdx",children:(0,n.jsx)(s.code,{children:"eth_createAccessList"})})," API to simulate a transaction which returns the addresses and storage keys that may be used to send the real transaction, and the approximate gas cost."]}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsxs)(s.p,{children:["View the ",(0,n.jsx)(s.a,{href:"https://blog.infura.io/post/optimizing-ethereum-transactions-with-eth_createaccesslist",children:"Infura article"})," that describes how ",(0,n.jsx)(s.code,{children:"eth_createAccessList"})," can help optimize gas costs, reduce out-of-gas errors, and verify clients for infrastructure access."]})}),"\n",(0,n.jsx)(s.h2,{id:"eip-1559-transactions",children:"EIP-1559 transactions"}),"\n",(0,n.jsxs)(s.p,{children:["Transactions with type ",(0,n.jsx)(s.code,{children:"0x2"})," are transactions introduced in ",(0,n.jsx)(s.a,{href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md",children:"EIP-1559"}),", included in Ethereum's ",(0,n.jsx)(s.a,{href:"https://ethereum.org/en/history/#london",children:"London fork"}),". EIP-1559 addresses the network congestion and overpricing of transaction fees caused by the historical fee market, in which users send transactions specifying a gas price bid using the ",(0,n.jsx)(s.code,{children:"gasPrice"})," parameter, and miners choose transactions with the highest bids."]}),"\n",(0,n.jsxs)(s.p,{children:["EIP-1559 transactions don\u2019t specify ",(0,n.jsx)(s.code,{children:"gasPrice"}),", and instead use an in-protocol, dynamically changing ",(0,n.jsx)(s.em,{children:"base fee"})," per gas. At each block, the base fee per gas is adjusted to address network congestion as measured by a gas target."]}),"\n",(0,n.jsxs)(s.p,{children:["EIP-1559 transactions contain the ",(0,n.jsxs)(s.a,{href:"/test-integrate-infura/services/concepts/transaction-types#access-list-transactions",children:[(0,n.jsx)(s.code,{children:"accessList"})," and ",(0,n.jsx)(s.code,{children:"yParity"})," parameters"]})," and ",(0,n.jsx)(s.a,{href:"/test-integrate-infura/services/concepts/transaction-types#legacy-transactions",children:"legacy parameters"})," (except for ",(0,n.jsx)(s.code,{children:"gasPrice"}),")."]}),"\n",(0,n.jsxs)(s.p,{children:["They also contain a ",(0,n.jsx)(s.code,{children:"maxPriorityFeePerGas"})," parameter, which specifies the maximum fee the sender is willing to pay per gas above the base fee (the maximum ",(0,n.jsx)(s.em,{children:"priority fee"})," per gas), and a ",(0,n.jsx)(s.code,{children:"maxFeePerGas"})," parameter, which specifies the maximum total fee (base fee + priority fee) the sender is willing to pay per gas."]}),"\n",(0,n.jsxs)(s.p,{children:["An EIP-1559 transaction always pays the base fee of the block it\u2019s included in, and it pays a priority fee as priced by ",(0,n.jsx)(s.code,{children:"maxPriorityFeePerGas"})," or, if the base fee per gas + ",(0,n.jsx)(s.code,{children:"maxPriorityFeePerGas"})," exceeds ",(0,n.jsx)(s.code,{children:"maxFeePerGas"}),", it pays a priority fee as priced by ",(0,n.jsx)(s.code,{children:"maxFeePerGas"})," minus the base fee per gas. The base fee is burned, and the priority fee is paid to the miner that included the transaction. A transaction\u2019s priority fee per gas incentivizes miners to include the transaction over other transactions with lower priority fees per gas."]}),"\n",(0,n.jsxs)(s.p,{children:["Read the ",(0,n.jsx)(s.a,{href:"https://consensys.net/blog/quorum/what-is-eip-1559-how-will-it-change-ethereum/",children:"ConsenSys EIP-1559 primer"})," for more information on how EIP-1559 changes Ethereum."]})]})}function l(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>c});var n=t(96540);const r={},a=n.createContext(r);function i(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);