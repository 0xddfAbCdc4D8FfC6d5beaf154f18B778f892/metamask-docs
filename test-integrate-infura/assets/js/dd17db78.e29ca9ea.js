"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[70040],{34101:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(74848),s=t(28453);const a={description:"Use the Ethers InfuraProvider and Web3Provider methods."},o="Use ethers.js InfuraProvider or Web3Provider",i={id:"tutorials/ethereum/send-a-transaction/use-ethers.js-infuraprovider-or-web3provider",title:"Use ethers.js InfuraProvider or Web3Provider",description:"Use the Ethers InfuraProvider and Web3Provider methods.",source:"@site/services/tutorials/ethereum/send-a-transaction/use-ethers.js-infuraprovider-or-web3provider.md",sourceDirName:"tutorials/ethereum/send-a-transaction",slug:"/tutorials/ethereum/send-a-transaction/use-ethers.js-infuraprovider-or-web3provider",permalink:"/test-integrate-infura/services/tutorials/ethereum/send-a-transaction/use-ethers.js-infuraprovider-or-web3provider",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/services/tutorials/ethereum/send-a-transaction/use-ethers.js-infuraprovider-or-web3provider.md",tags:[],version:"current",frontMatter:{description:"Use the Ethers InfuraProvider and Web3Provider methods."}},d={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"1. Create the React app",id:"1-create-the-react-app",level:3},{value:"2. Install ethers.js",id:"2-install-ethersjs",level:3},{value:"3. Create the environment variables",id:"3-create-the-environment-variables",level:3},{value:"4. Build the app",id:"4-build-the-app",level:3},{value:"Import dependencies and create providers",id:"import-dependencies-and-create-providers",level:4},{value:"Maintain the app state",id:"maintain-the-app-state",level:4},{value:"Create the app frontend.",id:"create-the-app-frontend",level:4},{value:"Retrieve the latest block number",id:"retrieve-the-latest-block-number",level:4},{value:"Send the transaction",id:"send-the-transaction",level:4},{value:"5. Run the app",id:"5-run-the-app",level:3},{value:"Complete code sample",id:"complete-code-sample",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"use-ethersjs-infuraprovider-or-web3provider",children:"Use ethers.js InfuraProvider or Web3Provider"}),"\n",(0,r.jsxs)(n.p,{children:["In this tutorial, we'll create a simple React app to show the differences between using the ethers.js library's ",(0,r.jsx)(n.code,{children:"InfuraProvider"})," and ",(0,r.jsx)(n.code,{children:"Web3Provider"})," methods to send a transaction."]}),"\n",(0,r.jsx)(n.p,{children:"The key difference we'll highlight is that with Web3Provider you can load the private key from a Web3 wallet (MetaMask in this example), while InfuraProvider needs a wallet created locally with a stored private key."}),"\n",(0,r.jsx)(n.p,{children:"This tutorial uses the Sepolia testnet."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Install ",(0,r.jsx)(n.a,{href:"https://metamask.io",children:"MetaMask"})," and create an Ethereum account for testing purposes."]}),"\n",(0,r.jsxs)(n.li,{children:["Load Sepolia ETH into your wallet from the ",(0,r.jsx)(n.a,{href:"https://www.infura.io/faucet",children:"Infura faucet"}),"."]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nodejs.org/en/download/",children:"Node.js and NPM installed"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"You can run the following to confirm that Node and NPM are installed:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"node -v && npm -v\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"This tutorial was tested using ethers v5.7.2 and Node.js v16.17.0."})}),"\n",(0,r.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,r.jsx)(n.h3,{id:"1-create-the-react-app",children:"1. Create the React app"}),"\n",(0,r.jsx)(n.p,{children:"In the terminal, run the following command to create an app called my-app:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx create-react-app my-app\n"})}),"\n",(0,r.jsx)(n.p,{children:"Change into the project directory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd my-app\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-install-ethersjs",children:"2. Install ethers.js"}),"\n",(0,r.jsxs)(n.p,{children:["Install ",(0,r.jsx)(n.code,{children:"ethers.js"})," in the project directory."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save ethers\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-create-the-environment-variables",children:"3. Create the environment variables"}),"\n",(0,r.jsxs)(n.p,{children:["Create a ",(0,r.jsx)(n.code,{children:".env"})," file in your project directory to store the project and Ethereum account details."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'REACT_APP_API_KEY="<Your-API-Key>"\nREACT_APP_PRIVATE_KEY="<Private-Key>"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Ensure you replace the following values in the ",(0,r.jsx)(n.code,{children:".env"})," file:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<Your-API-Key>"})," with the API key of the Ethereum project."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<Private-Key>"})," with the ",(0,r.jsx)(n.a,{href:"https://metamask.zendesk.com/hc/en-us/articles/360015289632-How-to-Export-an-Account-Private-Key",children:"private key of your Ethereum account"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"danger",children:(0,r.jsx)(n.p,{children:"Never disclose your private key. Anyone with your private keys can steal any assets held in your account."})}),"\n",(0,r.jsx)(n.h3,{id:"4-build-the-app",children:"4. Build the app"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["You can ",(0,r.jsx)(n.a,{href:"/test-integrate-infura/services/tutorials/ethereum/send-a-transaction/use-ethers.js-infuraprovider-or-web3provider#complete-code-sample",children:"copy the complete code sample from the final section"}),"."]})}),"\n",(0,r.jsx)(n.h4,{id:"import-dependencies-and-create-providers",children:"Import dependencies and create providers"}),"\n",(0,r.jsx)(n.p,{children:"Import the required dependencies and create the providers for communicating with the blockchain."}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"src"})," directory open the ",(0,r.jsx)(n.code,{children:"App.js"})," file. Remove the existing code and add the following code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="App.js"',children:'import React, { useState } from "react";\nimport "./App.css";\n\nfunction App() {\n  const ethers = require("ethers");\n  const API_KEY = process.env.REACT_APP_API_KEY;\n  const PRIVATE_KEY = process.env.REACT_APP_PRIVATE_KEY;\n  const provider_Metamask = new ethers.providers.Web3Provider(window.ethereum);\n  const infuraProvider = new ethers.providers.InfuraProvider(\n    "sepolia",\n    API_KEY,\n  );\n}\nexport default App;\n'})}),"\n",(0,r.jsx)(n.h4,{id:"maintain-the-app-state",children:"Maintain the app state"}),"\n",(0,r.jsxs)(n.p,{children:["Next, use the ",(0,r.jsx)(n.code,{children:"useState"})," hook function to maintain the state of the app. Add the following code below the ",(0,r.jsx)(n.code,{children:"const"})," declarations (inside the ",(0,r.jsx)(n.code,{children:"App()"})," declaration):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="App.js"',children:"// Use the useState hook function to add state variables to a functional component.\nconst [blockNumber, setBlockNumber] = useState(null);\nconst [txSent, setTxSent] = useState(null);\nconst [txSentInfura, setTxSentInfura] = useState(null);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"create-the-app-frontend",children:"Create the app frontend."}),"\n",(0,r.jsx)(n.p,{children:"Next, create the app front-end that includes two forms for sending the transactions, and buttons for each provider to fetch the latest block number."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="App.js" showLineNumbers',children:'// Configure the app frontend\nreturn (\n  <div className="App">\n    <header className="App-header">\n      <h3> Press one of the buttons to find out the latest block number: </h3>\n      <div>\n        <button onClick={handleButton1}>InfuraProvider</button>\n        <button onClick={handleButton2}>Web3Provider</button>\n        <p>{blockNumber}</p>\n      </div>\n      <h3> Fill out the form to send a transaction via Web3Provider: </h3>\n      <div>\n        <form onSubmit={handleSubmitWeb3}>\n          <input type="text" name="address" placeholder="Recipient Address" />\n          <input type="text" name="amount" placeholder="Amount (ETH)" />\n          <input type="submit" value="Send w/ Web3Provider" />\n        </form>\n        <p>{txSent}</p>\n      </div>\n      <h3> Fill out the form to send a transaction via InfuraProvider: </h3>\n      <div>\n        <form onSubmit={handleSubmitInfura}>\n          <input type="text" name="address" placeholder="Recipient Address" />\n          <input type="text" name="amount" placeholder="Amount (ETH)" />\n          <input type="submit" value="Send w/ InfuraProvider" />\n        </form>\n        <p>{txSentInfura}</p>\n      </div>\n    </header>\n  </div>\n);\n'})}),"\n",(0,r.jsx)(n.h4,{id:"retrieve-the-latest-block-number",children:"Retrieve the latest block number"}),"\n",(0,r.jsxs)(n.p,{children:["Create the code to retrieve the latest block number. Add the following code above the ",(0,r.jsx)(n.code,{children:"return"})," statement."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Get the latest block using the InfuraProvider or wallet\nconst handleButton1 = async () => {\n  const latest_block = await infuraProvider.getBlockNumber("latest");\n  setBlockNumber(latest_block);\n};\n\nconst handleButton2 = async () => {\n  const latest_block = await provider_Metamask.getBlockNumber("latest");\n  setBlockNumber(latest_block);\n};\n'})}),"\n",(0,r.jsx)(n.h4,{id:"send-the-transaction",children:"Send the transaction"}),"\n",(0,r.jsx)(n.p,{children:"To send the transaction, you need the target address and the amount to send. Add the following code below the code that retrieves the latest block number."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Handle the form submissions to send the transactions\nconst handleSubmitWeb3 = async (e) => {\n  e.preventDefault();\n  const data = new FormData(e.target);\n  const address = data.get("address");\n  const amount = data.get("amount");\n  sendTransaction(address, amount);\n};\n\nconst handleSubmitInfura = async (e) => {\n  e.preventDefault();\n  const data = new FormData(e.target);\n  const address = data.get("address");\n  const amount = data.get("amount");\n  const signer = new ethers.Wallet(PRIVATE_KEY, infuraProvider);\n  sendTransaction(address, amount, signer);\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Next, create the ",(0,r.jsx)(n.code,{children:"sendTransaction()"})," function that sends the transaction. Place the following code below the two ",(0,r.jsx)(n.code,{children:"handleSubmit"})," methods."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'  // Send the transaction using either the Web3Provider or InfuraProvider\n  const sendTransaction = async (address, amount, signer=null) => {\n    if (signer==null){ // Web3 Provider\n      if (!window.ethereum)\n        console.error("No wallet found!");\n      else {\n        await window.ethereum.send("eth_requestAccounts");\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const tx = await signer.sendTransaction({\n          to: address,\n          value: ethers.utils.parseEther(amount)\n        });\n        console.log("tx", tx);\n        setTxSent(\'Transaction initiated! Tx hash: \' + tx.hash);\n      }\n    }\n    else // InfuraProvider\n    {\n      const tx = await signer.sendTransaction({\n        to: address,\n        value: ethers.utils.parseEther(amount)\n      });\n      console.log("tx", tx);\n      setTxSentInfura(\'Transaction initiated! Tx hash: \' + tx.hash);\n    }\n  }Ja\n'})}),"\n",(0,r.jsx)(n.h3,{id:"5-run-the-app",children:"5. Run the app"}),"\n",(0,r.jsx)(n.p,{children:"Run the app from the root of the directory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm start\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsx)(n.p,{children:"If you are using create-react-app version >=5 you may run into issues building, such as:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Module not found: Error: Can't resolve 'crypto' in 'C:\\Users\\Username\\Projects\\testProject\\client\\node_modules\\eth-lib\\lib'\n\nBREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.\nThis is no longer the case. Verify if you need this module and configure a polyfill for it.\n"})}),(0,r.jsx)(n.p,{children:"This is because NodeJS polyfills are not included in the latest version of create-react-app."}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/ChainSafe/web3.js#web3-and-create-react-app",children:"Follow these instructions to resolve the issue"}),"."]})]}),"\n",(0,r.jsx)(n.p,{children:"In the app, notice that when you try and send a transaction using Web3Provider, the app opens a MetaMask instance to transfer your funds."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(45933).A+"",width:"362",height:"622"})}),"\n",(0,r.jsx)(n.p,{children:"If you transfer funds using the InfuraProvider, then the funds are transferred directly from your app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(17477).A+"",width:"850",height:"187"})}),"\n",(0,r.jsx)(n.h2,{id:"complete-code-sample",children:"Complete code sample"}),"\n",(0,r.jsx)(n.p,{children:"The complete code sample looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import React, { useState } from "react";\nimport "./App.css";\n\nfunction App() {\n  const ethers = require("ethers");\n  const API_KEY = process.env.REACT_APP_API_KEY;\n  const PRIVATE_KEY = process.env.REACT_APP_PRIVATE_KEY;\n  const provider_Metamask = new ethers.providers.Web3Provider(window.ethereum);\n  const infuraProvider = new ethers.providers.InfuraProvider("goerli", API_KEY);\n\n  // Use the useState hook function to add state variables to a functional component.\n  const [blockNumber, setBlockNumber] = useState(null);\n  const [txSent, setTxSent] = useState(null);\n  const [txSentInfura, setTxSentInfura] = useState(null);\n\n  // Get the latest block using the InfuraProvider or wallet\n  const handleButton1 = async () => {\n    const latest_block = await infuraProvider.getBlockNumber("latest");\n    setBlockNumber(latest_block);\n  };\n\n  const handleButton2 = async () => {\n    const latest_block = await provider_Metamask.getBlockNumber("latest");\n    setBlockNumber(latest_block);\n  };\n\n  // Handle the form submissions to send the transactions\n  const handleSubmitWeb3 = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const address = data.get("address");\n    const amount = data.get("amount");\n    sendTransaction(address, amount);\n  };\n\n  const handleSubmitInfura = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const address = data.get("address");\n    const amount = data.get("amount");\n    const signer = new ethers.Wallet(PRIVATE_KEY, infuraProvider);\n    sendTransaction(address, amount, signer);\n  };\n\n  // Send the transaction using either the Web3Provider or InfuraProvider\n  const sendTransaction = async (address, amount, signer = null) => {\n    if (signer == null) {\n      // Web3 Provider\n      if (!window.ethereum) console.error("No wallet found!");\n      else {\n        await window.ethereum.send("eth_requestAccounts");\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const tx = await signer.sendTransaction({\n          to: address,\n          value: ethers.utils.parseEther(amount),\n        });\n        console.log("tx", tx);\n        setTxSent("Transaction initiated! Tx hash: " + tx.hash);\n      }\n    } // InfuraProvider\n    else {\n      const tx = await signer.sendTransaction({\n        to: address,\n        value: ethers.utils.parseEther(amount),\n      });\n      console.log("tx", tx);\n      setTxSentInfura("Transaction initiated! Tx hash: " + tx.hash);\n    }\n  };\n\n  // Configure the app frontend\n  return (\n    <div className="App">\n      <header className="App-header">\n        <h3> Press one of the buttons to find out the latest block number: </h3>\n        <div>\n          <button onClick={handleButton1}>InfuraProvider</button>\n          <button onClick={handleButton2}>Web3Provider</button>\n          <p>{blockNumber}</p>\n        </div>\n        <h3> Fill out the form to send a transaction via Web3Provider: </h3>\n        <div>\n          <form onSubmit={handleSubmitWeb3}>\n            <input type="text" name="address" placeholder="Recipient Address" />\n            <input type="text" name="amount" placeholder="Amount (ETH)" />\n            <input type="submit" value="Send w/ Web3Provider" />\n          </form>\n          <p>{txSent}</p>\n        </div>\n        <h3> Fill out the form to send a transaction via InfuraProvider: </h3>\n        <div>\n          <form onSubmit={handleSubmitInfura}>\n            <input type="text" name="address" placeholder="Recipient Address" />\n            <input type="text" name="amount" placeholder="Amount (ETH)" />\n            <input type="submit" value="Send w/ InfuraProvider" />\n          </form>\n          <p>{txSentInfura}</p>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},17477:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/app-d2427fce68c61f8caf41c8f3b2342571.png"},45933:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/metamask-23942d1b4ee75e0a59d1eda4317ed347.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(96540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);