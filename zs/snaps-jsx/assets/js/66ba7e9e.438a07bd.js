"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[4050],{54680:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>h});var t=s(74848),a=s(28453),i=s(40267),r=s(19365);const l={description:"See the Snaps API reference.",sidebar_position:1},c="Snaps API",o={id:"reference/snaps-api",title:"Snaps API",description:"See the Snaps API reference.",source:"@site/snaps/reference/snaps-api.md",sourceDirName:"reference",slug:"/reference/snaps-api",permalink:"/zs/snaps-jsx/snaps/reference/snaps-api",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/reference/snaps-api.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"See the Snaps API reference.",sidebar_position:1},sidebar:"snapsSidebar",previous:{title:"Reference",permalink:"/zs/snaps-jsx/snaps/reference"},next:{title:"Wallet API for Snaps",permalink:"/zs/snaps-jsx/snaps/reference/wallet-api-for-snaps"}},d={},h=[{value:"<code>snap_dialog</code>",id:"snap_dialog",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:4},{value:"<code>snap_getBip32Entropy</code>",id:"snap_getbip32entropy",level:2},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:4},{value:"<code>snap_getBip32PublicKey</code>",id:"snap_getbip32publickey",level:2},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example",id:"example-2",level:4},{value:"<code>snap_getBip44Entropy</code>",id:"snap_getbip44entropy",level:2},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example",id:"example-3",level:4},{value:"<code>snap_getClientStatus</code>",id:"snap_getclientstatus",level:2},{value:"Returns",id:"returns-4",level:4},{value:"Example",id:"example-4",level:4},{value:"<code>snap_getEntropy</code>",id:"snap_getentropy",level:2},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Example",id:"example-5",level:4},{value:"<code>snap_getFile</code>",id:"snap_getfile",level:2},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Example",id:"example-6",level:4},{value:"<code>snap_getLocale</code>",id:"snap_getlocale",level:2},{value:"Returns",id:"returns-7",level:4},{value:"Example",id:"example-7",level:4},{value:"<code>snap_manageAccounts</code>",id:"snap_manageaccounts",level:2},{value:"createAccount",id:"createaccount",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Example",id:"example-8",level:4},{value:"updateAccount",id:"updateaccount",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Example",id:"example-9",level:4},{value:"deleteAccount",id:"deleteaccount",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Example",id:"example-10",level:4},{value:"listAccounts",id:"listaccounts",level:3},{value:"Returns",id:"returns-11",level:4},{value:"Example",id:"example-11",level:4},{value:"submitResponse",id:"submitresponse",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Example",id:"example-12",level:4},{value:"<code>snap_manageState</code>",id:"snap_managestate",level:2},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Example",id:"example-13",level:4},{value:"<code>snap_notify</code>",id:"snap_notify",level:2},{value:"Parameters",id:"parameters-11",level:4},{value:"Example",id:"example-14",level:4},{value:"Interactive UI methods",id:"interactive-ui-methods",level:2},{value:"<code>snap_createInterface</code>",id:"snap_createinterface",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Example",id:"example-15",level:4},{value:"<code>snap_getInterfaceState</code>",id:"snap_getinterfacestate",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Example",id:"example-16",level:4},{value:"<code>snap_updateInterface</code>",id:"snap_updateinterface",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Example",id:"example-17",level:4}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"snaps-api",children:"Snaps API"}),"\n",(0,t.jsxs)(n.p,{children:["Snaps can communicate with and modify the functionality of MetaMask using the ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/learn/about-snaps/apis#snaps-api",children:"Snaps API"}),".\nTo call each method (except the ",(0,t.jsx)(n.a,{href:"#interactive-ui-methods",children:"interactive UI methods"}),"), you must first\n",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/how-to/request-permissions",children:"request permission"})," in the Snap manifest file."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/reference/wallet-api-for-snaps",children:"Wallet API for Snaps"})," for methods that dapps can call to\ncommunicate with Snaps."]})}),"\n",(0,t.jsx)(n.h2,{id:"snap_dialog",children:(0,t.jsx)(n.code,{children:"snap_dialog"})}),"\n",(0,t.jsxs)(n.p,{children:["Displays a ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/custom-ui/dialogs",children:"dialog"})," in the MetaMask UI."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(n.p,{children:"An object containing the contents of the dialog:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"type"})," - The type of dialog.\nPossible values are:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"alert"'})," - An alert that can only be acknowledged."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"confirmation"'})," - A confirmation that can be accepted or rejected."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"prompt"'})," - A prompt where the user can enter a text response."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["One of:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"content"})," - The content of the alert, as a ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/custom-ui/",children:"custom UI"})," component."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id"})," - The ID of an ",(0,t.jsx)(n.a,{href:"#snap_createinterface",children:"interactive interface"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"placeholder"})," - Only used for ",(0,t.jsx)(n.code,{children:'"prompt"'})," dialogs.\nText that will be in the input field when nothing is typed."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:["Return value depends on the dialog ",(0,t.jsx)(n.code,{children:"type"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"alert"'})," - None."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"confirmation"'})," - ",(0,t.jsx)(n.code,{children:"true"})," if the confirmation was accepted, ",(0,t.jsx)(n.code,{children:"false"})," otherwise."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"prompt"'})," - The text entered by the user if the prompt was submitted or ",(0,t.jsx)(n.code,{children:"null"})," if the prompt was\nrejected or closed.\nIf the user does not enter any text and submits the prompt, the value is an empty string."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(r.A,{value:"Functions",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="index.ts"',children:'import { panel, text, heading } from "@metamask/snaps-sdk";\n\nconst walletAddress = await snap.request({\n  method: "snap_dialog",\n  params: {\n    type: "prompt",\n    content: panel([\n      heading("What is the wallet address?"),\n      text("Please enter the wallet address to be monitored"),\n    ]),\n    placeholder: "0x123...",\n  },\n});\n\n// walletAddress will be a string containing the address entered by the user.\n'})})}),(0,t.jsx)(r.A,{value:"JSX",flaskOnly:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:'title="index.tsx"',children:'import { Box, Heading, Text } from \'@metamask/snaps-sdk/jsx\';\n\nconst walletAddress = await snap.request({\n  method: "snap_dialog",\n  params: {\n    type: "prompt",\n    content: (\n      <Box>\n        <Heading>What is the wallet address?</Heading>\n        <Text>Please enter the wallet address to be monitored</Text>\n      </Box>\n    ),\n    placeholder: "0x123...",\n  },\n});\n\n// walletAddress will be a string containing the address entered by the user.\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"snap_getbip32entropy",children:(0,t.jsx)(n.code,{children:"snap_getBip32Entropy"})}),"\n",(0,t.jsx)(n.admonition,{title:"important",type:"danger",children:(0,t.jsx)(n.p,{children:"If you call this method, you receive the user's parent key for the derivation path they request.\nYou're managing the user's keys and assets on their behalf.\nTheir safety is your responsibility."})}),"\n",(0,t.jsxs)(n.p,{children:["Gets the ",(0,t.jsx)(n.a,{href:"https://github.com/satoshilabs/slips/blob/master/slip-0010.md",children:"SLIP-10"})," key for the ",(0,t.jsx)(n.code,{children:"path"}),"\nand ",(0,t.jsx)(n.code,{children:"curve"})," specified by the method name."]}),"\n",(0,t.jsxs)(n.p,{children:["This method is designed to be used with the\n",(0,t.jsx)(n.a,{href:"https://npmjs.com/package/@metamask/key-tree",children:(0,t.jsx)(n.code,{children:"@metamask/key-tree"})})," module.\n",(0,t.jsx)(n.code,{children:"@metamask/key-tree"})," can help you get the\n",(0,t.jsx)(n.a,{href:"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys",children:"extended private keys"}),"\nfor user addresses, but it's your responsibility to know how to use those keys to, for example,\nderive an address for the relevant protocol or sign a transaction for the user."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsx)(n.p,{children:"An object containing:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"path"})," - An array, starting with ",(0,t.jsx)(n.code,{children:"m"}),", containing the BIP-32 derivation path to the key to\nretrieve.\nFor example, ",(0,t.jsx)(n.code,{children:'["m", "44\'", "60\'"]'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"curve"})," - The curve to use for the key derivation.\nMust be ",(0,t.jsx)(n.code,{children:'"ed25519"'})," or ",(0,t.jsx)(n.code,{children:'"secp256k1"'}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:["An object representing the\n",(0,t.jsx)(n.a,{href:"https://github.com/satoshilabs/slips/blob/master/slip-0010.md",children:"SLIP-10"})," HD tree node and containing\nits corresponding key material:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"depth"})," - The 0-indexed path depth of the node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"parentFingerprint"})," - The fingerprint of the parent key, or 0 if this is a master node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"index"})," - The index of the node, or 0 if this is a master node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"privateKey"})," - The private key of the node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"publicKey"})," - The public key of the node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"chainCode"})," - The chain code of the node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"curve"})," - The name of the curve used by the node: ",(0,t.jsx)(n.code,{children:'"ed25519"'})," or ",(0,t.jsx)(n.code,{children:'"secp256k1"'}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(r.A,{value:"Manifest file",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="snap.manifest.json"',children:'"initialPermissions": {\n  "snap_getBip32Entropy": [\n    {\n      "path": ["m", "44\'", "3\'"],\n      "curve": "secp256k1" // Or "ed25519"\n    }\n  ]\n}\n'})})}),(0,t.jsx)(r.A,{value:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="index.js"',children:'import { SLIP10Node } from "@metamask/key-tree";\n\n// This example uses Dogecoin, which has a derivation path starting with m/44\'/3\'.\nconst dogecoinNode = await snap.request({\n  method: "snap_getBip32Entropy",\n  params: {\n    // The path and curve must be specified in the initial permissions.\n    path: ["m", "44\'", "3\'"],\n    curve: "secp256k1",\n  },\n});\n\n// Next, create an instance of a SLIP-10 node for the Dogecoin node.\nconst dogecoinSlip10Node = await SLIP10Node.fromJSON(dogecoinNode);\n\n// m/44\'/3\'/0\'\nconst accountKey0 = await dogecoinSlip10Node.derive(["bip32:0\'"]);\n\n// m/44\'/3\'/1\'\nconst accountKey1 = await dogecoinSlip10Node.derive(["bip32:1\'"]);\n\n// Now, you can ask the user to sign transactions, etc.\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"snap_getbip32publickey",children:(0,t.jsx)(n.code,{children:"snap_getBip32PublicKey"})}),"\n",(0,t.jsxs)(n.p,{children:["Gets the ",(0,t.jsx)(n.a,{href:"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki",children:"BIP-32"})," public key for the\nderivation path specified by the ",(0,t.jsx)(n.code,{children:"path"})," parameter.\nNote that this returns the public key, not the extended public key (",(0,t.jsx)(n.code,{children:"xpub"}),"), or Ethereum address."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,t.jsx)(n.p,{children:"An object containing:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"path"})," - An array, starting with ",(0,t.jsx)(n.code,{children:"m"}),", containing the BIP-32 derivation path to the public key to\nretrieve.\nFor example, ",(0,t.jsx)(n.code,{children:'["m", "44\'", "60\'"]'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"curve"})," - The curve to use for the key derivation.\nMust be ",(0,t.jsx)(n.code,{children:'"ed25519"'})," or ",(0,t.jsx)(n.code,{children:'"secp256k1"'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"compressed"})," - Indicates whether the public key should be compressed.\nThe default is ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"The public key as hexadecimal string."}),"\n",(0,t.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(r.A,{value:"Manifest file",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="snap.manifest.json"',children:'"initialPermissions": {\n  "snap_getBip32PublicKey": [\n    {\n      "path": ["m", "44\'", "3\'", "0\'", "0", "0"],\n      "curve": "secp256k1"\n    }\n  ]\n}\n'})})}),(0,t.jsx)(r.A,{value:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="index.js"',children:'// This example uses Dogecoin, which has a derivation path starting with m/44\'/3\'.\nconst dogecoinPublicKey = await snap.request({\n  method: "snap_getBip32PublicKey",\n  params: {\n    // The path and curve must be specified in the initial permissions.\n    path: ["m", "44\'", "3\'", "0\'", "0", "0"],\n    curve: "secp256k1",\n    compressed: false,\n  },\n});\n\n// "0x..."\nconsole.log(dogecoinPublicKey);\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"snap_getbip44entropy",children:(0,t.jsx)(n.code,{children:"snap_getBip44Entropy"})}),"\n",(0,t.jsx)(n.admonition,{title:"important",type:"danger",children:(0,t.jsx)(n.p,{children:"If you call this method, you receive the user's parent key for the protocol they request.\nYou're managing the user's keys and assets on their behalf.\nTheir safety is your responsibility."})}),"\n",(0,t.jsxs)(n.p,{children:["Gets the ",(0,t.jsx)(n.a,{href:"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki",children:"BIP-44"})," ",(0,t.jsx)(n.code,{children:"coin_type"})," key\nfor the ",(0,t.jsx)(n.code,{children:"coin_type"})," number specified by the method name.\nSee ",(0,t.jsx)(n.a,{href:"https://github.com/satoshilabs/slips/blob/master/slip-0044.md",children:"SLIP-44"})," for the list of\navailable protocols and their ",(0,t.jsx)(n.code,{children:"coin_type"})," values."]}),"\n",(0,t.jsxs)(n.p,{children:["This method is designed to be used with the\n",(0,t.jsx)(n.a,{href:"https://npmjs.com/package/@metamask/key-tree",children:(0,t.jsx)(n.code,{children:"@metamask/key-tree"})})," module.\n",(0,t.jsx)(n.code,{children:"@metamask/key-tree"})," can help you get the\n",(0,t.jsx)(n.a,{href:"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys",children:"extended private keys"}),"\nfor user addresses, but it's your responsibility to know how to use those keys to, for example,\nderive an address for the relevant protocol or sign a transaction for the user."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,t.jsxs)(n.p,{children:["An object containing ",(0,t.jsx)(n.code,{children:"coinType"}),", the BIP-44 coin type to get the entropy for."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["Coin type 60 is reserved for MetaMask externally owned accounts and blocked for Snaps.\nIf you wish to connect to MetaMask accounts in a Snap, use\n",(0,t.jsx)(n.a,{href:"../reference/permissions.md/#endowmentethereum-provider",children:(0,t.jsx)(n.code,{children:"endowment:ethereum-provider"})})," and\n",(0,t.jsx)(n.a,{href:"/wallet/reference/eth_requestAccounts",children:(0,t.jsx)(n.code,{children:"eth_requestAccounts"})}),"."]})}),"\n",(0,t.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:["An object representing the\n",(0,t.jsx)(n.a,{href:"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki",children:"BIP-44"})," ",(0,t.jsx)(n.code,{children:"coin_type"})," HD tree node\nand containing its corresponding key material:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"coin_type"})," - The BIP-44 ",(0,t.jsx)(n.a,{href:"https://github.com/satoshilabs/slips/blob/master/slip-0044.md",children:"coin type"}),"\nvalue of the node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"depth"})," - The 0-indexed BIP-44 path depth of the node.\nSince this is a ",(0,t.jsx)(n.code,{children:"coin_type"})," node, the depth is ",(0,t.jsx)(n.code,{children:"2"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"privateKey"})," - The hexadecimal-encoded string representation of the private key for the node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"publicKey"})," - The hexadecimal-encoded string representation of the public key for the node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"chainCode"})," - The hexadecimal-encoded string representation of the chain code for the node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"path"})," - A human-readable representation of the BIP-44 HD tree path of the node.\nSince this is a ",(0,t.jsx)(n.code,{children:"coin_type"})," node, the path is of the form ",(0,t.jsx)(n.code,{children:"m/44'/coin_type'"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(r.A,{value:"Manifest file",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="snap.manifest.json"',children:'"initialPermissions": {\n  "snap_getBip44Entropy": [\n    {\n      "coinType": 3\n    }\n  ]\n}\n'})})}),(0,t.jsx)(r.A,{value:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="index.js"',children:"import { getBIP44AddressKeyDeriver } from \"@metamask/key-tree\";\n\n// This example uses Dogecoin, which has coin_type 3.\nconst dogecoinNode = await snap.request({\n  method: \"snap_getBip44Entropy\",\n  params: {\n    coinType: 3,\n  },\n});\n\n// Next, create an address key deriver function for the Dogecoin coin_type node.\n// In this case, its path is: m/44'/3'/0'/0/address_index\nconst deriveDogecoinAddress = await getBIP44AddressKeyDeriver(dogecoinNode);\n\n// These are BIP-44 nodes containing the extended private keys for the respective derivation paths.\n\n// m/44'/3'/0'/0/0\nconst addressKey0 = await deriveDogecoinAddress(0);\n\n// m/44'/3'/0'/0/1\nconst addressKey1 = await deriveDogecoinAddress(1);\n\n// Now, you can ask the user to sign transactions, etc.\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"snap_getclientstatus",children:(0,t.jsx)(n.code,{children:"snap_getClientStatus"})}),"\n",(0,t.jsx)(n.p,{children:"Gets the locked status of the Snaps client."}),"\n",(0,t.jsx)(n.p,{children:"It is useful to check if MetaMask is locked in the following situations:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When running background operations that require MetaMask to be unlocked, for example,\n",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/data-storage#2-use-encrypted-storage",children:"accessing encrypted state"}),".\nIf MetaMask is locked, the user gets an unexpected password request."]}),"\n",(0,t.jsxs)(n.li,{children:["When ",(0,t.jsx)(n.a,{href:"#snap_dialog",children:"displaying a dialog"}),". Dialogs do not work when MetaMask is locked."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"true"})," if MetaMask is locked, ",(0,t.jsx)(n.code,{children:"false"})," if MetaMask is unlocked."]}),"\n",(0,t.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="index.js"',children:'import type { OnCronjobHandler } from "@metamask/snaps-sdk";\nimport { MethodNotFoundError } from "@metamask/snaps-sdk";\n\nexport const onCronjob: OnCronjobHandler = async ({ request }) => {\n  switch (request.method) {\n    case "execute":\n      // Find out if MetaMask is locked.\n      const { locked } = await snap.request({\n        method: "snap_getClientStatus"\n      });\n\n      if (!locked) {\n        // Do something that requires MetaMask to be unlocked, such as access encrypted state.\n      }\n\n    default:\n      throw new MethodNotFoundError();\n  }\n};\n'})}),"\n",(0,t.jsx)(n.h2,{id:"snap_getentropy",children:(0,t.jsx)(n.code,{children:"snap_getEntropy"})}),"\n",(0,t.jsx)(n.p,{children:"Gets a deterministic 256-bit entropy value, specific to the Snap and the user's account.\nYou can use this entropy to generate a private key, or any other value that requires a high level of\nrandomness.\nOther Snaps can't access this entropy, and it changes if the user's secret recovery phrase changes."}),"\n",(0,t.jsx)(n.p,{children:"You can optionally specify a salt to generate different entropy for different purposes.\nUsing a salt results in entropy unrelated to the entropy generated without a salt."}),"\n",(0,t.jsx)(n.p,{children:"This value is deterministic: it's always the same for the same Snap, user account, and salt."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,t.jsx)(n.p,{children:"An object containing:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"version"})," - The number ",(0,t.jsx)(n.code,{children:"1"}),".\nThis is reserved for future use."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"salt"})," (optional) - An arbitrary string to be used as a salt for the entropy.\nThis can be used to generate different entropy for different purposes."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"The entropy as a hexadecimal string."}),"\n",(0,t.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(r.A,{value:"Manifest file",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="snap.manifest.json"',children:'"initialPermissions": {\n  "snap_getEntropy": {}\n}\n'})})}),(0,t.jsx)(r.A,{value:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="index.js"',children:'const entropy = await snap.request({\n  method: "snap_getEntropy",\n  params: {\n    version: 1,\n    salt: "foo", // Optional.\n  },\n});\n\n// "0x..."\nconsole.log(entropy);\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"snap_getfile",children:(0,t.jsx)(n.code,{children:"snap_getFile"})}),"\n",(0,t.jsxs)(n.p,{children:["Gets a static file's content in UTF-8, Base64, or hexadecimal.\nThe file must be ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/static-files",children:"specified in the Snap's manifest file"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,t.jsx)(n.p,{children:"An object containing:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"path"})," - The path to the file, relative to the Snap's package directory (that is, one level above ",(0,t.jsx)(n.code,{children:"src"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"encoding"})," (optional) - One of ",(0,t.jsx)(n.code,{children:"utf8"}),", ",(0,t.jsx)(n.code,{children:"base64"}),", or ",(0,t.jsx)(n.code,{children:"hex"}),". The default is ",(0,t.jsx)(n.code,{children:"base64"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"The file content as a string in the requested encoding."}),"\n",(0,t.jsx)(n.h4,{id:"example-6",children:"Example"}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(r.A,{value:"Manifest file",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="snap.manifest.json"',children:'"source": {\n  "shasum": "xxx",\n  "location": {\n    // ...\n  },\n  "files": [\n    "./files/myfile.bin"\n  ]\n}\n'})})}),(0,t.jsx)(r.A,{value:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="index.js"',children:'const contents = await snap.request({\n  method: "snap_getFile",\n  params: {\n    path: "./files/myfile.bin",\n    encoding: "hex",\n  },\n});\n\n// "0x..."\nconsole.log(contents);\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"snap_getlocale",children:(0,t.jsx)(n.code,{children:"snap_getLocale"})}),"\n",(0,t.jsx)(n.p,{children:"Gets the user's locale setting. You can use this method to localize text in your snap."}),"\n",(0,t.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:["The user's locale setting as a ",(0,t.jsx)(n.a,{href:"https://github.com/MetaMask/metamask-extension/blob/develop/app/_locales/index.json",children:"language code"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"example-7",children:"Example"}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(r.A,{value:"Functions",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="index.ts"',children:'import { panel, text } from "@metamask/snaps-sdk";\n\nconst locale = await snap.request({ method: "snap_getLocale" });\n\nlet greeting = "Hello";\nif(locale === "es") {\n  greeting = "Hola";\n}\n\nawait snap.request({\n  method: "snap_dialog",\n  params: {\n    type: "alert",\n    content: panel([\n      text(greeting),\n    ]),\n  },\n});\n'})})}),(0,t.jsx)(r.A,{value:"JSX",flaskOnly:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:'title="index.tsx"',children:'import { Box, Text } from \'@metamask/snaps-sdk/jsx\';\n\nconst locale = await snap.request({ method: "snap_getLocale" });\n\nlet greeting = "Hello";\nif(locale === "es") {\n  greeting = "Hola";\n}\n\nawait snap.request({\n  method: "snap_dialog",\n  params: {\n    type: "alert",\n    content: (\n      <Box>\n        <Text>{greeting}</Text>\n      </Box>\n    ),\n  },\n});\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"snap_manageaccounts",children:(0,t.jsx)(n.code,{children:"snap_manageAccounts"})}),"\n",(0,t.jsxs)(n.p,{children:["Manages ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/custom-evm-accounts/",children:"account management Snap"})," accounts.\nThis method is organized into multiple sub-methods which each take their own parameters:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#createaccount",children:(0,t.jsx)(n.code,{children:"createAccount"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#updateaccount",children:(0,t.jsx)(n.code,{children:"updateAccount"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#deleteaccount",children:(0,t.jsx)(n.code,{children:"deleteAccount"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#listaccounts",children:(0,t.jsx)(n.code,{children:"listAccounts"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#submitresponse",children:(0,t.jsx)(n.code,{children:"submitResponse"})})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"createaccount",children:"createAccount"}),"\n",(0,t.jsx)(n.p,{children:"Creates a new Snap account."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The Snap is responsible for maintaining its own record of accounts.\nThis can be done using ",(0,t.jsx)(n.a,{href:"#snap_managestate",children:(0,t.jsx)(n.code,{children:"snap_manageState"})}),"."]})}),"\n",(0,t.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"account"})," - ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/reference/keyring-api/account-management/objects#keyringaccount",children:"An account object."})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"null"})}),"\n",(0,t.jsx)(n.h4,{id:"example-8",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="index.ts"',children:'import { Keyring, KeyringAccount } from "@metamask/keyring-api";\n\nclass MyKeyring implements Keyring {\n  // Other methods.\n\n  async createAccount(\n    name: string,\n    options: Record<string, Json> | null = null,\n  ): Promise<KeyringAccount> {\n\n    const account: KeyringAccount = {\n      id: uuid(),\n      name,\n      options,\n      address,\n      supportedMethods: [\n        "eth_sendTransaction",\n        "eth_sign",\n        "eth_signTransaction",\n        "eth_signTypedData_v1",\n        "eth_signTypedData_v2",\n        "eth_signTypedData_v3",\n        "eth_signTypedData_v4",\n        "eth_signTypedData",\n        "personal_sign",\n      ],\n      type: "eip155:eoa",\n    };\n\n    // Store the account in state.\n\n    await snap.request({\n      method: "snap_manageAccounts",\n      params: {\n        method: "createAccount",\n        params: { account },\n      },\n    });\n\n    return account;\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"updateaccount",children:"updateAccount"}),"\n",(0,t.jsx)(n.p,{children:"Updates an existing Snap account."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The Snap is responsible for maintaining its own record of accounts.\nThis can be done using ",(0,t.jsx)(n.a,{href:"#snap_managestate",children:(0,t.jsx)(n.code,{children:"snap_manageState"})}),"."]})}),"\n",(0,t.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"account"})," - ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/reference/keyring-api/account-management/objects#keyringaccount",children:"An account object."})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-9",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"null"})}),"\n",(0,t.jsx)(n.h4,{id:"example-9",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="index.ts"',children:'import { Keyring, KeyringAccount } from "@metamask/keyring-api";\n\nclass MyKeyring implements Keyring {\n  // Other methods.\n\n  async updateAccount(account: KeyringAccount): Promise<void> {\n    // Store the new account details in state.\n\n    await snap.request({\n      method: "snap_manageAccounts",\n      params: {\n        method: "updateAccount",\n        params: { account },\n      },\n    });\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"deleteaccount",children:"deleteAccount"}),"\n",(0,t.jsx)(n.p,{children:"Deletes a Snap account."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The Snap is responsible for maintaining its own record of accounts.\nThis can be done using ",(0,t.jsx)(n.a,{href:"#snap_managestate",children:(0,t.jsx)(n.code,{children:"snap_manageState"})}),"."]})}),"\n",(0,t.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"id"})," - The ID of the account to be deleted."]}),"\n",(0,t.jsx)(n.h4,{id:"returns-10",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"null"})}),"\n",(0,t.jsx)(n.h4,{id:"example-10",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="index.ts"',children:'import { Keyring } from "@metamask/keyring-api";\n\nclass MyKeyring implements Keyring {\n  // Other methods.\n\n  async deleteAccount(id: string): Promise<void> {\n    // Delete the account from state.\n\n    await snap.request({\n      method: "snap_manageAccounts",\n      params: {\n        method: "deleteAccount",\n        params: { id },\n      },\n    });\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"listaccounts",children:"listAccounts"}),"\n",(0,t.jsx)(n.p,{children:"Lists the calling Snap's accounts that are known to MetaMask.\nThis method does not call back to the Snap.\nInstead, the Snap can use it to check whether there's a discrepancy between the Snap's internal\nstate of accounts and the state known to MetaMask."}),"\n",(0,t.jsx)(n.h4,{id:"returns-11",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:["An array of ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/reference/keyring-api/account-management/objects#keyringaccount",children:"account objects"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"example-11",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="index.ts"',children:'import { Keyring, KeyringAccount } from "@metamask/keyring-api";\n\nclass MyKeyring implements Keyring {\n  // Other methods.\n\n  async checkIfAccountsInSync(): Promise<boolean> {\n\n    const knownAccounts: KeyringAccount[] = /* Grab accounts from Snap state. */;\n\n    const listedAccounts: KeyringAccount[] = await snap.request({\n      method: "snap_manageAccounts",\n      params: {\n        method: "listAccounts",\n      },\n    });\n\n    // Compare the arrays and return the response.\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"submitresponse",children:"submitResponse"}),"\n",(0,t.jsxs)(n.p,{children:["Finalizes a signing request.\nThis is usually called as part of the\n",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/reference/keyring-api/account-management/#keyring_approverequest",children:(0,t.jsx)(n.code,{children:"keyring_approveRequest"})})," method."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id"})," - The ID of the request to finalize."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"result"})," - The result that should be returned to the original JSON-RPC caller."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-12",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"null"})}),"\n",(0,t.jsx)(n.h4,{id:"example-12",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="index.ts"',children:'import { Keyring } from "@metamask/keyring-api";\nimport { Json } from "@metamask/utils";\n\nclass MyKeyring implements Keyring {\n  // Other methods.\n\n  async approveRequest(id: string, result?: Json): Promise<void> {\n    // Do any Snap-side logic to finish approving the request.\n\n    await snap.request({\n      method: "snap_manageAccounts",\n      params: {\n        method: "submitResponse",\n        params: { id, result },\n      },\n    });\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"snap_managestate",children:(0,t.jsx)(n.code,{children:"snap_manageState"})}),"\n",(0,t.jsxs)(n.p,{children:["Allows the Snap to persist up to 100 MB of data to disk and retrieve it at will.\nBy default, the data is automatically encrypted using a Snap-specific key and automatically\ndecrypted when retrieved.\nYou can set ",(0,t.jsx)(n.code,{children:"encrypted"})," to ",(0,t.jsx)(n.code,{children:"false"})," to use unencrypted storage."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,t.jsx)(n.p,{children:"An object containing:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"operation"})," - The state operation to perform (",(0,t.jsx)(n.code,{children:'"clear"'}),", ",(0,t.jsx)(n.code,{children:'"get"'}),", or ",(0,t.jsx)(n.code,{children:'"update"'}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"newState"})," - The value to update state with if the operation is ",(0,t.jsx)(n.code,{children:'"update"'}),", and nothing otherwise."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"encrypted"})," (optional) - Indicates whether the Snap will encrypt the data.\nThe default is ",(0,t.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-13",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:["The value stored in state if the operation is ",(0,t.jsx)(n.code,{children:"get"}),", and ",(0,t.jsx)(n.code,{children:"null"})," otherwise."]}),"\n",(0,t.jsx)(n.h4,{id:"example-13",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="index.js"',children:'// Persist some data.\nawait snap.request({\n  method: "snap_manageState",\n  params: { \n    operation: "update",\n    newState: { hello: "world" },\n  },\n});\n\n// At a later time, get the stored data.\nconst persistedData = await snap.request({\n  method: "snap_manageState",\n  params: { operation: "get" },\n});\n\nconsole.log(persistedData);\n// { hello: "world" }\n\n// If there\'s no need to store data anymore, clear it out.\nawait snap.request({\n  method: "snap_manageState",\n  params: { \n    operation: "clear",\n  },\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"snap_notify",children:(0,t.jsx)(n.code,{children:"snap_notify"})}),"\n",(0,t.jsxs)(n.p,{children:["Displays a ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/notifications",children:"notification"})," in MetaMask or natively in the OS.\nSnaps can trigger a short notification text for actionable or time sensitive information."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,t.jsx)(n.p,{children:"An object containing the contents of the notification:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"type"})," - The notification type (",(0,t.jsx)(n.code,{children:'"inApp"'})," or ",(0,t.jsx)(n.code,{children:'"native"'}),").\nWe recommend using ",(0,t.jsx)(n.code,{children:'type: "inApp"'})," because there's no guarantee that native notifications are\ndisplayed to the user."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"message"})," - A message to show in the notification."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-14",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="index.js"',children:'await snap.request({\n  method: "snap_notify",\n  params: {\n    type: "inApp",\n    message: "Hello, world!",\n  },\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"interactive-ui-methods",children:"Interactive UI methods"}),"\n",(0,t.jsxs)(n.p,{children:["The following methods are used in ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/custom-ui/interactive-ui",children:"interactive UI"}),".\nThese methods do not require requesting permission in the Snap manifest file."]}),"\n",(0,t.jsx)(n.h3,{id:"snap_createinterface",children:(0,t.jsx)(n.code,{children:"snap_createInterface"})}),"\n",(0,t.jsxs)(n.p,{children:["Creates an interactive interface for use in ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/custom-ui/interactive-ui",children:"interactive UI"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,t.jsx)(n.p,{children:"An object containing:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ui"})," - The ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/custom-ui/",children:"custom UI"})," to create."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-14",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:["The interface's ID to be used in ",(0,t.jsx)(n.a,{href:"#snap_dialog",children:(0,t.jsx)(n.code,{children:"snap_dialog"})}),", returned from\n",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/reference/entry-points#ontransaction",children:(0,t.jsx)(n.code,{children:"onTransaction"})})," or ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/reference/entry-points#onhomepage",children:(0,t.jsx)(n.code,{children:"onHomePage"})}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"example-15",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="index.js"',children:'const interfaceId = await snap.request({\n  method: "snap_createInterface",\n  params: {\n    ui: panel([\n      heading("Interactive interface"),\n      button({\n        value: "Click me",\n        name: "interactive-button",\n      }),\n    ])\n  },\n});\n\nawait snap.request({\n  method: "snap_dialog",\n  params: {\n    type: "Alert",\n    id: interfaceId\n  }\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"snap_getinterfacestate",children:(0,t.jsx)(n.code,{children:"snap_getInterfaceState"})}),"\n",(0,t.jsxs)(n.p,{children:["Gets the state of an interactive interface by its ID.\nFor use in ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/custom-ui/interactive-ui",children:"interactive UI"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id"})," - The ID of the interface."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-15",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:"An object where each top-level property can be one of the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"name"})," of an ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/custom-ui/#input",children:(0,t.jsx)(n.code,{children:"input"})})," with its current value."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"name"})," of a ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/custom-ui/#form",children:(0,t.jsx)(n.code,{children:"form"})}),", with a nested object containing the\ncurrent values of all ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/custom-ui/#input",children:(0,t.jsx)(n.code,{children:"inputs"})})," in the form."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-16",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="index.js"',children:'const interfaceId = await snap.request({\n  method: "snap_createInterface",\n  params: {\n    ui: panel([\n      heading("Interactive UI Example Snap"),\n      // A top-level input.\n      input({\n        name: "top-level-input",\n        placeholder: "Enter something",\n      }),\n      // A top-level form...\n      form({\n        name: "example-form",\n        children: [\n          // ...with a nested input.\n          input({\n            name: "nested-input",\n            placeholder: "Enter something",\n          }),\n          button("Submit", ButtonType.Submit, "submit"),\n        ],\n      }),\n    ]),\n  },\n});\n\nconst state = await snap.request({\n  method: "snap_getInterfaceState",\n  params: {\n    id: interfaceId,\n  },\n});\n\nconsole.log(state);\n/*\n{\n  "top-level-input": "What the user typed in that field",\n  "example-form": {\n    "nested-input": "What the user typed in that field"\n  }\n}\n*/\n'})}),"\n",(0,t.jsx)(n.h3,{id:"snap_updateinterface",children:(0,t.jsx)(n.code,{children:"snap_updateInterface"})}),"\n",(0,t.jsxs)(n.p,{children:["Updates an interactive interface.\nFor use in ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/custom-ui/interactive-ui",children:"interactive UI"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,t.jsx)(n.p,{children:"An object containing:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id"})," - The ID of the interface to be updated, usually received in the\n",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/reference/entry-points#onuserinput",children:(0,t.jsx)(n.code,{children:"onUserInput"})})," entry point."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ui"})," - The ",(0,t.jsx)(n.a,{href:"/zs/snaps-jsx/snaps/features/custom-ui/",children:"custom UI"})," to create."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-17",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="index.js"',children:'export function onUserInput({ id, event }) {\n  console.log("Received input event", event);\n\n  await snap.request({\n    method: "snap_updateInterface",\n    params: {\n      id,\n      ui: panel([\n        heading("New interface"),\n      ]),\n    },\n  });\n};\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},19365:(e,n,s)=>{s.d(n,{A:()=>r});s(96540);var t=s(18215);const a={tabItem:"tabItem_Ymn6"};var i=s(74848);function r(e){let{children:n,hidden:s,className:r}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(a.tabItem,r),hidden:s,children:n})}},40267:(e,n,s)=>{s.d(n,{A:()=>w});var t=s(96540),a=s(20053),i=s(23104),r=s(56347),l=s(205),c=s(57485),o=s(31682),d=s(89466);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:s}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:s,attributes:t,default:a}}=e;return{value:n,label:s,attributes:t,default:a}}))}(s);return function(e){const n=(0,o.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function u(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:s}=e;const a=(0,r.W6)(),i=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,c.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function m(e){const{defaultValue:n,queryString:s=!1,groupId:a}=e,i=p(e),[r,c]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=s.find((e=>e.default))??s[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[o,h]=x({queryString:s,groupId:a}),[m,j]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,d.Dv)(s);return[a,(0,t.useCallback)((e=>{s&&i.set(e)}),[s,i])]}({groupId:a}),f=(()=>{const e=o??m;return u({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{f&&c(f)}),[f]);return{selectedValue:r,selectValue:(0,t.useCallback)((e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),j(e)}),[h,j,i]),tabValues:i}}var j=s(92303);const f={tabList:"tabList_TRJ7",tabItem:"tabItem_hGfb",flaskOnly:"flaskOnly_bhbK"};var g=s(74848),v=s(96763);function y(e){let{className:n,block:s,selectedValue:t,selectValue:r,tabValues:l}=e;v.log(l);const c=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),d=e=>{const n=e.currentTarget,s=c.indexOf(n),a=l[s].value;a!==t&&(o(n),r(a))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const s=c.indexOf(e.currentTarget)+1;n=c[s]??c[0];break}case"ArrowLeft":{const s=c.indexOf(e.currentTarget)-1;n=c[s]??c[c.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":s},n),children:l.map((e=>{let{value:n,label:s,attributes:i}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>c.push(e),onKeyDown:h,onClick:d,...i,className:(0,a.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":t===n}),children:s??n},n)}))})}function b(e){let{lazy:n,children:s,selectedValue:a}=e;const i=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function k(e){const n=m(e),s={...n,tabValues:n.tabValues.map(((n,s)=>({...n,attributes:{...n.attributes,className:(0,a.A)(n.attributes?.className,{[f.flaskOnly]:e.children[s]?.props.flaskOnly})}})))};return(0,g.jsxs)("div",{className:(0,a.A)("tabs-container",f.tabList),children:[(0,g.jsx)(y,{...s,...e}),(0,g.jsx)(b,{...s,...e})]})}function w(e){const n=(0,j.A)();return(0,g.jsx)(k,{...e,children:h(e.children)},String(n))}},20053:(e,n,s)=>{function t(e){var n,s,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(s=t(e[n]))&&(a&&(a+=" "),a+=s);else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}s.d(n,{A:()=>a});const a=function(){for(var e,n,s=0,a="";s<arguments.length;)(e=arguments[s++])&&(n=t(e))&&(a&&(a+=" "),a+=n);return a}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(96540);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);