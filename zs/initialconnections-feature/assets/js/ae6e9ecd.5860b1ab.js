"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[5693],{95904:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=t(74848),s=t(28453);const i={description:"Restrict your Snap's RPC API methods.",sidebar_label:"Restrict RPC API methods",sidebar_position:4},o="Restrict a Snap's RPC API methods",c={id:"how-to/restrict-rpc-api",title:"Restrict a Snap's RPC API methods",description:"Restrict your Snap's RPC API methods.",source:"@site/snaps/how-to/restrict-rpc-api.md",sourceDirName:"how-to",slug:"/how-to/restrict-rpc-api",permalink:"/zs/initialconnections-feature/snaps/how-to/restrict-rpc-api",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/how-to/restrict-rpc-api.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Restrict your Snap's RPC API methods.",sidebar_label:"Restrict RPC API methods",sidebar_position:4},sidebar:"snapsSidebar",previous:{title:"Use environment variables",permalink:"/zs/initialconnections-feature/snaps/how-to/use-environment-variables"},next:{title:"Allow automatic connections",permalink:"/zs/initialconnections-feature/snaps/how-to/allow-automatic-connections"}},a={},d=[{value:"Restrict the whole API",id:"restrict-the-whole-api",level:2},{value:"Restrict by method and origin",id:"restrict-by-method-and-origin",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"restrict-a-snaps-rpc-api-methods",children:"Restrict a Snap's RPC API methods"}),"\n",(0,r.jsxs)(n.p,{children:["If the ",(0,r.jsx)(n.code,{children:"dapps"})," caveat of the ",(0,r.jsx)(n.a,{href:"/zs/initialconnections-feature/snaps/reference/permissions#endowmentrpc",children:(0,r.jsx)(n.code,{children:"endowment:rpc"})})," permission\nis set to ",(0,r.jsx)(n.code,{children:"true"}),", any dapp can call the Snap's RPC API by default.\nYou can ",(0,r.jsx)(n.a,{href:"#restrict-the-whole-api",children:"restrict the whole API"})," to specific dapp origins or\n",(0,r.jsx)(n.a,{href:"#restrict-by-method-and-origin",children:"restrict the API by method and origin"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"restrict-the-whole-api",children:"Restrict the whole API"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"endowment:rpc"})," permission has an optional\n",(0,r.jsx)(n.a,{href:"/zs/initialconnections-feature/snaps/reference/permissions#allowed-origins",children:(0,r.jsx)(n.code,{children:"allowedOrigins"})})," caveat.\nYou can use this to restrict the domains that are allowed to make calls to the Snap's RPC API."]}),"\n",(0,r.jsx)(n.h2,{id:"restrict-by-method-and-origin",children:"Restrict by method and origin"}),"\n",(0,r.jsxs)(n.p,{children:["Sometimes a more granular control is required, such as filtering by method ",(0,r.jsx)(n.em,{children:"and"})," caller origin."]}),"\n",(0,r.jsxs)(n.p,{children:["You can restrict by method and origin using the ",(0,r.jsx)(n.code,{children:"origin"})," parameter of the\n",(0,r.jsx)(n.a,{href:"/zs/initialconnections-feature/snaps/reference/entry-points#onrpcrequest",children:(0,r.jsx)(n.code,{children:"onRpcRequest"})})," entry point.\nFor example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="index.ts"',children:'import type { OnRpcRequestHandler, UnauthorizedError } from "@metamask/snaps-sdk";\n\ntype MethodPermission = "*" | string[];\n\nconst RPC_PERMISSIONS: Record<string, MethodPermission> = {\n  hello: "*",\n  secureMethod: [\n    "https://metamask.io",\n    "https://www.mydomain.com",\n  ]\n};\n\nconst isAllowed = (method: string, origin: string) => {\n  return RPC_PERMISSIONS[method] === "*" || RPC_PERMISSIONS[method].includes(origin);\n};\n\nexport const onRpcRequest: OnRpcRequestHandler = async ({\n  origin,\n  request,\n}) => {\n  // Check permissions.\n  if (!isAllowed(request.method, origin)) {\n    throw new UnauthorizedError(`Method ${request.method} not authorized for origin ${origin}.`);\n  }\n\n  switch (request.method) {\n    case "hello":\n      return "world!";\n\n    case "secureMethod":\n      return "The secret is: 42";\n\n    default:\n      throw new Error("Method not found.");\n  }\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can construct more powerful filtering methods using regular expressions or any other logic of\nyour choice."})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(96540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);