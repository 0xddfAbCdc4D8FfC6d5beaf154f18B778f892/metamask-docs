"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[5651],{42284:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>r});var i=t(74848),a=t(28453);const s={description:"Authorize specific websites to automatically connect to a Snap.",sidebar_position:5},o="Allow automatic connections",l={id:"how-to/allow-automatic-connections",title:"Allow automatic connections",description:"Authorize specific websites to automatically connect to a Snap.",source:"@site/snaps/how-to/allow-automatic-connections.md",sourceDirName:"how-to",slug:"/how-to/allow-automatic-connections",permalink:"/zs/initialconnections-feature/snaps/how-to/allow-automatic-connections",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/how-to/allow-automatic-connections.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{description:"Authorize specific websites to automatically connect to a Snap.",sidebar_position:5},sidebar:"snapsSidebar",previous:{title:"Restrict RPC API methods",permalink:"/zs/initialconnections-feature/snaps/how-to/restrict-rpc-api"},next:{title:"Test a Snap",permalink:"/zs/initialconnections-feature/snaps/how-to/test-a-snap"}},c={},r=[{value:"Step 1: Add authorized dapps in the Snap manifest&#39;s <code>initialConnections</code>",id:"step-1-add-authorized-dapps-in-the-snap-manifests-initialconnections",level:2},{value:"Step 2: Connect to the Snap from an authorized dapp",id:"step-2-connect-to-the-snap-from-an-authorized-dapp",level:2},{value:"Sample code",id:"sample-code",level:3},{value:"Step 3 (Optional): Testing locally",id:"step-3-optional-testing-locally",level:2},{value:"When is this most useful?",id:"when-is-this-most-useful",level:2},{value:"Snap used by multiple dapps",id:"snap-used-by-multiple-dapps",level:3},{value:"Snap installed from the Snaps Directory",id:"snap-installed-from-the-snaps-directory",level:3},{value:"Snap installed from your companion dapp",id:"snap-installed-from-your-companion-dapp",level:3},{value:"Example",id:"example",level:2}];function p(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"allow-automatic-connections",children:"Allow automatic connections"}),"\n",(0,i.jsxs)(e.h2,{id:"step-1-add-authorized-dapps-in-the-snap-manifests-initialconnections",children:["Step 1: Add authorized dapps in the Snap manifest's ",(0,i.jsx)(e.code,{children:"initialConnections"})]}),"\n",(0,i.jsxs)(e.p,{children:["You can authorize specific dapps or Snaps to automatically connect to your Snap, skipping the need\nfor users to manually confirm a connection when the dapp or Snap calls\n",(0,i.jsx)(e.a,{href:"/zs/initialconnections-feature/snaps/reference/wallet-api-for-snaps#wallet_requestsnaps",children:(0,i.jsx)(e.code,{children:"wallet_requestSnaps"})}),"."]}),"\n",(0,i.jsxs)(e.p,{children:["To do so, add an ",(0,i.jsx)(e.a,{href:"/zs/initialconnections-feature/snaps/reference/permissions#initial-connections",children:(0,i.jsx)(e.code,{children:"initialConnections"})})," field in\nthe Snap manifest file, specifying each website you want to\nallow to automatically connect.\nFor example:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",metastring:'title="snap.manifest.json"',children:'"initialConnections": {\n  "https://voyager-snap.linea.build": {}\n}\n'})}),"\n",(0,i.jsx)(e.admonition,{title:"important",type:"caution",children:(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"initialConnections"})," is not a replacement for ",(0,i.jsx)(e.a,{href:"/zs/initialconnections-feature/snaps/reference/permissions#endowmentrpc",children:(0,i.jsx)(e.code,{children:"endowment:rpc"})}),".\n",(0,i.jsx)(e.code,{children:"endowment:rpc"})," is still required to allow dapps or Snaps to call RPC methods of your Snap."]})}),"\n",(0,i.jsx)(e.h2,{id:"step-2-connect-to-the-snap-from-an-authorized-dapp",children:"Step 2: Connect to the Snap from an authorized dapp"}),"\n",(0,i.jsxs)(e.p,{children:["When a user visits a website specified in ",(0,i.jsx)(e.code,{children:"initialConnections"}),", and the website calls\n",(0,i.jsx)(e.code,{children:"wallet_requestSnaps"}),", if the Snap is already installed, the website connects immediately and can\nmake further calls to the Snap.\nIf the Snap is not installed, the user sees a confirmation to install the Snap."]}),"\n",(0,i.jsxs)(e.p,{children:["Additionally, since the connection between the Snap and a dapp listed in ",(0,i.jsx)(e.code,{children:"initialConnections"}),"\nis automatic, calling ",(0,i.jsx)(e.code,{children:"wallet_getSnaps"})," from an authorized dapp will return the Snap even\nif ",(0,i.jsx)(e.code,{children:"wallet_requestSnaps"})," was never called from the authorized dapp. This makes the flow of\nusing the Snap from an authorized dapp completely seamless."]}),"\n",(0,i.jsx)(e.h3,{id:"sample-code",children:"Sample code"}),"\n",(0,i.jsxs)(e.p,{children:["This sample code, adapted from the ",(0,i.jsx)(e.a,{href:"https://github.com/Consensys/linea-voyager-snap",children:"Linea Voyager Snap"}),"\ncompanion dapp, shows the flow of connecting to a Snap from a dapp authorized with ",(0,i.jsx)(e.code,{children:"initialConnections"}),"."]}),"\n",(0,i.jsxs)(e.p,{children:["While the code is exactly the same as without ",(0,i.jsx)(e.code,{children:"initialConnections"}),", the comments show how the flow is\ndifferent from the perspective of the user."]}),"\n",(0,i.jsxs)(e.p,{children:["The key is that calling ",(0,i.jsx)(e.a,{href:"/zs/initialconnections-feature/snaps/reference/wallet-api-for-snaps#wallet_getsnaps",children:(0,i.jsx)(e.code,{children:"wallet_getSnaps"})})," from\nan authorized dapp when the Snap is already installed will show that Snap even if the Dapp never explicitly\nconnected to it by calling ",(0,i.jsx)(e.a,{href:"/zs/initialconnections-feature/snaps/reference/wallet-api-for-snaps#wallet_requestsnaps",children:(0,i.jsx)(e.code,{children:"wallet_requestSnaps"})})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"const snapId = 'npm:@myorg/mysnap';\n\n// This function will be called when the EIP-6963 process of finding MetaMask is successful\n// Learn more about EIP-6963 at https://docs.metamask.io/wallet/concepts/wallet-interoperability/\nconst MetaMaskFound = async (providerDetail) => {\n  const { provider } = providerDetail;\n\n  // This call will return the tar\n  const snaps = await provider.request({\n    method: 'wallet_getSnaps',\n  });\n\n  if (Object.keys(snaps).includes(snapId)) {\n    // If we're here, the Snap is installed. We're good to go.\n    return;\n  }\n\n  // If we're here, the Snap is not installed. Let's install it.\n  // Since the Snap is not installed, the user will still see a pop-up\n  // confirming that they want to install the Snap.\n  try {\n    const result = await provider.request({\n      method: 'wallet_requestSnaps',\n      params: {\n        [snapId]: {},\n      },\n    });\n\n    // If we're here, then the Snap is installed, and the dapp\n    // is successfully connected to it.\n  } catch (err) {\n    // If we're here, something went wrong. For example, the user\n    // might have declined the Snap install confirmation.\n  }\n};\n"})}),"\n",(0,i.jsx)(e.h2,{id:"step-3-optional-testing-locally",children:"Step 3 (Optional): Testing locally"}),"\n",(0,i.jsx)(e.p,{children:"When testing, you can specify the local site.\nFor example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",metastring:'title="snap.manifest.json" ',children:'"initialConnections": {\n  "http://localhost:8000": {}\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"We recommend removing local sites before deploying your Snap to production."}),"\n",(0,i.jsx)(e.h2,{id:"when-is-this-most-useful",children:"When is this most useful?"}),"\n",(0,i.jsxs)(e.p,{children:["The following scenarios showcase ",(0,i.jsx)(e.code,{children:"initialConnection"}),"'s usefulness, in order from most to least useful:"]}),"\n",(0,i.jsx)(e.h3,{id:"snap-used-by-multiple-dapps",children:"Snap used by multiple dapps"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"You built a Snap that can be used by multiple dapps, for example a protocol Snap."}),"\n",(0,i.jsx)(e.li,{children:"A user installs your Snap while interacting with a dapp that uses it."}),"\n",(0,i.jsx)(e.li,{children:"The user eventually lands on the companion dapp for your Snap."}),"\n",(0,i.jsxs)(e.li,{children:["Your companion dapp is listed in ",(0,i.jsx)(e.code,{children:"initialConnections"}),"."]}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"The user can interact with your companion dapp without having to manually connect the Snap."})}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["For even greater benefit, consider including some of the known dapps that interact with your Snap\nunder ",(0,i.jsx)(e.code,{children:"initialConnections"}),"."]}),"\n",(0,i.jsx)(e.h3,{id:"snap-installed-from-the-snaps-directory",children:"Snap installed from the Snaps Directory"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"You built a Snap that is only really useful for one dapp, its companion dapp."}),"\n",(0,i.jsxs)(e.li,{children:["A user finds your Snap through the ",(0,i.jsx)(e.a,{href:"https://snaps.metamask.io",children:"Snaps Directory"})," and installs it."]}),"\n",(0,i.jsx)(e.li,{children:"The user lands on your companion dapp."}),"\n",(0,i.jsxs)(e.li,{children:["Your companion dapp is listed under ",(0,i.jsx)(e.code,{children:"initialConnections"}),"."]}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"The user can immediately interact with your dapp without having to manually connect the Snap."})}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"snap-installed-from-your-companion-dapp",children:"Snap installed from your companion dapp"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["You built a Snap, and added your companion dapp to ",(0,i.jsx)(e.code,{children:"initialConnections"}),"."]}),"\n",(0,i.jsx)(e.li,{children:"A user discovers your Snap through your companion dapp."}),"\n",(0,i.jsx)(e.li,{children:"The user will need to install the Snap, going through the normal flow."}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsxs)(e.strong,{children:["In this specific case, having added ",(0,i.jsx)(e.code,{children:"initialConnections"})," will not have been useful."]})}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(e.p,{children:["See the ",(0,i.jsx)(e.a,{href:"https://github.com/Consensys/linea-voyager-snap",children:"Linea Voyager Snap"})," for a full example of\nallowing an automatic connection."]})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>l});var i=t(96540);const a={},s=i.createContext(a);function o(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);