"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[3860],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>M});var a=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,M=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(M,s(s({ref:n},p),{},{components:t})):a.createElement(M,s({ref:n},p))}));function M(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=m;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[d]="string"==typeof e?e:o,s[1]=r;for(var c=2;c<i;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},37386:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var a=t(58168),o=(t(96540),t(15680));const i={sidebar_position:1,sidebar_label:"SDK connections",description:"Learn about how a dapp with the SDK installed connects to MetaMask.",tags:["JavaScript SDK","iOS SDK","Android SDK","Unity SDK"]},s="MetaMask SDK connections",r={unversionedId:"concepts/sdk/connections",id:"concepts/sdk/connections",title:"MetaMask SDK connections",description:"Learn about how a dapp with the SDK installed connects to MetaMask.",source:"@site/wallet/concepts/sdk/connections.md",sourceDirName:"concepts/sdk",slug:"/concepts/sdk/connections",permalink:"/code-format/wallet/concepts/sdk/connections",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/wallet/concepts/sdk/connections.md",tags:[{label:"JavaScript SDK",permalink:"/code-format/wallet/tags/java-script-sdk"},{label:"iOS SDK",permalink:"/code-format/wallet/tags/i-os-sdk"},{label:"Android SDK",permalink:"/code-format/wallet/tags/android-sdk"},{label:"Unity SDK",permalink:"/code-format/wallet/tags/unity-sdk"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"SDK connections",description:"Learn about how a dapp with the SDK installed connects to MetaMask.",tags:["JavaScript SDK","iOS SDK","Android SDK","Unity SDK"]},sidebar:"walletSidebar",previous:{title:"About MetaMask SDK",permalink:"/code-format/wallet/concepts/sdk/"},next:{title:"Android SDK architecture",permalink:"/code-format/wallet/concepts/sdk/android"}},l={},c=[{value:"Initial connection flow",id:"initial-connection-flow",level:2},{value:"MetaMask Mobile connection",id:"metamask-mobile-connection",level:2},{value:"Connection status",id:"connection-status",level:2},{value:"Paused connections",id:"paused-connections",level:3},{value:"Cleared connections",id:"cleared-connections",level:3},{value:"Close connections manually",id:"close-connections-manually",level:3}],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,o.yg)(d,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"metamask-sdk-connections"},"MetaMask SDK connections"),(0,o.yg)("p",null,"This page provides details on how a dapp with ",(0,o.yg)("a",{parentName:"p",href:"/code-format/wallet/concepts/sdk/"},"MetaMask SDK")," installed connects to a\nuser's MetaMask wallet."),(0,o.yg)("h2",{id:"initial-connection-flow"},"Initial connection flow"),(0,o.yg)("p",null,"The following flowchart outlines the initial connection flow between a dapp and MetaMask:"),(0,o.yg)("p",{align:"center"},(0,o.yg)("mermaid",{value:"flowchart TD\n    A{{Dapp platform?}}\n    A --\x3e|Desktop| C(Show modal) --\x3e D{{Connect via?}}\n    D --\x3e|Extension| E{{Extension installed?}}\n    E --\x3e|No| F(Chrome store) --\x3e G(Connect via extension)\n    E --\x3e|Yes| G\n    D --\x3e|MM Mobile| H{{MM Mobile installed?}}\n    H --\x3e|Yes| J\n    H --\x3e|No| I(App store) --\x3e J(Connect via MM Mobile)\n    A --\x3e|Mobile| K(Deeplink to MM Mobile) --\x3e H"})),(0,o.yg)("p",null,"The path first depends on whether the dapp is on a desktop or mobile platform:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"If the dapp is on a desktop platform (for example, a desktop web dapp), the dapp shows a modal\nasking the user to select if they want to connect to MetaMask using the browser extension or\nMetaMask Mobile."),(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"If the user selects extension:"),(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"If the extension is not installed, the user is taken to the Chrome extension store to\ninstall it."),(0,o.yg)("li",{parentName:"ul"},"If the extension is installed, the user connects to their MetaMask extension."))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"If the user selects MetaMask Mobile:"),(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"If MetaMask Mobile is not installed, the user is taken to the app store to install it."),(0,o.yg)("li",{parentName:"ul"},"If MetaMask Mobile is installed, ",(0,o.yg)("a",{parentName:"li",href:"#metamask-mobile-connection"},"an encrypted connection from the dapp to MetaMask\nMobile")," is established.")))),(0,o.yg)("admonition",{parentName:"li",type:"note"},(0,o.yg)("p",{parentName:"admonition"},"The choice between the extension and MetaMask Mobile persists until the user or dapp disconnects.\nAt that point, the dapp displays the modal again."))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"If the dapp is on a mobile platform (for example, a mobile web dapp or mobile dapp), the dapp\ndeeplinks to MetaMask Mobile."),(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"If MetaMask Mobile is not installed, the user is taken to the app store to install it."),(0,o.yg)("li",{parentName:"ul"},"If MetaMask Mobile is installed, ",(0,o.yg)("a",{parentName:"li",href:"#metamask-mobile-connection"},"an encrypted connection from the dapp to MetaMask\nMobile")," is established.")))),(0,o.yg)("h2",{id:"metamask-mobile-connection"},"MetaMask Mobile connection"),(0,o.yg)("p",null,"The SDK uses elliptic curve integrated encryption scheme (ECIES) to communicate with MetaMask Mobile.\nThe following sequence diagram outlines how a dapp establishes an encrypted connection with MetaMask Mobile:"),(0,o.yg)("mermaid",{value:"%%{\n  init: {\n    'sequence': {\n      'actorMargin': 100,\n      'width': 250,\n      'noteMargin': 15\n    }\n  }\n}%%\n\nsequenceDiagram\n    autonumber\n    participant Dapp as Dapp (MetaMask SDK)\n    participant Socket as Socket.io server\n    participant MMM as MetaMask Mobile\n\n    Dapp->>Dapp: Generate a Socket.io room ID and ECIES key pair\n    Dapp->>Socket: Connect using Socket.io room ID\n    Dapp->>MMM: Send deeplink containing Socket.io room ID and ECIES public key\n    MMM->>Socket: Connect using Socket.io room ID\n    MMM->>MMM: Generate an ECIES key pair\n    MMM->>Dapp: Send ECIES public key using the Socket.io channel\n\n    note over Dapp, MMM: The dapp and MetaMask Mobile generate a shared secret using their own private key and the other party's public key. All further communication is encrypted and decrypted using the shared secret.\n    loop\n    Dapp->>MMM: Send encrypted message\n    MMM->>Dapp: Send encrypted message\n    end"}),(0,o.yg)("p",null,"The flow is as follows:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"The dapp generates a UUID v4 (",(0,o.yg)("a",{parentName:"li",href:"https://socket.io/"},"Socket.io")," room ID) and ECIES key pair."),(0,o.yg)("li",{parentName:"ol"},"The dapp connects to the Socket.io server using the room ID."),(0,o.yg)("li",{parentName:"ol"},"The dapp sends a deeplink to MetaMask Mobile (either directly, if on mobile, or through a QR\ncode, if on desktop) containing its ECIES public key and the Socket.io room ID."),(0,o.yg)("li",{parentName:"ol"},"MetaMask Mobile opens the QR code or deeplink and connects to the Socket.io server using the room ID."),(0,o.yg)("li",{parentName:"ol"},"MetaMask Mobile generates an ECIES key pair."),(0,o.yg)("li",{parentName:"ol"},"MetaMask Mobile sends its ECIES public key to the dapp using the Socket.io channel, and the two\nparties generate a shared secret."),(0,o.yg)("li",{parentName:"ol"},"The dapp and MetaMask Mobile establish an encrypted connection to send JSON-RPC API methods.")),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"For all platforms except Android, the SDK uses a Socket.io server to help establish the encrypted connection.\nThe ",(0,o.yg)("a",{parentName:"p",href:"/code-format/wallet/concepts/sdk/android"},"Android SDK")," uses direct local communication.")),(0,o.yg)("h2",{id:"connection-status"},"Connection status"),(0,o.yg)("p",null,"The connection between the SDK and MetaMask Mobile can ",(0,o.yg)("a",{parentName:"p",href:"#paused-connections"},"pause")," and\n",(0,o.yg)("a",{parentName:"p",href:"#cleared-connections"},"clear"),".\nYou can also ",(0,o.yg)("a",{parentName:"p",href:"#close-connections-manually"},"close connections manually"),"."),(0,o.yg)("h3",{id:"paused-connections"},"Paused connections"),(0,o.yg)("p",null,"Connections pause after MetaMask Mobile is in background (minimized) for 20 seconds.\nThis is to accommodate OS restrictions."),(0,o.yg)("p",null,"When a connection pauses, all traffic to MetaMask Mobile pauses, and the SDK doesn't produce any\nresponse until the user opens MetaMask Mobile again.\nThe SDK automatically deeplinks to MetaMask Mobile, so connections resume automatically.\nIf MetaMask Mobile is paused and the user completely closes MetaMask Mobile, the connection remains\npaused and resumes when the user opens it again."),(0,o.yg)("p",null,"Because of this, polling data from MetaMask Mobile may not work for long periods of time."),(0,o.yg)("admonition",{title:"known issue",type:"info"},(0,o.yg)("p",{parentName:"admonition"},"When MetaMask Mobile is running in the background, the connection may pause and fail to resume properly when the user reopens MetaMask.\nThe user must return to your dapp so the request is re-sent.\nThe SDK team is working on this issue, and is researching decentralized communication solutions that\nhold state such as ",(0,o.yg)("a",{parentName:"p",href:"https://waku.org/"},"Waku"),".")),(0,o.yg)("h3",{id:"cleared-connections"},"Cleared connections"),(0,o.yg)("p",null,"Connections clear if the user closes or refreshes your dapp, since MetaMask doesn't persist\nconnections on the dapp side.\nThis is for simplicity and security purposes."),(0,o.yg)("p",null,"If the user completely closes MetaMask Mobile without ",(0,o.yg)("a",{parentName:"p",href:"#paused-connections"},"pausing the connection"),"\nfirst, MetaMask infers that the user isn't using the wallet and closes the connection."),(0,o.yg)("h3",{id:"close-connections-manually"},"Close connections manually"),(0,o.yg)("p",null,"To close connections manually from MetaMask Mobile, go to ",(0,o.yg)("strong",{parentName:"p"},"Settings > Experimental"),", and select\n",(0,o.yg)("strong",{parentName:"p"},"Clear MetaMask SDK connections"),"."))}u.isMDXComponent=!0}}]);