"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[1660],{14673:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var c=n(74848),r=n(28453);const a={sidebar_position:2,description:"Learn about the contract factory in Unity.",tags:["Unity SDK"]},o="Contract factory",s={id:"how-to/use-sdk/gaming/unity/smart-contracts/contract-factory",title:"Contract factory",description:"Learn about the contract factory in Unity.",source:"@site/wallet/how-to/use-sdk/gaming/unity/smart-contracts/contract-factory.md",sourceDirName:"how-to/use-sdk/gaming/unity/smart-contracts",slug:"/how-to/use-sdk/gaming/unity/smart-contracts/contract-factory",permalink:"/feat-reference-pages/wallet/how-to/use-sdk/gaming/unity/smart-contracts/contract-factory",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/wallet/how-to/use-sdk/gaming/unity/smart-contracts/contract-factory.md",tags:[{label:"Unity SDK",permalink:"/feat-reference-pages/wallet/tags/unity-sdk"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Learn about the contract factory in Unity.",tags:["Unity SDK"]},sidebar:"walletSidebar",previous:{title:"Contract interface",permalink:"/feat-reference-pages/wallet/how-to/use-sdk/gaming/unity/smart-contracts/contract-interface"},next:{title:"Contract proxy class",permalink:"/feat-reference-pages/wallet/how-to/use-sdk/gaming/unity/smart-contracts/contract-proxy-class"}},i={},d=[{value:"Contract factory types",id:"contract-factory-types",level:2},{value:"Impromptu contract factory",id:"impromptu-contract-factory",level:3},{value:"Backed type contract factory",id:"backed-type-contract-factory",level:3},{value:"Set the contract factory",id:"set-the-contract-factory",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h1,{id:"contract-factory",children:"Contract factory"}),"\n",(0,c.jsxs)(t.p,{children:["When ",(0,c.jsx)(t.a,{href:"/feat-reference-pages/wallet/how-to/use-sdk/gaming/unity/smart-contracts/",children:"interacting with smart contracts in Unity"}),", the contract factory is responsible for\ncreating the ",(0,c.jsx)(t.a,{href:"/feat-reference-pages/wallet/how-to/use-sdk/gaming/unity/smart-contracts/contract-proxy-class",children:"contract proxy class"})," with the given\n",(0,c.jsx)(t.a,{href:"/feat-reference-pages/wallet/how-to/use-sdk/gaming/unity/smart-contracts/contract-interface",children:"contract interface"})," type ",(0,c.jsx)(t.code,{children:"T"}),"."]}),"\n",(0,c.jsx)(t.h2,{id:"contract-factory-types",children:"Contract factory types"}),"\n",(0,c.jsx)(t.h3,{id:"impromptu-contract-factory",children:"Impromptu contract factory"}),"\n",(0,c.jsxs)(t.p,{children:["The impromptu contract factory uses the ",(0,c.jsx)(t.code,{children:"Impromptu"})," library to return a new instance of ",(0,c.jsx)(t.code,{children:"Contract"}),"\nthat behaves likes the given interface type ",(0,c.jsx)(t.code,{children:"T"}),".\nSince the contract is a dynamic object, all method invocations to the returned object of type ",(0,c.jsx)(t.code,{children:"T"}),"\nare automatically routed to the ",(0,c.jsx)(t.code,{children:"Contract"})," class."]}),"\n",(0,c.jsx)(t.admonition,{type:"note",children:(0,c.jsx)(t.p,{children:"The impromptu contract factory is only supported on Mono or in a runtime that has the CLR.\nThe IL2CPP runtime does not support this factory.\nUse the backed type contract factory if you need a more concrete type."})}),"\n",(0,c.jsx)(t.h3,{id:"backed-type-contract-factory",children:"Backed type contract factory"}),"\n",(0,c.jsxs)(t.p,{children:["The backed type contract factory uses a concrete ",(0,c.jsx)(t.code,{children:"class"})," type that inherits the ",(0,c.jsx)(t.code,{children:"Contract"})," class and\nthe given interface type ",(0,c.jsx)(t.code,{children:"T"}),".\nTo use this factory, the given interface must declare the class attribute ",(0,c.jsx)(t.code,{children:"BackedType"}),"\nthat specifies which concrete ",(0,c.jsx)(t.code,{children:"class"})," type must be used when creating a new ",(0,c.jsx)(t.code,{children:"Contract"})," instance.\nThe declared ",(0,c.jsx)(t.code,{children:"class"})," must inherit from the given interface type ",(0,c.jsx)(t.code,{children:"T"}),"."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-csharp",children:'[BackedType(typeof(ERC20Backing))]\npublic interface ERC20 : IContract\n{\n  [EvmMethodInfo(Name = "decimals", View = true)]\n  [return: EvmParameterInfo(Type = "uint8")]\n  Task<BigInteger> Decimals();\n\n  // Define other interface methods.\n}\n'})}),"\n",(0,c.jsxs)(t.p,{children:["Inside the backed ",(0,c.jsx)(t.code,{children:"class"}),", you must override all interface methods and either invoke custom logic or\nuse the ",(0,c.jsx)(t.code,{children:"Contract"})," class to automatically perform the correct logic based on the method data.\nYou can use ",(0,c.jsx)(t.code,{children:"var method = System.Reflection.MethodBase.GetCurrentMethod();"})," to get the current\nmethod being invoked, and then you can use ",(0,c.jsx)(t.code,{children:"base.InvokeMethod(MethodInfo method, object[] args)"})," to\ninvoke the correct logic for the given ",(0,c.jsx)(t.code,{children:"method"})," and ",(0,c.jsx)(t.code,{children:"args"}),"."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-csharp",children:'public class ERC20Backing : Contract, ERC20\n{\n  public string Address\n  {\n    get => base.Address;\n  }\n\n  [EvmMethodInfo(Name = "decimals", View = true)]\n  [return: EvmParameterInfo(Type = "uint8")]\n  public Task<BigInteger> Decimals()\n  {\n    var method = System.Reflection.MethodBase.GetCurrentMethod();\n    return (Task<BigInteger>) InvokeMethod(method, new object[] {  });\n  }\n\n  // Define other interface methods.\n}\n'})}),"\n",(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.a,{href:"/feat-reference-pages/wallet/how-to/use-sdk/gaming/unity/smart-contracts/#generate-contract-code",children:"contract code generator"})," automatically generates a backing\n",(0,c.jsx)(t.code,{children:"class"})," for each contract interface generated."]}),"\n",(0,c.jsxs)(t.p,{children:["This contract factory is useful for when you need more concrete definitions of the contract\ninterface type ",(0,c.jsx)(t.code,{children:"T"}),".\nThis can be useful in runtimes where ",(0,c.jsx)(t.code,{children:"dynamic"})," or ",(0,c.jsx)(t.code,{children:"DynamicObject"})," are not available (IL2CPP)."]}),"\n",(0,c.jsx)(t.h2,{id:"set-the-contract-factory",children:"Set the contract factory"}),"\n",(0,c.jsxs)(t.p,{children:["To set the current contract factory, you can use ",(0,c.jsx)(t.code,{children:"Contract.ContractFactory"}),":"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-csharp",children:"Contract.ContractFactory = new BackedTypeContractFactory();\n"})}),"\n",(0,c.jsx)(t.p,{children:"You don't need to do this, unless you create a custom contract factory.\nWe recommend just using the default contract factories for each runtime:"}),"\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsxs)(t.li,{children:["Mono runtime - ",(0,c.jsx)(t.a,{href:"#impromptu-contract-factory",children:"Impromptu contract factory"})]}),"\n",(0,c.jsxs)(t.li,{children:["IL2CPP runtime - ",(0,c.jsx)(t.a,{href:"#backed-type-contract-factory",children:"Backed typed contract factory"})]}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var c=n(96540);const r={},a=c.createContext(r);function o(e){const t=c.useContext(a);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),c.createElement(a.Provider,{value:t},e.children)}}}]);