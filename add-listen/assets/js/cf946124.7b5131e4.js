"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[5246],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var a=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=o,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||r;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},10665:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(58168),o=(n(96540),n(15680));const r={description:"Create a single component React dapp with local state.",toc_max_heading_level:4,sidebar_position:1},i="Create a React dapp with local state",s={unversionedId:"tutorials/react-dapp-local-state",id:"tutorials/react-dapp-local-state",title:"Create a React dapp with local state",description:"Create a single component React dapp with local state.",source:"@site/wallet/tutorials/react-dapp-local-state.md",sourceDirName:"tutorials",slug:"/tutorials/react-dapp-local-state",permalink:"/add-listen/wallet/tutorials/react-dapp-local-state",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/wallet/tutorials/react-dapp-local-state.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Create a single component React dapp with local state.",toc_max_heading_level:4,sidebar_position:1},sidebar:"walletSidebar",previous:{title:"Tutorials",permalink:"/add-listen/wallet/tutorials"},next:{title:"Create a React dapp with global state",permalink:"/add-listen/wallet/tutorials/react-dapp-global-state"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"1. Set up the project",id:"1-set-up-the-project",level:3},{value:"2. Detect MetaMask",id:"2-detect-metamask",level:3},{value:"Use <code>@metamask/detect-provider</code>",id:"use-metamaskdetect-provider",level:4},{value:"3. Connect to MetaMask",id:"3-connect-to-metamask",level:3},{value:"4. Handle state change",id:"4-handle-state-change",level:3},{value:"5. Manage more MetaMask state",id:"5-manage-more-metamask-state",level:3},{value:"Watch user balance and chain",id:"watch-user-balance-and-chain",level:4},{value:"6. Handle errors",id:"6-handle-errors",level:3},{value:"Conclusion",id:"conclusion",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...r}=e;return(0,o.yg)(d,(0,a.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"create-a-react-dapp-with-local-state"},"Create a React dapp with local state"),(0,o.yg)("p",null,"This tutorial walks you through integrating a simple React dapp with MetaMask.\nThe dapp has a single component, so only requires managing local state.\nYou'll use the ",(0,o.yg)("a",{parentName:"p",href:"https://v3.vitejs.dev/guide"},"Vite")," build tool with React and TypeScript to create\nthe dapp."),(0,o.yg)("p",null,"This tutorial builds up your knowledge of working with MetaMask incrementally; this means you won't\nimplement the best solution at first, but you'll experiment with the MetaMask API and continually\nwork towards better solutions."),(0,o.yg)("admonition",{title:"Why React?",type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"React is familiar to most web developers, and it makes it easy to work with state management and\nbuild with components that need updating.")),(0,o.yg)("admonition",{title:"Project source code",type:"info"},(0,o.yg)("p",{parentName:"admonition"},"You can see the source code for the\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/MetaMask/react-dapp-tutorial/tree/local-state-start"},"starting point")," and\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/MetaMask/react-dapp-tutorial/tree/local-state-final"},"final state")," of this dapp.")),(0,o.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://nodejs.org/"},"Node.js")," version 18+"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"},"npm")," version 9+"),(0,o.yg)("li",{parentName:"ul"},"A text editor (for example, ",(0,o.yg)("a",{parentName:"li",href:"https://code.visualstudio.com/"},"VS Code"),")"),(0,o.yg)("li",{parentName:"ul"},"The ",(0,o.yg)("a",{parentName:"li",href:"https://metamask.io/download"},"MetaMask extension")," installed"),(0,o.yg)("li",{parentName:"ul"},"Basic knowledge of JavaScript and React")),(0,o.yg)("h2",{id:"steps"},"Steps"),(0,o.yg)("h3",{id:"1-set-up-the-project"},"1. Set up the project"),(0,o.yg)("p",null,"Set up a new project using Vite, React, and TypeScript, by running the following command:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"npm create vite@latest mm-dapp-react -- --template react-ts\n")),(0,o.yg)("p",null,"Install the node module dependencies:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"cd mm-dapp-react && npm install\n")),(0,o.yg)("p",null,"Launch the development server:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,o.yg)("p",null,"This displays a ",(0,o.yg)("inlineCode",{parentName:"p"},"localhost")," URL on your terminal. Copy this URL into your browser and open it."),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"You can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"npx vite")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"npm run dev")," command to run your project at any time if the\ndevelopment server has been stopped.")),(0,o.yg)("p",null,"Open the project in a text editor.\nTo start with a blank slate, replace the code in ",(0,o.yg)("inlineCode",{parentName:"p"},"src/App.tsx")," with the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import "./App.css";\n\nconst App = () => {\n  return (\n    <div className="App">\n      <button>Connect MetaMask</button>\n    </div>\n  );\n};\n\nexport default App;\n')),(0,o.yg)("p",null,"You'll need to get around type-checking by defining the ",(0,o.yg)("inlineCode",{parentName:"p"},"window.ethereum")," object as ",(0,o.yg)("inlineCode",{parentName:"p"},"any"),".\nUpdate ",(0,o.yg)("inlineCode",{parentName:"p"},"src/vite-env.d.ts")," to the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="vite-env.d.ts"',title:'"vite-env.d.ts"'},'/// <reference types="vite/client" />\n\ninterface Window {\n  ethereum: any;\n}\n')),(0,o.yg)("p",null,"Also, update ",(0,o.yg)("inlineCode",{parentName:"p"},"src/App.css")," to the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-css",metastring:'title="App.css"',title:'"App.css"'},".App {\n  display: flex;\n  flex-direction: column;\n  place-items: center;\n  min-width: 100vw;\n  min-height: 100vh;\n}\nbutton {\n  margin-top: 0.5em;\n}\n")),(0,o.yg)("p",null,"At this point, you have a working React app with some basic styling and a button that you'll use to\nconnect to MetaMask."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Initial App State with Button",src:n(89409).A,width:"1516",height:"1280"})),(0,o.yg)("h3",{id:"2-detect-metamask"},"2. Detect MetaMask"),(0,o.yg)("p",null,"Next, detect the injected provider that browser extension wallets use. MetaMask injects a JavaScript Ethereum provider into the browser at ",(0,o.yg)("inlineCode",{parentName:"p"},"window.ethereum"),". You will use this provider in your dapp to request user information from Metamask."),(0,o.yg)("p",null,"Add code to conditionally render a ",(0,o.yg)("strong",{parentName:"p"},"Connect MetaMask")," button in your component by updating\n",(0,o.yg)("inlineCode",{parentName:"p"},"src/App.tsx")," to the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import "./App.css";\nlet injectedProvider = false;\n\nif (typeof window.ethereum !== "undefined") {\n  injectedProvider = true;\n  console.log(window.ethereum);\n}\n\nconst isMetaMask = injectedProvider ? window.ethereum.isMetaMask : false;\n\nconst App = () => {\n  return (\n    <div className="App">\n      <h2>\n        Injected Provider {injectedProvider ? "DOES" : "DOES NOT"} Exist\n      </h2>\n      {isMetaMask && <button>Connect MetaMask</button>}\n    </div>\n  );\n};\n\nexport default App;\n')),(0,o.yg)("p",null,"If you don't have the ",(0,o.yg)("a",{parentName:"p",href:"https://metamask.io/download/"},"MetaMask browser extension")," installed or\nenabled, you won't see a ",(0,o.yg)("strong",{parentName:"p"},"Connect MetaMask")," button, and the text displays\n",(0,o.yg)("strong",{parentName:"p"},"Injected Provider DOES NOT Exist"),"."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Injected Provider DOES NOT Exist",src:n(58826).A,width:"1516",height:"1280"})),(0,o.yg)("p",null,"If you have the extension installed and enabled, you'll see the ",(0,o.yg)("strong",{parentName:"p"},"Connect MetaMask")," button and the\ntext displays ",(0,o.yg)("strong",{parentName:"p"},"Injected Provider DOES Exist"),"."),(0,o.yg)("p",null,"You'll also see the ",(0,o.yg)("inlineCode",{parentName:"p"},"ethereum")," provider printed to the console."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Injected Provider DOES Exist",src:n(14035).A,width:"1516",height:"1280"})),(0,o.yg)("p",null,"You can switch between these two states by enabling or disabling the MetaMask extension through your browser's ",(0,o.yg)("strong",{parentName:"p"},"Manage Extensions")," menu."),(0,o.yg)("h4",{id:"use-metamaskdetect-provider"},"Use ",(0,o.yg)("inlineCode",{parentName:"h4"},"@metamask/detect-provider")),(0,o.yg)("p",null,"Developers often use the previous approach when tasked with detecting an injected provider (wallet extension)."),(0,o.yg)("p",null,"However, MetaMask provides the\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/MetaMask/detect-provider"},"@metamask/detect-provider")," module to detect the\nMetaMask Ethereum provider or any provider injected at ",(0,o.yg)("inlineCode",{parentName:"p"},"window.ethereum")," on any platform or browser."),(0,o.yg)("p",null,"We recommend ",(0,o.yg)("a",{parentName:"p",href:"/add-listen/wallet/how-to/connect/detect-metamask"},"using ",(0,o.yg)("inlineCode",{parentName:"a"},"@metamask/detect-provider")),"\ninstead of manually detecting the provider yourself."),(0,o.yg)("p",null,"In your project directory (the ",(0,o.yg)("inlineCode",{parentName:"p"},"mm-dapp-react")," directory), install the module using the following command:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"npm install @metamask/detect-provider\n")),(0,o.yg)("p",null,"Update ",(0,o.yg)("inlineCode",{parentName:"p"},"src/App.tsx")," to the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import "./App.css";\nimport { useState, useEffect } from "react";\nimport detectEthereumProvider from "@metamask/detect-provider";\n\nconst App = () => {\n  const [hasProvider, setHasProvider] = useState<boolean | null>(null);\n\n  useEffect(() => {\n    const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true });\n      console.log(provider);\n      // Transform provider to true or false.\n      setHasProvider(Boolean(provider));\n    };\n\n    getProvider();\n  }, []);\n\n  return (\n    <div className="App">\n      <div>\n        Injected Provider {hasProvider ? "DOES" : "DOES NOT"} Exist\n      </div>\n      {hasProvider && <button>Connect MetaMask</button>}\n    </div>\n  );\n};\n\nexport default App;\n')),(0,o.yg)("p",null,"This code creates a piece of local state called ",(0,o.yg)("inlineCode",{parentName:"p"},"hasProvider")," of type ",(0,o.yg)("inlineCode",{parentName:"p"},"boolean")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"null")," value,\ninitialized with a ",(0,o.yg)("inlineCode",{parentName:"p"},"null")," value."),(0,o.yg)("p",null,"Next, it creates a ",(0,o.yg)("inlineCode",{parentName:"p"},"useEffect")," with zero dependencies (it only runs once in your component lifecycle).\nReact's ",(0,o.yg)("inlineCode",{parentName:"p"},"useEffect")," hook allows components to run code when a component is mounted or when some\nproperty's state changes.\nThis hook also allows cleaning up when the component is unmounted."),(0,o.yg)("p",null,"If you explicitly declare no dependencies by passing in an empty array, then ",(0,o.yg)("inlineCode",{parentName:"p"},"useEffect")," only runs\nonce before the component mounts."),(0,o.yg)("p",null,"Inside ",(0,o.yg)("inlineCode",{parentName:"p"},"useEffect"),", there's an ",(0,o.yg)("inlineCode",{parentName:"p"},"async")," function called ",(0,o.yg)("inlineCode",{parentName:"p"},"getProvider"),".\nThis function awaits the ",(0,o.yg)("inlineCode",{parentName:"p"},"detectEthereumProvider")," and uses an option (",(0,o.yg)("inlineCode",{parentName:"p"},"silent: true"),") to silence any\nconsole errors related to the provider not being available.\nYou can choose not to use that option if you prefer."),(0,o.yg)("p",null,"The setter function within ",(0,o.yg)("inlineCode",{parentName:"p"},"useEffect")," transforms the provider's detection to a ",(0,o.yg)("inlineCode",{parentName:"p"},"boolean")," value."),(0,o.yg)("p",null,"If you run the code now, you'll see the same result in your dapp, but you're using\n",(0,o.yg)("inlineCode",{parentName:"p"},"@metamask/detect-provider")," instead of your own code."),(0,o.yg)("h3",{id:"3-connect-to-metamask"},"3. Connect to MetaMask"),(0,o.yg)("p",null,"To connect your dapp to MetaMask, you'll create another ",(0,o.yg)("inlineCode",{parentName:"p"},"useState")," named ",(0,o.yg)("inlineCode",{parentName:"p"},"wallet"),", which keeps your\ndapp up to date with various MetaMask wallet properties such as ",(0,o.yg)("inlineCode",{parentName:"p"},"accounts"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"balance"),", and ",(0,o.yg)("inlineCode",{parentName:"p"},"chainId"),".\nThese are essential properties to sync with your dapp constantly."),(0,o.yg)("p",null,"You'll first add a state for ",(0,o.yg)("inlineCode",{parentName:"p"},"accounts")," and slowly build up your state over the following few\ntutorial sections."),(0,o.yg)("p",null,"You'll also set up a button to connect to the MetaMask wallet."),(0,o.yg)("p",null,"Update the ",(0,o.yg)("inlineCode",{parentName:"p"},"src/App.tsx")," to the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx" {7-8,19-21,23-28,36-38,40-42} showLineNumbers',title:'"App.tsx"',"{7-8,19-21,23-28,36-38,40-42}":!0,showLineNumbers:!0},'import "./App.css";\nimport { useState, useEffect } from "react";\nimport detectEthereumProvider from "@metamask/detect-provider";\n\nconst App = () => {\n  const [hasProvider, setHasProvider] = useState<boolean | null>(null);\n  const initialState = { accounts: [] };              /* New */\n  const [wallet, setWallet] = useState(initialState); /* New */\n\n  useEffect(() => {\n    const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true });\n      setHasProvider(Boolean(provider));\n    };\n\n    getProvider();\n  }, []);\n\n  const updateWallet = async (accounts: any) => {     /* New */\n    setWallet({ accounts });                          /* New */\n  };                                                  /* New */\n\n  const handleConnect = async () => {                 /* New */\n    let accounts = await window.ethereum.request({    /* New */\n      method: "eth_requestAccounts",                  /* New */\n    });                                               /* New */\n    updateWallet(accounts);                           /* New */\n  };                                                  /* New */\n\n  return (\n    <div className="App">\n      <div>\n        Injected Provider {hasProvider ? "DOES" : "DOES NOT"} Exist\n      </div>\n\n      {hasProvider && (                              /* Updated */\n        <button onClick={handleConnect}>Connect MetaMask</button>\n      )}\n\n      {wallet.accounts.length > 0 && (                /* New */\n        <div>Wallet Accounts: {wallet.accounts[0]}</div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n')),(0,o.yg)("p",null,"The comments in the code snippet indicate any new or updated lines of code.\nThe changes include:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("strong",{parentName:"p"},"Lines 7-8:")," Create an object representing the initial empty state and a new ",(0,o.yg)("inlineCode",{parentName:"p"},"useState")," hook to\nreflect your MetaMask wallet state.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("strong",{parentName:"p"},"Lines 19-21:")," Add an ",(0,o.yg)("inlineCode",{parentName:"p"},"updateWallet")," function that sets your new wallet state when you connect.\nThis will also be called when you add code later that refreshes our wallet state.\nThis function will be helpful as you start syncing the ",(0,o.yg)("inlineCode",{parentName:"p"},"balance")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"chainId"),".")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("strong",{parentName:"p"},"Lines 23-28:")," Add a ",(0,o.yg)("inlineCode",{parentName:"p"},"handleConnect")," function that the UI calls to connect to MetaMask using\n",(0,o.yg)("inlineCode",{parentName:"p"},"window.ethereum.request")," and the ",(0,o.yg)("inlineCode",{parentName:"p"},"eth_requestAccounts")," RPC method.\nYour dapp stores the result from this RPC call in a variable named ",(0,o.yg)("inlineCode",{parentName:"p"},"accounts")," and passes it to\nthe ",(0,o.yg)("inlineCode",{parentName:"p"},"updateWallet")," function.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("strong",{parentName:"p"},"Lines 36-38:")," On click, the ",(0,o.yg)("strong",{parentName:"p"},"Connect MetaMask")," button calls ",(0,o.yg)("inlineCode",{parentName:"p"},"handleConnect"),", from which an RPC\ncall of ",(0,o.yg)("inlineCode",{parentName:"p"},"eth_requestAccounts")," is awaited, and the user is prompted to connect to MetaMask:"),(0,o.yg)("p",{parentName:"li"},(0,o.yg)("img",{alt:"Choose which MetaMask connects",src:n(59164).A,width:"1516",height:"1280"})),(0,o.yg)("p",{parentName:"li"},(0,o.yg)("img",{alt:"Grant permissions over MetaMask",src:n(42053).A,width:"1516",height:"1280"}))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("strong",{parentName:"p"},"Lines 40-42:")," Once connected, you'll see your account address displayed in your dapp:"),(0,o.yg)("p",{parentName:"li"},(0,o.yg)("img",{alt:"MetaMask Account Address",src:n(71694).A,width:"1516",height:"1280"})))),(0,o.yg)("h3",{id:"4-handle-state-change"},"4. Handle state change"),(0,o.yg)("p",null,"With the current code, your dapp loses the account data if you refresh the page.\nWhen you connect using the button, the dapp sets ",(0,o.yg)("inlineCode",{parentName:"p"},"accounts")," in its state, but in the case of a\nbrowser refresh, you need something in ",(0,o.yg)("inlineCode",{parentName:"p"},"useEffect")," to check if you've already connected and update\nthe wallet state."),(0,o.yg)("p",null,"Thinking ahead, once you track more than just ",(0,o.yg)("inlineCode",{parentName:"p"},"accounts"),", you also need a mechanism to get the\n",(0,o.yg)("inlineCode",{parentName:"p"},"balance")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"chainId")," and update their state."),(0,o.yg)("p",null,"Update ",(0,o.yg)("inlineCode",{parentName:"p"},"src/App.tsx")," with some added logic to ",(0,o.yg)("inlineCode",{parentName:"p"},"useEffect"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx" {11-18,24-33,37-39,59-60} showLineNumbers',title:'"App.tsx"',"{11-18,24-33,37-39,59-60}":!0,showLineNumbers:!0},'import "./App.css";\nimport { useState, useEffect } from "react";\nimport detectEthereumProvider from "@metamask/detect-provider";\n\nconst App = () => {\n  const [hasProvider, setHasProvider] = useState<boolean | null>(null);\n  const initialState = { accounts: [] };\n  const [wallet, setWallet] = useState(initialState);\n\n  useEffect(() => {\n    const refreshAccounts = (accounts: any) => {         /* New */\n      if (accounts.length > 0) {                         /* New */\n        updateWallet(accounts);                          /* New */\n      } else {                                           /* New */\n        // If length 0, user is disconnected.            /* New */\n        setWallet(initialState);                         /* New */\n      }                                                  /* New */\n    };                                                   /* New */\n\n    const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true });\n      setHasProvider(Boolean(provider));\n\n      if (provider) {                                    /* New */\n        const accounts = await window.ethereum.request(  /* New */\n          { method: "eth_accounts" }                     /* New */\n        );                                               /* New */\n        refreshAccounts(accounts);                       /* New */\n        window.ethereum.on(                              /* New */\n          "accountsChanged",                             /* New */\n          refreshAccounts                                /* New */\n        );                                               /* New */\n      }                                                  /* New */\n    };\n\n    getProvider();\n    return () => {                                       /* New */\n      window.ethereum?.removeListener("accountsChanged", refreshAccounts);\n    };                                                   /* New */\n  }, []);\n\n  const updateWallet = async (accounts: any) => {\n    setWallet({ accounts });\n  };\n\n  const handleConnect = async () => {\n    let accounts = await window.ethereum.request({\n      method: "eth_requestAccounts",\n    });\n    updateWallet(accounts);\n  };\n\n  return (\n    <div className="App">\n      <div>\n        Injected Provider {hasProvider ? "DOES" : "DOES NOT"} Exist\n      </div>\n\n      {window.ethereum?.isMetaMask &&                  /* Updated */\n        wallet.accounts.length < 1 && (                       \n          <button onClick={handleConnect}>Connect MetaMask</button>\n        )}\n\n      {wallet.accounts.length > 0 && (\n        <div>Wallet Accounts: {wallet.accounts[0]}</div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n')),(0,o.yg)("p",null,"Note that ",(0,o.yg)("inlineCode",{parentName:"p"},"useEffect")," is a side effect; you use the hooks for fetching data, reading and writing to\nlocal storage, and setting up event listeners or subscriptions."),(0,o.yg)("p",null,"The side effect occurs on the first render only since you have nothing in your dependency array.\nYou also need to clean up those listeners upon unmount of your component."),(0,o.yg)("p",null,"You can now test your dapp and see that when you refresh the page, you retain the display of the\nuser's address. You can also disable the Metamask browser extension, enable it again, and reconnect to it. You will see that the React dapp has retained the user address."),(0,o.yg)("p",null,"You've synced with a source outside your dapp and managed the state in a single component."),(0,o.yg)("admonition",{title:"Connection summary",type:"info"},(0,o.yg)("p",{parentName:"admonition"},"In learning how to connect to MetaMask from a React application, you've learned how to track some\nessential state of your wallet, precisely, which account is selected and active in the MetaMask wallet."),(0,o.yg)("p",{parentName:"admonition"},"Your dapp syncs this state locally using React's ",(0,o.yg)("inlineCode",{parentName:"p"},"useState")," and the React ",(0,o.yg)("inlineCode",{parentName:"p"},"useEffect")," hooks.\nThe dapp ensures that if a user manually disconnects or changes the account, or refreshes the page,\nthe component is aware of any state change.")),(0,o.yg)("h3",{id:"5-manage-more-metamask-state"},"5. Manage more MetaMask state"),(0,o.yg)("p",null,"Next, you'll add ",(0,o.yg)("inlineCode",{parentName:"p"},"balance")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"chainId")," to your state."),(0,o.yg)("p",null,"Before editing ",(0,o.yg)("inlineCode",{parentName:"p"},"src/App.tsx"),", you need a few utility functions to format ",(0,o.yg)("inlineCode",{parentName:"p"},"balance")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"chainId"),".\nCreate a new file at ",(0,o.yg)("inlineCode",{parentName:"p"},"src/utils/index.tsx")," with the following code:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="index.tsx"',title:'"index.tsx"'},"export const formatBalance = (rawBalance: string) => {\n  const balance = (parseInt(rawBalance) / 1000000000000000000).toFixed(2);\n  return balance;\n};\n\nexport const formatChainAsNum = (chainIdHex: string) => {\n  const chainIdNum = parseInt(chainIdHex);\n  return chainIdNum;\n};\n")),(0,o.yg)("p",null,"With those functions exported, you can import them into your component and use them to get\nhuman-readable balance and chain information."),(0,o.yg)("h4",{id:"watch-user-balance-and-chain"},"Watch user balance and chain"),(0,o.yg)("p",null,"To display the connected address's balance and the current chain ID, you need to update the\n",(0,o.yg)("inlineCode",{parentName:"p"},"initialState")," object in your component."),(0,o.yg)("p",null,"Since your dapp already uses ",(0,o.yg)("inlineCode",{parentName:"p"},"eth_requestAccounts")," to determine the accounts, you need to add a\ndependent call to ",(0,o.yg)("inlineCode",{parentName:"p"},"eth_getBalance")," once you have that account information."),(0,o.yg)("p",null,"Finally, you need to parse the returned value of the balance and format it into a human-readable string.\nYou'll also create a function called ",(0,o.yg)("inlineCode",{parentName:"p"},"formatBalance"),"."),(0,o.yg)("p",null,"Update ",(0,o.yg)("inlineCode",{parentName:"p"},"src/App.tsx")," to the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx" {3,8,21-23,35,43,48-55,74,76-79} showLineNumbers',title:'"App.tsx"',"{3,8,21-23,35,43,48-55,74,76-79}":!0,showLineNumbers:!0},'import "./App.css";\nimport { useState, useEffect } from "react";\nimport { formatBalance, formatChainAsNum } from "./utils";            /* New */\nimport detectEthereumProvider from "@metamask/detect-provider";\n\nconst App = () => {\n  const [hasProvider, setHasProvider] = useState<boolean | null>(null);\n  const initialState = { accounts: [], balance: "", chainId: "", }; /* Updated */\n  const [wallet, setWallet] = useState(initialState);\n\n  useEffect(() => {\n    const refreshAccounts = (accounts: any) => {\n      if (accounts.length > 0) {\n        updateWallet(accounts);\n      } else {\n        // If length 0, user is disconnected.\n        setWallet(initialState);\n      }\n    };\n\n    const refreshChain = (chainId: any) => {                          /* New */\n      setWallet((wallet) => ({ ...wallet, chainId }));                /* New */\n    };                                                                /* New */\n\n    const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true });\n      setHasProvider(Boolean(provider));\n\n      if (provider) {\n        const accounts = await window.ethereum.request({\n          method: "eth_accounts",\n        });\n        refreshAccounts(accounts);\n        window.ethereum.on("accountsChanged", refreshAccounts);\n        window.ethereum.on("chainChanged", refreshChain);            /* New */\n      }\n    };\n\n    getProvider();\n\n    return () => {\n      window.ethereum?.removeListener("accountsChanged", refreshAccounts);\n      window.ethereum?.removeListener("chainChanged", refreshChain); /* New */\n    };\n  }, []);\n\n  const updateWallet = async (accounts: any) => {\n    const balance = formatBalance(await window.ethereum!.request({   /* New */\n      method: "eth_getBalance",                                      /* New */\n      params: [accounts[0], "latest"],                               /* New */\n    }));                                                             /* New */\n    const chainId = await window.ethereum!.request({                 /* New */\n      method: "eth_chainId",                                         /* New */\n    });                                                              /* New */\n    setWallet({ accounts, balance, chainId });                     /* Updated */\n  };\n\n  const handleConnect = async () => {\n    let accounts = await window.ethereum.request({\n      method: "eth_requestAccounts",\n    });\n    updateWallet(accounts);\n  };\n\n  return (\n    <div className="App">\n      <div>Injected Provider {hasProvider ? "DOES" : "DOES NOT"} Exist</div>\n\n      {window.ethereum?.isMetaMask && wallet.accounts.length < 1 && (\n        <button onClick={handleConnect}>Connect MetaMask</button>\n      )}\n\n      {wallet.accounts.length > 0 && (\n        <>                                                               {/* New */}\n          <div>Wallet Accounts: {wallet.accounts[0]}</div>\n          <div>Wallet Balance: {wallet.balance}</div>                    {/* New */}\n          <div>Hex ChainId: {wallet.chainId}</div>                       {/* New */}\n          <div>Numeric ChainId: {formatChainAsNum(wallet.chainId)}</div> {/* New */}                                            {/* New */}\n        </>                                                              {/* New */}\n      )}\n    </div>\n  );\n};\n\nexport default App;\n')),(0,o.yg)("p",null,"The changes here are minimal because you only need to update or duplicate existing functionality and\nadd a few utility functions."),(0,o.yg)("p",null,"Your dapp now displays ",(0,o.yg)("inlineCode",{parentName:"p"},"account"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"balance"),", and ",(0,o.yg)("inlineCode",{parentName:"p"},"chainId"),". The ",(0,o.yg)("inlineCode",{parentName:"p"},"chainId")," is represented in both hex and decimal formats. The values on your display reflect your MetaMask wallet contents and may not be the same as in the following example."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"MetaMask address, balance, and chain",src:n(17271).A,width:"1516",height:"1280"})),(0,o.yg)("p",null,"Your dapp detects any changes to ",(0,o.yg)("inlineCode",{parentName:"p"},"balance")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"chainId"),". For the ",(0,o.yg)("inlineCode",{parentName:"p"},"chainId"),", the utility functions convert the hex strings into a human-readable decimal value for display."),(0,o.yg)("p",null,"For chain IDs, you use the hex version in RPC calls and the decimal version for display.\nTo get the human-readable number of the chain, you use ",(0,o.yg)("inlineCode",{parentName:"p"},"parseInt"),"."),(0,o.yg)("admonition",{title:"important",type:"caution"},(0,o.yg)("p",{parentName:"admonition"},"For this tutorial, your dapp only needs to display information about your wallet.\nFor a real web3 dapp, you might add more functionality for switching chains programmatically or\ninitiating transactions."),(0,o.yg)("p",{parentName:"admonition"},"You might need to:"),(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},"Have a list of chain IDs that your dapp supports."),(0,o.yg)("li",{parentName:"ul"},"Create UI that shows information on the supported networks."),(0,o.yg)("li",{parentName:"ul"},"Present a button that allows users to connect to a supported network.")),(0,o.yg)("p",{parentName:"admonition"},(0,o.yg)("a",{parentName:"p",href:"/add-listen/wallet/how-to/manage-networks/detect-network"},"Detecting a user's network")," is crucial in almost every web3 dapp.")),(0,o.yg)("h3",{id:"6-handle-errors"},"6. Handle errors"),(0,o.yg)("p",null,"Now that you have a working dapp, you should set up error handling.\nYou can approach this in several ways; the following is a basic suggestion for handling an error or\nrejection when the user connects their wallet using the ",(0,o.yg)("inlineCode",{parentName:"p"},"handleConnect")," function."),(0,o.yg)("p",null,"You'll add ",(0,o.yg)("inlineCode",{parentName:"p"},"useState")," to track ",(0,o.yg)("inlineCode",{parentName:"p"},"isConnecting"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"error"),", and ",(0,o.yg)("inlineCode",{parentName:"p"},"errorMessage"),"."),(0,o.yg)("p",null,"When a user is in the middle of connecting, you'll disable the ",(0,o.yg)("strong",{parentName:"p"},"Connect MetaMask")," button.\nIf you receive an error, you'll update ",(0,o.yg)("inlineCode",{parentName:"p"},"error")," to ",(0,o.yg)("inlineCode",{parentName:"p"},"true")," and set the ",(0,o.yg)("inlineCode",{parentName:"p"},"errorMessage")," for display.\nYou'll also set ",(0,o.yg)("inlineCode",{parentName:"p"},"isConnecting")," back to ",(0,o.yg)("inlineCode",{parentName:"p"},"false")," once either the user has connected or you've caught\nthe error, and set ",(0,o.yg)("inlineCode",{parentName:"p"},"error")," back to ",(0,o.yg)("inlineCode",{parentName:"p"},"false")," once the message is resolved."),(0,o.yg)("p",null,"Update ",(0,o.yg)("inlineCode",{parentName:"p"},"src/App.tsx")," to the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx" {11-13,62-64,67-75,84,96-100} showLineNumbers',title:'"App.tsx"',"{11-13,62-64,67-75,84,96-100}":!0,showLineNumbers:!0},'import "./App.css";\nimport { useState, useEffect } from "react";\nimport { formatBalance, formatChainAsNum } from "./utils";\nimport detectEthereumProvider from "@metamask/detect-provider";\n\nconst App = () => {\n  const [hasProvider, setHasProvider] = useState<boolean | null>(null);\n  const initialState = { accounts: [], balance: "", chainId: "" };\n  const [wallet, setWallet] = useState(initialState);\n\n  const [isConnecting, setIsConnecting] = useState(false);  /* New */\n  const [error, setError] = useState(false);                /* New */\n  const [errorMessage, setErrorMessage] = useState("");     /* New */\n\n  useEffect(() => {\n    const refreshAccounts = (accounts: any) => {\n      if (accounts.length > 0) {\n        updateWallet(accounts);\n      } else {\n        // If length 0, user is disconnected.\n        setWallet(initialState);\n      }\n    };\n\n    const refreshChain = (chainId: any) => {\n      setWallet((wallet) => ({ ...wallet, chainId }));\n    };\n\n    const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true });\n      setHasProvider(Boolean(provider));\n\n      if (provider) {\n        const accounts = await window.ethereum.request({method: "eth_accounts"});\n        refreshAccounts(accounts);\n        window.ethereum.on("accountsChanged", refreshAccounts);\n        window.ethereum.on("chainChanged", refreshChain);\n      }\n    };\n\n    getProvider();\n\n    return () => {\n      window.ethereum?.removeListener("accountsChanged", refreshAccounts);\n      window.ethereum?.removeListener("chainChanged", refreshChain);\n    };\n  }, []);\n\n  const updateWallet = async (accounts: any) => {\n    const balance = formatBalance(\n      await window.ethereum!.request({\n        method: "eth_getBalance",\n        params: [accounts[0], "latest"],\n      })\n    );\n    const chainId = await window.ethereum!.request({\n      method: "eth_chainId",\n    });\n    setWallet({ accounts, balance, chainId });\n  };\n\n  const handleConnect = async () => {                    /* Updated */\n    setIsConnecting(true);                                 /* New */\n    await window.ethereum.request({                      /* Updated */\n        method: "eth_requestAccounts",\n      })\n      .then((accounts: []) => {                           /* New */\n        setError(false);                                  /* New */\n        updateWallet(accounts);                           /* New */\n      })                                                  /* New */\n      .catch((err: any) => {                              /* New */\n        setError(true);                                   /* New */\n        setErrorMessage(err.message);                     /* New */\n      });                                                 /* New */\n    setIsConnecting(false);                               /* New */\n  };\n\n  const disableConnect = Boolean(wallet) && isConnecting;\n\n  return (\n    <div className="App">\n      <div>Injected Provider {hasProvider ? "DOES" : "DOES NOT"} Exist</div>\n\n      {window.ethereum?.isMetaMask && wallet.accounts.length < 1 && (  /* Updated */\n        <button disabled={disableConnect} onClick={handleConnect}>Connect MetaMask</button>\n      )}\n\n      {wallet.accounts.length > 0 && (\n        <>\n          <div>Wallet Accounts: {wallet.accounts[0]}</div>\n          <div>Wallet Balance: {wallet.balance}</div>\n          <div>Hex ChainId: {wallet.chainId}</div>\n          <div>Numeric ChainId: {formatChainAsNum(wallet.chainId)}</div>\n        </>\n      )}\n      {error && (  /* New code block */\n        <div onClick={() => setError(false)}>\n          <strong>Error:</strong> {errorMessage}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n')),(0,o.yg)("p",null,"To test the error handling, disconnect from your accounts in MetaMask:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Disconnect from selected Account",src:n(97360).A,width:"1516",height:"1280"})),(0,o.yg)("p",null,"Attempt to connect again and choose to cancel the connection:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Cancel request to connect",src:n(3609).A,width:"1516",height:"1280"})),(0,o.yg)("p",null,"You'll see the error message displayed on the dapp and in the console:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"MetaMask User Reject Request Error",src:n(76003).A,width:"1516",height:"1280"})),(0,o.yg)("h2",{id:"conclusion"},"Conclusion"),(0,o.yg)("p",null,"This tutorial walked you through creating a single component dapp using Vite, some basics of\ninteracting with MetaMask and its API, and managing state locally."),(0,o.yg)("p",null,"You can see the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/MetaMask/react-dapp-tutorial/tree/local-state-final"},"source code"),"\nfor the final state of this dapp tutorial."),(0,o.yg)("p",null,"As a next step, you can ",(0,o.yg)("a",{parentName:"p",href:"/add-listen/wallet/tutorials/react-dapp-global-state"},"create a React dapp with global state"),".\nThis follow-up tutorial walks you through adding more than one component and working with global state.\nYou'll use ",(0,o.yg)("a",{parentName:"p",href:"https://react.dev/reference/react/useContext"},"React's Context API")," to manage the state\nglobally and ensure that any component in your dapp can be aware and conditionally render or display\ninformation about your MetaMask wallet."))}u.isMDXComponent=!0},89409:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/pt1-01-558683076cea7f3726d3eca8f86fd4ac.png"},58826:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/pt1-02-9311a7dfea0e868bbc20ca89b736cda2.png"},14035:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/pt1-03-586db1cdaaa50e7f0fc0afdb0046787f.png"},59164:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/pt1-04-a7b1281c50edd59f651b651096a96956.png"},42053:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/pt1-05-ce7d780ba969cb0f99a39e3606b7d4ab.png"},71694:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/pt1-06-a6c5835ea173a17bbd966c626cb1bfa6.png"},17271:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/pt1-07-4da8c7a5c13fc8c1838f38a3fde3124e.png"},97360:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/pt1-08-f4447ed34298d832dd8a40b338ef7689.png"},3609:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/pt1-09-b9e3d7693371c09df38b9868e489f5fb.png"},76003:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/pt1-10-43bf49235640678bd0b96ccd493e4d9b.png"}}]);