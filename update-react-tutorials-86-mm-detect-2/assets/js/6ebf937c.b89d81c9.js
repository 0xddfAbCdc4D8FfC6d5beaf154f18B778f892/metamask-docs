"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[5690],{69315:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var s=n(74848),a=n(28453);const o={description:"Create a multi-component React dapp with global state.",toc_max_heading_level:4,sidebar_position:2},i="Create a React dapp with global state",l={id:"tutorials/react-dapp-global-state",title:"Create a React dapp with global state",description:"Create a multi-component React dapp with global state.",source:"@site/wallet/tutorials/react-dapp-global-state.md",sourceDirName:"tutorials",slug:"/tutorials/react-dapp-global-state",permalink:"/update-react-tutorials-86-mm-detect-2/wallet/tutorials/react-dapp-global-state",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/wallet/tutorials/react-dapp-global-state.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Create a multi-component React dapp with global state.",toc_max_heading_level:4,sidebar_position:2}},r={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"1. Set up the project",id:"1-set-up-the-project",level:3},{value:"Styling",id:"styling",level:4},{value:"Optional: Linting with ESLint",id:"optional-linting-with-eslint",level:4},{value:"Project structure",id:"project-structure",level:4},{value:"2. Build the context provider",id:"2-build-the-context-provider",level:3},{value:"3. Wrap components with the context provider",id:"3-wrap-components-with-the-context-provider",level:3},{value:"4. Create the components that discover, list and connect to installed wallets",id:"4-create-the-components-that-discover-list-and-connect-to-installed-wallets",level:3},{value:"5. Display MetaMask data",id:"5-display-metamask-data",level:3},{value:"6. Show MetaMask errors in the footer",id:"6-show-metamask-errors-in-the-footer",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"create-a-react-dapp-with-global-state",children:"Create a React dapp with global state"}),"\n",(0,s.jsxs)(t.p,{children:["This tutorial walks you through integrating a React dapp with MetaMask.\nThe dapp has multiple components, and requires managing state globally.\nYou'll use the ",(0,s.jsx)(t.a,{href:"https://v3.vitejs.dev/guide",children:"Vite"})," build tool with React and TypeScript to create\nthe dapp."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["We recommend first ",(0,s.jsx)(t.a,{href:"/update-react-tutorials-86-mm-detect-2/wallet/tutorials/react-dapp-local-state",children:"creating a React dapp with local state"}),".\nThis tutorial is a follow-up to that tutorial."]})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"/update-react-tutorials-86-mm-detect-2/wallet/tutorials/react-dapp-local-state",children:"previous tutorial"})," walks you through creating a dapp that uses EIP-6963: Multi Injected Provider Discovery, iterates over all found providers and connects and remembers the selected wallet, all within a single component.\nIn real world use cases, a dapp might need to respond to state changes in different components."]}),"\n",(0,s.jsxs)(t.p,{children:["In this tutorial, you'll move that state and its relevant functions into\n",(0,s.jsx)(t.a,{href:"https://react.dev/reference/react/useContext",children:"React context"}),", creating a\n",(0,s.jsx)(t.a,{href:"https://react.dev/learn/reusing-logic-with-custom-hooks#custom-hooks-sharing-logic-between-components",children:"global state"}),"\nso other components and UI can affect it and get MetaMask wallet updates."]}),"\n",(0,s.jsx)(t.p,{children:"This tutorial uses multiple components and a more complex file structure. We'll move the logic from our one component into many components and rethink how we deal with synchronization of the wallet state."}),"\n",(0,s.jsxs)(t.p,{children:["We'll solve the issue where the dapp is refreshed and we lose track of the last connected wallet and add a disconnect function that resets the state and uses ",(0,s.jsx)(t.a,{href:"/wallet/reference/wallet_revokePermissions",children:(0,s.jsx)(t.code,{children:"wallet_revokePermissions"})})," to correctly disconnect from MetaMask."]}),"\n",(0,s.jsx)(t.p,{children:"Finally, we'll deal with an edge case where a browser wallet could be disabled or uninstalled between refreshes."}),"\n",(0,s.jsx)(t.admonition,{title:"Project source code",type:"info",children:(0,s.jsxs)(t.p,{children:["You can view the ",(0,s.jsx)(t.a,{href:"https://github.com/MetaMask/vite-react-global-tutorial",children:"dapp source code on GitHub"}),"."]})}),"\n",(0,s.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://nodejs.org/",children:"Node.js"})," version 18+"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm",children:"npm"})," version 9+"]}),"\n",(0,s.jsxs)(t.li,{children:["A text editor (for example, ",(0,s.jsx)(t.a,{href:"https://code.visualstudio.com/",children:"VS Code"}),")"]}),"\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.a,{href:"https://metamask.io/download",children:"MetaMask extension"})," installed"]}),"\n",(0,s.jsx)(t.li,{children:"Basic knowledge of TypeScript, React, React Context and React Hooks"}),"\n",(0,s.jsxs)(t.li,{children:["Have read ",(0,s.jsx)(t.a,{href:"/update-react-tutorials-86-mm-detect-2/wallet/tutorials/react-dapp-local-state",children:"Creating a React dapp with local state"})]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,s.jsx)(t.h3,{id:"1-set-up-the-project",children:"1. Set up the project"}),"\n",(0,s.jsx)(t.p,{children:"Since we will be taking a fresh approach to the structure of this project, we will not be using the previous tutorials code. Instead, I will walk you through a few steps of organizing the original component that we built into several new components and ensure that code can be reused."}),"\n",(0,s.jsx)(t.p,{children:"For this reason there will be some familiar code from our previous tutorials single component, but our hooks and supporting files will be rewritten from scratch with global state (React Context) in mind. Where the previous tutorial took the least amount of steps possible to discover and connect to wallets, this tutorial will prepare you for building in a more advanced way."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/MetaMask/react-dapp-tutorial.git\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Checkout the ",(0,s.jsx)(t.code,{children:"global-state-start"})," branch:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"cd react-dapp-tutorial && git checkout global-state-start\n"})}),"\n",(0,s.jsx)(t.p,{children:"Install the node module dependencies:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm install\n"})}),"\n",(0,s.jsx)(t.p,{children:"Open the project in a text editor."}),"\n",(0,s.jsx)(t.admonition,{title:"tip",type:"note",children:(0,s.jsxs)(t.p,{children:["If you use VS Code, you can run the command ",(0,s.jsx)(t.code,{children:"code ."})," to open the project."]})}),"\n",(0,s.jsxs)(t.p,{children:["This is a working React dapp, but it's wiped out the code from the previous tutorial's\n",(0,s.jsx)(t.a,{href:"https://github.com/MetaMask/react-dapp-tutorial/blob/local-state-final/src/App.tsx",children:(0,s.jsx)(t.code,{children:"App.tsx"})})," file."]}),"\n",(0,s.jsxs)(t.p,{children:["Run the dapp using the command ",(0,s.jsx)(t.code,{children:"npx vite"}),".\nThe starting point looks like the following:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(94252).A+"",width:"1516",height:"1280"})}),"\n",(0,s.jsx)(t.p,{children:"There are three components, each with static text: navigation (with a logo area and connect button),\ndisplay (main content area), and footer.\nYou'll use the footer to show any MetaMask errors."}),"\n",(0,s.jsxs)(t.p,{children:["Before you start, comment out or remove the ",(0,s.jsx)(t.code,{children:"border"})," CSS selector, as it's only used as a visual aid.\nRemove the following line from each component style sheet:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-css",metastring:'title="Display.module.css | MetaMaskError.module.css | Navigation.module.css"',children:"// border: 1px solid rgb(...);\n"})}),"\n",(0,s.jsx)(t.h4,{id:"styling",children:"Styling"}),"\n",(0,s.jsx)(t.h4,{id:"optional-linting-with-eslint",children:"Optional: Linting with ESLint"}),"\n",(0,s.jsx)(t.p,{children:"This dapp uses a standard ESLint configuration to keep the code consistent.\nThere are two ways to use ESLint:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Run ",(0,s.jsx)(t.code,{children:"npm run lint"})," or ",(0,s.jsx)(t.code,{children:"npm run lint:fix"})," from the command line.\nThe former displays all the linting errors, and the latter updates your code to fix linting\nerrors where possible."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Set up your IDE to show linting errors and automatically fix them on save.\nFor example, in VS Code, you can create or update the file at ",(0,s.jsx)(t.code,{children:".vscode/settings.json"})," in the\nroot of the project with the following settings:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'title="settings.json"',children:'{\n  "eslint.format.enable": true,\n  "eslint.packageManager": "npm",\n  "editor.codeActionsOnSave": {\n    "source.fixAll.eslint": true\n  },\n  "eslint.codeActionsOnSave.mode": "all"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"project-structure",children:"Project structure"}),"\n",(0,s.jsxs)(t.p,{children:["The following is a tree representation of the dapp's ",(0,s.jsx)(t.code,{children:"/src"})," directory:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:"\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 components\n\u2502   \u2502   \u2514\u2500\u2500 WalletDiscovery\n\u2502   \u2502   |   \u2514\u2500\u2500 WalletDiscovery.module.css\n\u2502   \u2502   |   \u2514\u2500\u2500 WalletDiscovery.tsx\n\u2502   \u2502   \u251c\u2500\u2500\u2500 WalletList\n\u2502   \u2502   |   \u2514\u2500\u2500 WalletList.module.css\n\u2502   \u2502   |   \u2514\u2500\u2500 WalletList.tsx\n\u2502   \u2502   \u251c\u2500\u2500 SelectedWallet\n\u2502   \u2502   |   \u2514\u2500\u2500 SelectedWallet.module.css\n\u2502   \u2502   |   \u2514\u2500\u2500 SelectedWallet.tsx\n\u2502   \u2502   \u251c\u2500\u2500 MetaMaskError\n\u2502   \u2502   |   \u2514\u2500\u2500 MetaMaskError.module.css\n\u2502   \u2502   |   \u2514\u2500\u2500 MetaMaskError.tsx\n\u2502   \u251c\u2500\u2500 hooks\n\u2502   \u2502   \u251c\u2500\u2500 Eip6963Provider.tsx\n\u2502   \u2502   \u2514\u2500\u2500 useEip6963Provider.tsx\n\u2502   \u251c\u2500\u2500 utils\n\u2502   \u2502   \u2514\u2500\u2500 index.tsx\n\u251c\u2500\u2500 App.css\n\u251c\u2500\u2500 App.tsx\n\u251c\u2500\u2500 index.css\n\u251c\u2500\u2500 main.tsx\n\u251c\u2500\u2500 vite-env.d.ts\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Instead of a single component, there's a ",(0,s.jsx)(t.code,{children:"src/components"})," directory with UI and functionality\ndistributed into multiple components.\nYou'll modify the dapp's state in this directory and make it available to the rest of the dapp using\na ",(0,s.jsx)(t.a,{href:"https://react.dev/reference/react/useContext",children:"context provider"}),".\nThis provider will sit in the ",(0,s.jsx)(t.code,{children:"src/App.tsx"})," file and wrap it's child components."]}),"\n",(0,s.jsx)(t.p,{children:"The child components will have access to the global state and the functions that modify the global state.\nThis ensures that any change to selected wallet is remembered and that any component could subscribe to those state changes."}),"\n",(0,s.jsx)(t.p,{children:"The following graphic shows how the context provider wraps its child components, providing access to\nthe state modifier functions and the actual state itself.\nSince React uses a one-way data flow, any change to the data gets re-rendered in those components automatically."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(96903).A+"",width:"1516",height:"1280"})}),"\n",(0,s.jsx)(t.h3,{id:"2-build-the-context-provider",children:"2. Build the context provider"}),"\n",(0,s.jsx)(t.h3,{id:"3-wrap-components-with-the-context-provider",children:"3. Wrap components with the context provider"}),"\n",(0,s.jsx)(t.h3,{id:"4-create-the-components-that-discover-list-and-connect-to-installed-wallets",children:"4. Create the components that discover, list and connect to installed wallets"}),"\n",(0,s.jsx)(t.h3,{id:"5-display-metamask-data",children:"5. Display MetaMask data"}),"\n",(0,s.jsx)(t.h3,{id:"6-show-metamask-errors-in-the-footer",children:"6. Show MetaMask errors in the footer"}),"\n",(0,s.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(t.p,{children:["You can see the ",(0,s.jsx)(t.a,{href:"https://github.com/MetaMask/react-dapp-tutorial/tree/global-state-final",children:"source code"}),"\nfor the final state of this dapp tutorial."]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},94252:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/pt2-01-3c2f19aa1cdbeb15eab76717dc49ce0c.png"},96903:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/pt2-02-1cc67378fe36943534741cd4f8b131bd.png"},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(96540);const a={},o=s.createContext(a);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);