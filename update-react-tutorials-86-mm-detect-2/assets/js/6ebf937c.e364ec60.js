"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[5690],{93592:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var s=n(74848),l=n(28453);n(11470),n(19365);const r={description:"Create a multi-component React dapp with global state using EIP-6963.",toc_max_heading_level:4,sidebar_position:2},o="Create a React dapp with global state",i={id:"tutorials/react-dapp-global-state",title:"Create a React dapp with global state",description:"Create a multi-component React dapp with global state using EIP-6963.",source:"@site/wallet/tutorials/react-dapp-global-state.md",sourceDirName:"tutorials",slug:"/tutorials/react-dapp-global-state",permalink:"/update-react-tutorials-86-mm-detect-2/wallet/tutorials/react-dapp-global-state",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/wallet/tutorials/react-dapp-global-state.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Create a multi-component React dapp with global state using EIP-6963.",toc_max_heading_level:4,sidebar_position:2},sidebar:"walletSidebar",previous:{title:"Create a React dapp with local state",permalink:"/update-react-tutorials-86-mm-detect-2/wallet/tutorials/react-dapp-local-state"},next:{title:"Create a simple dapp",permalink:"/update-react-tutorials-86-mm-detect-2/wallet/tutorials/javascript-dapp-simple"}},a={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"1. Set up the project",id:"1-set-up-the-project",level:3},{value:"Styling",id:"styling",level:4},{value:"Project structure",id:"project-structure",level:4},{value:"2. Import EIP-6963 interfaces",id:"2-import-eip-6963-interfaces",level:3},{value:"3. Build the context provider",id:"3-build-the-context-provider",level:3},{value:"4. Wrap components with the context provider",id:"4-wrap-components-with-the-context-provider",level:3},{value:"5. Create the UI components",id:"5-create-the-ui-components",level:3},{value:"6. Display MetaMask data",id:"6-display-metamask-data",level:3},{value:"7. Show wallet connection errors",id:"7-show-wallet-connection-errors",level:3},{value:"8. Run the final state of the dapp",id:"8-run-the-final-state-of-the-dapp",level:3},{value:"9. Test the dapp features",id:"9-test-the-dapp-features",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"create-a-react-dapp-with-global-state",children:"Create a React dapp with global state"}),"\n",(0,s.jsxs)(t.p,{children:["This tutorial walks you through integrating a React dapp with MetaMask.\nThe dapp has multiple components and requires managing the state globally.\nYou'll use the ",(0,s.jsx)(t.a,{href:"https://v3.vitejs.dev/guide",children:"Vite"})," build tool with React and TypeScript to create\nthe dapp."]}),"\n",(0,s.jsxs)(t.admonition,{type:"tip",children:[(0,s.jsxs)(t.p,{children:["We recommend starting with ",(0,s.jsx)(t.a,{href:"/update-react-tutorials-86-mm-detect-2/wallet/tutorials/react-dapp-local-state",children:"creating a React dapp with local state"}),",\nwhich introduces ",(0,s.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-6963",children:"EIP-6963"}),".\nThe tutorial demonstrates how to iterate over all discovered providers, connect to the selected\nwallet, and remember the selection within a single component."]}),(0,s.jsxs)(t.p,{children:["If you skip the tutorial, consider reviewing ",(0,s.jsx)(t.a,{href:"/update-react-tutorials-86-mm-detect-2/wallet/concepts/wallet-interoperability",children:"wallet\ninteroperability"})," to understand how multiple injected wallet\nproviders work."]})]}),"\n",(0,s.jsx)(t.p,{children:"In real-world use cases, a dapp shares state across many components.\nThis tutorial is more complex than the tutorial to create a dapp in a local state because it\naddresses real-world scenarios.\nThe dapp you create using this tutorial will look similar to the following:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"React dapp with global state",src:n(19599).A+"",width:"2000",height:"1424"})}),"\n",(0,s.jsxs)(t.p,{children:["In this tutorial, the state is put into a ",(0,s.jsx)(t.a,{href:"https://react.dev/reference/react/useContext",children:"React\nContext"})," component, creating a ",(0,s.jsx)(t.a,{href:"https://react.dev/learn/reusing-logic-with-custom-hooks#custom-hooks-sharing-logic-between-components",children:"global\nstate"}),"\nthat allows other components and UI elements to benefit from its data and functions."]}),"\n",(0,s.jsxs)(t.p,{children:["You'll also use ",(0,s.jsx)(t.code,{children:"localStorage"})," to persist the selected wallet, ensuring the last connected wallet\nstate remains intact even after a page refresh."]}),"\n",(0,s.jsxs)(t.p,{children:["This tutorial addresses the edge case where a browser wallet may be disabled or uninstalled between\nrefreshes or visits to the dapp.\nA disconnect function is added to reset the state and you can use\n",(0,s.jsx)(t.a,{href:"/wallet/reference/wallet_revokePermissions",children:(0,s.jsx)(t.code,{children:"wallet_revokePermissions"})})," to properly disconnect from MetaMask."]}),"\n",(0,s.jsx)(t.admonition,{title:"Project source code",type:"info",children:(0,s.jsxs)(t.p,{children:["You can view the ",(0,s.jsx)(t.a,{href:"https://github.com/MetaMask/vite-react-global-tutorial",children:"dapp source code on GitHub"}),"."]})}),"\n",(0,s.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://nodejs.org/",children:"Node.js"})," version 18+"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm",children:"npm"})," version 9+"]}),"\n",(0,s.jsxs)(t.li,{children:["A text editor (for example, ",(0,s.jsx)(t.a,{href:"https://code.visualstudio.com/",children:"VS Code"}),")"]}),"\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.a,{href:"https://metamask.io/download",children:"MetaMask extension"})," installed"]}),"\n",(0,s.jsx)(t.li,{children:"Basic knowledge of TypeScript, React, React Context, and React Hooks"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,s.jsx)(t.h3,{id:"1-set-up-the-project",children:"1. Set up the project"}),"\n",(0,s.jsx)(t.p,{children:"This project introduces a new structure, independent of previous tutorials.\nInstead of reusing code or states, this tutorial guides you through breaking down the\nsingle-component structure into multiple components."}),"\n",(0,s.jsx)(t.p,{children:"Create a new ViteJS project and add the necessary directory structure:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm create vite@latest vite-react-global-state -- --template react-ts\n"})}),"\n",(0,s.jsx)(t.p,{children:"Install the node module dependencies:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"cd vite-react-global-state && npm install\n"})}),"\n",(0,s.jsx)(t.p,{children:"Launch the development server:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The terminal displays a ",(0,s.jsx)(t.code,{children:"localhost"})," URL, which you can use to view the dapp in your browser."]}),"\n",(0,s.jsxs)(t.admonition,{title:"tip",type:"note",children:[(0,s.jsxs)(t.p,{children:["If you are using VS Code, you can run the ",(0,s.jsx)(t.code,{children:"code ."})," command to open the project."]}),(0,s.jsxs)(t.p,{children:["If the development server stops, you can use the ",(0,s.jsx)(t.code,{children:"npx vite"})," or ",(0,s.jsx)(t.code,{children:"npm run dev"})," command to re-run your project."]})]}),"\n",(0,s.jsxs)(t.p,{children:["After you open the ViteJS React project in your editor of choice, add three directories within the\n",(0,s.jsx)(t.code,{children:"src"})," directory."]}),"\n",(0,s.jsxs)(t.p,{children:["Create a ",(0,s.jsx)(t.code,{children:"src/components"}),", ",(0,s.jsx)(t.code,{children:"src/hooks"}),", and ",(0,s.jsx)(t.code,{children:"src/utils"})," directory in the root of the project using\nthe following commands:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"mkdir src/components && mkdir src/hooks && mkdir src/utils\n"})}),"\n",(0,s.jsx)(t.p,{children:"Create components for listing installed wallets, displaying connected wallet information, and\nhandling errors.\nAdditionally, create a CSS module for each component:"}),"\n",(0,s.jsxs)(t.p,{children:["Create the following files in ",(0,s.jsx)(t.code,{children:"src/components"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"SelectedWallet.module.css"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"SelectedWallet.tsx"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"WalletError.module.css"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"WalletError.tsx"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"WalletList.module.css"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"WalletList.tsx"})}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Create the following files in ",(0,s.jsx)(t.code,{children:"src/hooks"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"Eip6963Provider.tsx"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"useEip6963Provider.tsx"})}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Create the following file in ",(0,s.jsx)(t.code,{children:"src/utils"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"index.ts"})}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"styling",children:"Styling"}),"\n",(0,s.jsxs)(t.p,{children:["Add the following CSS code to ",(0,s.jsx)(t.code,{children:"SelectedWallet.module.css"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-css",metastring:'title="SelectedWallet.module.css"',children:".selectedWallet {\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: flex-start;\n\n  padding: 0.6em 1.2em;\n  margin-bottom: 0.5em;\n\n  font-family: inherit;\n  font-size: 1em;\n  font-weight: 500;\n}\n.selectedWallet > img {\n  width: 2em;\n  height: 1.5em;\n  margin-right: 1em;\n}\n\n.providers {\n  display: flex;\n  flex-flow: column wrap;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n\n  padding: 0.6em 1.2em;\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Add the following CSS code to ",(0,s.jsx)(t.code,{children:"WalletError.module.css"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-css",metastring:'title="WalletError.module.css"',children:".walletError {\n  margin-top: 1em;\n  border-radius: 0.5em;\n  height: 36px;\n  padding: 16px;\n  color: #EFEFEF;\n  background-color: transparent;\n  user-select: none;\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Add the following CSS code to ",(0,s.jsx)(t.code,{children:"WalletList.module.css"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-css",metastring:'title="WalletList.module.css"',children:".walletList {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Append the following code to the end of ",(0,s.jsx)(t.code,{children:"src/index.css"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-css",metastring:'title="index.css"',children:"/* added css */\n:root {\n  text-align: left;\n}\n\nhr {\n  margin-top: 2em;\n  height: 1px;\n}\n\nbutton {\n  min-width: 12em;\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: flex-start;\n\n  align-items: center;\n  border-radius: 0.5em;\n  margin-bottom: 0.5em;\n  border: 1px solid transparent;\n}\n\nbutton > img {\n  width: 1.5em;\n  height: 1.5em;\n  margin-right: 1em;\n}\n\nbutton:hover {\n  border-color: #75079d;\n}\n\nbutton:first-child {\n  margin-top: 0.5em;\n}\nbutton:last-child {\n  margin-bottom: 0;\n}\n"})}),"\n",(0,s.jsx)(t.h4,{id:"project-structure",children:"Project structure"}),"\n",(0,s.jsxs)(t.p,{children:["You now have some basic global and component-level styling for your application.\nThe directory structure in the dapp's ",(0,s.jsx)(t.code,{children:"/src"})," directory should look similar to the following:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:"\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 components\n\u2502   \u2502   \u251c\u2500\u2500  SelectedWallet.module.css\n\u2502   \u2502   \u251c\u2500\u2500  SelectedWallet.tsx\n\u2502   \u2502   \u251c\u2500\u2500  WalletError.module.css\n\u2502   \u2502   \u251c\u2500\u2500  WalletError.tsx\n\u2502   \u2502   \u251c\u2500\u2500  WalletList.module.css\n\u2502   \u2502   \u2514\u2500\u2500  WalletList.tsx\n\u2502   \u251c\u2500\u2500 hooks\n\u2502   \u2502   \u251c\u2500\u2500 WalletProvider.tsx\n\u2502   \u2502   \u2514\u2500\u2500 useWalletProvider.tsx\n\u2502   \u251c\u2500\u2500 utils\n\u2502   \u2502   \u2514\u2500\u2500 index.tsx\n\u251c\u2500\u2500 App.css\n\u251c\u2500\u2500 App.tsx\n\u251c\u2500\u2500 index.css\n\u251c\u2500\u2500 main.tsx\n\u251c\u2500\u2500 vite-env.d.ts\n"})}),"\n",(0,s.jsx)(t.h3,{id:"2-import-eip-6963-interfaces",children:"2. Import EIP-6963 interfaces"}),"\n",(0,s.jsx)(t.p,{children:"The dapp connects to MetaMask using EIP-6963."}),"\n",(0,s.jsx)(t.admonition,{title:"Why EIP-6963?",type:"info",children:(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-6963",children:"EIP-6963"})," introduces an alternative wallet detection\nmechanism to the ",(0,s.jsx)(t.code,{children:"window.ethereum"})," injected provider.\nThis alternative mechanism enables dapps to support\n",(0,s.jsx)(t.a,{href:"/update-react-tutorials-86-mm-detect-2/wallet/concepts/wallet-interoperability",children:"wallet interoperability"})," by discovering multiple injected\nwallet providers in a user's browser."]})}),"\n",(0,s.jsxs)(t.p,{children:["Update the Vite environment variable file, ",(0,s.jsx)(t.code,{children:"src/vite-env.d.ts"}),", with the types and interfaces\nneeded for ",(0,s.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-6963",children:"EIP-6963"})," and\n",(0,s.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-1193",children:"EIP-1193"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="vite-env.d.ts"',children:'/// <reference types="vite/client" />\n\ninterface EIP1193Provider {\n  isStatus?: boolean\n  host?: string\n  path?: string\n  sendAsync?: (request: { method: string, params?: Array<unknown> }, callback: (error: Error | null, response: unknown) => void) => void\n  send?: (request: { method: string, params?: Array<unknown> }, callback: (error: Error | null, response: unknown) => void) => void\n  request: (request: { method: string, params?: Array<unknown> }) => Promise<unknown>\n}\n\ninterface EIP6963ProviderInfo {\n  rdns: string\n  uuid: string\n  name: string\n  icon: string\n}\n\ninterface EIP6963ProviderDetail {\n  info: EIP6963ProviderInfo\n  provider: EIP1193Provider\n}\n\ntype EIP6963AnnounceProviderEvent = {\n  detail:{\n    info: EIP6963ProviderInfo,\n    provider: Readonly<EIP1193Provider>\n }\n}\n\ninterface WalletError {\n  code?: string\n  message?: string\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This also adds an interface for ",(0,s.jsx)(t.code,{children:"WalletError"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"3-build-the-context-provider",children:"3. Build the context provider"}),"\n",(0,s.jsx)(t.p,{children:"This section of the tutorial explains how to create the React Context component using various types,\ninterfaces, functions, hooks, events, effects, and RPC calls.\nThe React Context component wraps your application, providing all components access to the state and\nfunctions required to modify the state and manage connections to discovered wallets."}),"\n",(0,s.jsx)(t.p,{children:"To do this, you must first import the necessary context.\nThen, define a type alias for a record where the keys are wallet identifiers and the values are\naccount addresses or null."}),"\n",(0,s.jsx)(t.p,{children:"Next, define the context interface for the EIP-6963 provider.\nThe interface includes the following:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["A list of wallets, represented as a record of wallets by ",(0,s.jsx)(t.code,{children:"runs"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["The selected wallet, of type ",(0,s.jsx)(t.code,{children:"EIP6963ProviderDetail"}),"."]}),"\n",(0,s.jsx)(t.li,{children:"The chosen account address, represented as a string."}),"\n",(0,s.jsx)(t.li,{children:"An error message, also represented as a string."}),"\n",(0,s.jsx)(t.li,{children:"Functions to connect and disconnect wallets."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Add the following code to ",(0,s.jsx)(t.code,{children:"src/hooks/WalletProvider.tsx"})," to import the context, define the type alias,\nand define the interface:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletProvider.tsx"',children:'import { PropsWithChildren, createContext, useCallback, useEffect, useState } from "react"\ntype SelectedAccountByWallet = Record<string, string | null>\ninterface WalletProviderContext {\n  wallets: Record<string, EIP6963ProviderDetail>\n  selectedWallet: EIP6963ProviderDetail | null\n  selectedAccount: string | null\n  errorMessage: string | null\n  connectWallet: (walletUuid: string) => Promise<void>\n  disconnectWallet: () => void\n  clearError: () => void\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Add the following code to ",(0,s.jsx)(t.code,{children:"src/hooks/WalletProvider.tsx"})," to extend the global ",(0,s.jsx)(t.code,{children:"WindowEventMap"})," interface\nwith the custom ",(0,s.jsx)(t.code,{children:"eip6963:announceProvider"})," event:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletProvider.tsx"',children:'declare global{\n  interface WindowEventMap {\n    "eip6963:announceProvider": CustomEvent\n  }\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Explicitly declaring the custom ",(0,s.jsx)(t.code,{children:"eip6963:announceProvider"})," event prevents type errors, enables\nproper type checking, and supports autocompletion in TypeScript."]}),"\n",(0,s.jsxs)(t.p,{children:["Create a React Context for the EIP-6963 ",(0,s.jsx)(t.code,{children:"WalletProvider"})," with the defined interface\n",(0,s.jsx)(t.code,{children:"WalletProviderContext"})," with a default of ",(0,s.jsx)(t.code,{children:"null"}),", then define the ",(0,s.jsx)(t.code,{children:"WalletProvider"})," component.\nThe ",(0,s.jsx)(t.code,{children:"WalletProvider"})," component wraps all other components in the dapp, providing them with the\nnecessary data and functions related to wallets."]}),"\n",(0,s.jsxs)(t.p,{children:["Add the following code to ",(0,s.jsx)(t.code,{children:"src/hooks/WalletProvider.tsx"})," to create the React Context with the defined interface:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletProvider.tsx" showLineNumbers',children:'export const WalletProviderContext = createContext<WalletProviderContext>(null)\n\nexport const WalletProvider: React.FC<PropsWithChildren> = ({ children }) => {\n  const [wallets, setWallets] = useState<Record<string, EIP6963ProviderDetail>>({})\n  const [selectedWalletRdns, setSelectedWalletRdns] = useState<string | null>(null)\n  const [selectedAccountByWalletRdns, setSelectedAccountByWalletRdns] = useState<SelectedAccountByWallet>({})\n\n  const [errorMessage, setErrorMessage] = useState("")\n  const clearError = () => setErrorMessage("")\n  const setError = (error: string) => setErrorMessage(error)\n\n  useEffect(() => {\n    const savedSelectedWalletRdns = localStorage.getItem("selectedWalletRdns")\n    const savedSelectedAccountByWalletRdns = localStorage.getItem("selectedAccountByWalletRdns")\n\n    if (savedSelectedAccountByWalletRdns) {\n      setSelectedAccountByWalletRdns(JSON.parse(savedSelectedAccountByWalletRdns))\n    }\n\n    function onAnnouncement(event: EIP6963AnnounceProviderEvent){\n      setWallets(currentWallets => ({\n        ...currentWallets,\n        [event.detail.info.rdns]: event.detail\n      }))\n\n      if (savedSelectedWalletRdns && event.detail.info.rdns === savedSelectedWalletRdns) {\n        setSelectedWalletRdns(savedSelectedWalletRdns)\n      }\n    }\n\n    window.addEventListener("eip6963:announceProvider", onAnnouncement)\n    window.dispatchEvent(new Event("eip6963:requestProvider"))\n    \n    return () => window.removeEventListener("eip6963:announceProvider", onAnnouncement)\n  }, [])\n'})}),"\n",(0,s.jsx)(t.p,{children:"In the above code sample, lines 4-10 are state definitions:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"wallets"})," - State to hold detected wallets."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"selectedWalletRdns"})," - State to hold the RDNS of the selected wallet."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"selectedAccountByWalletRdns"})," - State to hold accounts associated with each wallet."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"errorMessage"})," - State to hold the error message when a wallet errors on connection."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"clearError"})," - Function to clear the state in ",(0,s.jsx)(t.code,{children:"errorMessage"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"setError"})," - Function to set the state in ",(0,s.jsx)(t.code,{children:"errorMessage"})," (with a ",(0,s.jsx)(t.code,{children:"string"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["In the above code sample, line 12 is the ",(0,s.jsx)(t.code,{children:"useEffect"})," hook and it handles:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Local storage retrieval - On mount, retrieves the saved selected wallet and accounts from local storage."}),"\n",(0,s.jsxs)(t.li,{children:["Event listener - Adds an event listener for the custom ",(0,s.jsx)(t.code,{children:"eip6963:announceProvider"})," event."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"OnAnnouncement"})," - When the provider announces itself, update the state."]}),"\n",(0,s.jsx)(t.li,{children:"Provider request - Dispatches an event to request existing providers."}),"\n",(0,s.jsxs)(t.li,{children:["Cleanup - A ",(0,s.jsx)(t.code,{children:"return"})," statement in a ",(0,s.jsx)(t.code,{children:"useEffect"})," is used for cleanup.\nIn this case it removes the event listener on unmount."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Add the following code to ",(0,s.jsx)(t.code,{children:"src/hooks/WalletProvider.tsx"})," to connect a wallet and update the component's state:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletProvider.tsx"',children:'const connectWallet = useCallback(async (walletRdns: string) => {\n  try {\n    const wallet = wallets[walletRdns]\n    const accounts = await wallet.provider.request({method:"eth_requestAccounts"}) as string[]\n\n    if(accounts?.[0]) {\n      setSelectedWalletRdns(wallet.info.rdns)\n      setSelectedAccountByWalletRdns((currentAccounts) => ({\n        ...currentAccounts,\n        [wallet.info.rdns]: accounts[0],\n      }))\n\n      localStorage.setItem("selectedWalletRdns", wallet.info.rdns)\n      localStorage.setItem("selectedAccountByWalletRdns", JSON.stringify({\n        ...selectedAccountByWalletRdns,\n        [wallet.info.rdns]: accounts[0],\n      }))\n    }\n  } catch (error) {\n    console.error("Failed to connect to provider:", error)\n    const walletError: WalletError = error as WalletError\n    setError(`Code: ${walletError.code} \\nError Message: ${walletError.message}`)\n  }\n}, [wallets, selectedAccountByWalletRdns])\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The code uses the ",(0,s.jsx)(t.code,{children:"walletRdns"})," parameter to identify the wallet's Reverse Domain Name System (RDNS)\nfor connecting."]}),"\n",(0,s.jsxs)(t.p,{children:["The function performs an asynchronous operation to request accounts from the wallet provider using\nthe Ethereum JSON-RPC method ",(0,s.jsx)(t.code,{children:"eth_requestAccounts"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Add the following code to ",(0,s.jsx)(t.code,{children:"src/hooks/WalletProvider.tsx"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletProvider.tsx"',children:'const disconnectWallet = useCallback(async () => {\n  if (selectedWalletRdns) {\n    setSelectedAccountByWalletRdns((currentAccounts) => ({\n      ...currentAccounts,\n      [selectedWalletRdns]: null,\n    }))\n\n    const wallet = wallets[selectedWalletRdns];\n    setSelectedWalletRdns(null)\n    localStorage.removeItem("selectedWalletRdns")\n\n    try {\n      await wallet.provider.request({\n        method: "wallet_revokePermissions",\n        params: [{ "eth_accounts": {} }]\n      });\n    } catch (error) {\n      console.error("Failed to revoke permissions:", error);\n    }\n  }\n}, [selectedWalletRdns, wallets])\n'})}),"\n",(0,s.jsx)(t.admonition,{title:"important",type:"caution",children:(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/wallet/reference/wallet_revokePermissions",children:(0,s.jsx)(t.code,{children:"wallet_revokePermission"})})," is an experimental RPC\nmethod that might only work with MetaMask.\nConfiguring the revocation in a try/catch block and separating it from the rest of the cleanup\nensures that if a wallet does not support this feature, the rest of the disconnect functionality\nwill still execute."]})}),"\n",(0,s.jsxs)(t.admonition,{type:"note",children:[(0,s.jsxs)(t.p,{children:["Both of the previous functions use ",(0,s.jsx)(t.code,{children:"useCallback"}),".\nIt is used to memoize the ",(0,s.jsx)(t.code,{children:"connectWallet"})," function, optimize performance, and prevent unnecessary re-renders.\nIt ensures the function instance remains consistent between renders if its dependencies are changed."]}),(0,s.jsxs)(t.p,{children:["For example, when using ",(0,s.jsx)(t.code,{children:"disconnectWallet"}),", each time the ",(0,s.jsx)(t.code,{children:"WalletProvider"})," component re-renders\nwithout ",(0,s.jsx)(t.code,{children:"useCallback"}),", a new instance of ",(0,s.jsx)(t.code,{children:"disconnectWallet"})," is created.\nThis can cause unnecessary re-renders of child components that depend on this function.\nBy memoizing it with ",(0,s.jsx)(t.code,{children:"useCallback"}),", React keeps the function instance consistent between renders, as\nlong as its dependencies (wallets and ",(0,s.jsx)(t.code,{children:"selectedWalletRdns"}),") haven't changed, preventing unnecessary\nre-renders of child components."]}),(0,s.jsxs)(t.p,{children:["Although ",(0,s.jsx)(t.code,{children:"useCallback"})," is not strictly necessary, it demonstrates best practices.\nPredicting how a context provider will be used or how the dapp might change or scale is difficult.\nUsing ",(0,s.jsx)(t.code,{children:"useCallback"})," can improve performance in some cases by reducing unnecessary re-renders."]})]}),"\n",(0,s.jsxs)(t.p,{children:["Add the following code to ",(0,s.jsx)(t.code,{children:"src/hooks/WalletProvider.tsx"})," to bundle the state and functions using ",(0,s.jsx)(t.code,{children:"contextValue"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletProvider.tsx"',children:"const contextValue: WalletProviderContext = {\n  wallets,\n  selectedWallet: selectedWalletRdns === null ? null : wallets[selectedWalletRdns],\n  selectedAccount: selectedWalletRdns === null ? null : selectedAccountByWalletRdns[selectedWalletRdns],\n  errorMessage,\n  connectWallet,\n  disconnectWallet,\n  clearError,\n}\n\nreturn (\n <WalletProviderContext.Provider value={contextValue}>\n   {children}\n </WalletProviderContext.Provider>\n)\n"})}),"\n",(0,s.jsxs)(t.admonition,{type:"note",children:[(0,s.jsxs)(t.p,{children:["If ",(0,s.jsx)(t.code,{children:"selectedWalletRdns"})," is null, set ",(0,s.jsx)(t.code,{children:"selectedWallet"})," to null.\nOtherwise, retrieve the wallet details from the wallet state using the ",(0,s.jsx)(t.code,{children:"runs"})," identifier."]}),(0,s.jsxs)(t.p,{children:["If ",(0,s.jsx)(t.code,{children:"selectedWalletRdns"})," is null, set ",(0,s.jsx)(t.code,{children:"selectedAccount"})," to null.\nOtherwise, retrieve the account address from the ",(0,s.jsx)(t.code,{children:"selectedAccountByWalletRdns"})," state using the\n",(0,s.jsx)(t.code,{children:"rdns"})," identifier."]})]}),"\n",(0,s.jsxs)(t.p,{children:["Within the component's return statement, the ",(0,s.jsx)(t.code,{children:"contextValue"})," object is constructed with all necessary\nstate and functions related to wallet management.\nIt is passed to the ",(0,s.jsx)(t.code,{children:"WalletProviderContext.Provider"}),", making wallet-related data and functions\navailable to all descendant components."]}),"\n",(0,s.jsx)(t.p,{children:"The return statement wraps the children components with the context provider, allowing them to\naccess the context values."}),"\n",(0,s.jsxs)(t.p,{children:["Add the following code to ",(0,s.jsx)(t.code,{children:"src/hooks/useWalletProvider.tsx"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="useWalletProvider.tsx"',children:'import { useContext } from "react"\nimport { WalletProviderContext } from "./WalletProvider"\n\nexport const useWalletProvider = () => useContext(WalletProviderContext)\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"useWalletProvider.tsx"})," file provides a custom hook that simplifies the process of consuming the\n",(0,s.jsx)(t.code,{children:"WalletProviderContext"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["In the code, the ",(0,s.jsx)(t.code,{children:"useWalletProvider"})," hook is exported, which leverages the ",(0,s.jsx)(t.code,{children:"useContext"})," hook to\nconsume the ",(0,s.jsx)(t.code,{children:"WalletProviderContext"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The benefit of this separate file exporting the hook is that components can directly call\n",(0,s.jsx)(t.code,{children:"useWalletProvider() "})," instead of ",(0,s.jsx)(t.code,{children:"useContext(WalletProviderContext)"}),", making the code cleaner and\nmore readable."]}),"\n",(0,s.jsxs)(t.p,{children:["With ",(0,s.jsx)(t.code,{children:"WalletProvider.tsx"})," and ",(0,s.jsx)(t.code,{children:"useWalletProvider.tsx"}),", the dapp can manage and access wallet-related\nstate and functionality across various components.\nYou can now wrap the entire application (the part that requires wallet connection and data) with a\n",(0,s.jsx)(t.code,{children:"<WalletProvider></WalletProvider>"})," component."]}),"\n",(0,s.jsxs)(t.p,{children:["Add the following code to ",(0,s.jsx)(t.code,{children:"src/utils/index.ts"})," to wrap the app in the component:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="index.ts"',children:"export const formatBalance = (rawBalance: string) => {\n  const balance = (parseInt(rawBalance) / 1000000000000000000).toFixed(2)\n  return balance\n}\n\nexport const formatChainAsNum = (chainIdHex: string) => {\n  const chainIdNum = parseInt(chainIdHex)\n  return chainIdNum\n}\n\nexport const formatAddress = (addr: string) => {\n  const upperAfterLastTwo = addr.slice(0,2) + addr.slice(2)\n  return `${upperAfterLastTwo.substring(0, 5)}...${upperAfterLastTwo.substring(39)}`\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Although ",(0,s.jsx)(t.code,{children:"formatAddress"})," is the only function used, ",(0,s.jsx)(t.code,{children:"formatBalance"})," and ",(0,s.jsx)(t.code,{children:"formatChainAsNum"})," were\nadded as useful utility functions.\nExplore ",(0,s.jsx)(t.a,{href:"https://viem.sh/docs/chains/formatters",children:"Viem Formatters"})," or other libraries for additional\nformatting options."]}),"\n",(0,s.jsx)(t.h3,{id:"4-wrap-components-with-the-context-provider",children:"4. Wrap components with the context provider"}),"\n",(0,s.jsxs)(t.p,{children:["Replace the code in the file ",(0,s.jsx)(t.code,{children:"src/App.tsx"})," with the following:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="App.tsx"',children:'import "./App.css"\nimport { WalletProvider } from "~/hooks/WalletProvider"\n// import { WalletList } from "./components/WalletList"\n// import { SelectedWallet } from "./components/SelectedWallet"\n// import { WalletError } from "./components/WalletError"\n\nfunction App() {\n  return (\n    <WalletProvider>\n    {/* \n      <WalletList />\n      <hr />\n      <SelectedWallet />\n      <WalletError /> \n    */}\n    </WalletProvider>\n )\n}\n\nexport default App\n'})}),"\n",(0,s.jsx)(t.p,{children:"The child components are currently commented out, but as you create each of these components, you'll\nuncomment the specific lines."}),"\n",(0,s.jsx)(t.p,{children:"Create each of the components you've defined and add the logic and UI needed to accomplish your goals:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Discover injected providers (browser-installed wallets)."}),"\n",(0,s.jsx)(t.li,{children:"Save those providers and selected wallet in global state (context provider)."}),"\n",(0,s.jsx)(t.li,{children:"Supply a list of wallet providers to child components."}),"\n",(0,s.jsxs)(t.li,{children:["Include a component map the providers to a button with icon and name.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Have a ",(0,s.jsx)(t.code,{children:"connectWallet"})," function for each of those buttons."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"Include a component that displays the selected wallet and info."}),"\n",(0,s.jsx)(t.li,{children:"Include a UI component to show errors."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"5-create-the-ui-components",children:"5. Create the UI components"}),"\n",(0,s.jsxs)(t.p,{children:["Create the components in the order that you've listed them in the ",(0,s.jsx)(t.code,{children:"App.tsx"})," file.\nStart with ",(0,s.jsx)(t.code,{children:"WalletList.tsx"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Add the following code to ",(0,s.jsx)(t.code,{children:"src/components/WalletList.tsx"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletList.tsx"',children:'import { useWalletProvider } from "~/hooks/useWalletProvider"\nimport styles from "./WalletList.module.css"\n\nexport const WalletList = () => {\n  const { wallets, connectWallet } = useWalletProvider()\n  return (\n    <>\n      <h2>Wallets Detected:</h2>\n      <div className={styles.walletList}>\n        {\n          Object.keys(wallets).length > 0 \n            ? Object.values(wallets).map((provider: EIP6963ProviderDetail) => (\n              <button key={provider.info.uuid} onClick={() => connectWallet(provider.info.rdns)}>\n                <img src={provider.info.icon} alt={provider.info.name} />\n                <div>{provider.info.name}</div>\n              </button>\n            )) \n            : <div>there are no Announced Providers</div>\n        }\n      </div>\n    </>\n )\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["You've imported the ",(0,s.jsx)(t.code,{children:"wallets"})," data and the ",(0,s.jsx)(t.code,{children:"connectWallet"})," function from the ",(0,s.jsx)(t.code,{children:"useWalletProvider"})," hook."]}),"\n",(0,s.jsxs)(t.p,{children:["The component checks if there are any detected wallets using ",(0,s.jsx)(t.code,{children:"Object.keys(wallets).length > 0"}),'.\nThis check ensures that if no wallets are found, a message: "No wallets detected", is displayed\ninstead of an empty list.']}),"\n",(0,s.jsxs)(t.p,{children:["If wallets are detected, ",(0,s.jsx)(t.code,{children:"Object.values(wallets).map(wallet => (...))"})," iterates over them and\nrenders a button for each one."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Object.keys(wallets)"})," returns an array of the wallet keys (",(0,s.jsx)(t.code,{children:"rdns"})," values).\nIt is used here to check the length."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Object.values(wallets)"})," returns an array of the wallet objects.\nThis is needed to map and render."]}),"\n",(0,s.jsxs)(t.li,{children:["Using ",(0,s.jsx)(t.code,{children:"wallet.info.rdns"})," as the key ensures that each wallet button is uniquely identified."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Uncomment the ",(0,s.jsx)(t.code,{children:"WalletList"})," component in ",(0,s.jsx)(t.code,{children:"src/App.tsx"})," and run the dapp. The following is displayed:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"View of WalletList component",src:n(99696).A+"",width:"2000",height:"1424"})}),"\n",(0,s.jsx)(t.h3,{id:"6-display-metamask-data",children:"6. Display MetaMask data"}),"\n",(0,s.jsxs)(t.p,{children:["Import the ",(0,s.jsx)(t.code,{children:"selectedWallet"})," and ",(0,s.jsx)(t.code,{children:"selectedAccount"})," functions, and the ",(0,s.jsx)(t.code,{children:"disconnectWallet"})," function\nfrom the ",(0,s.jsx)(t.code,{children:"useWalletProvider"})," hook."]}),"\n",(0,s.jsxs)(t.p,{children:["Add the following code to ",(0,s.jsx)(t.code,{children:"src/components/SelectedWallet.tsx"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="SelectedWallet.tsx" showLineNumbers',children:'import { useWalletProvider } from "~/hooks/useWalletProvider"\nimport { formatAddress } from "~/utils"\nimport styles from "./SelectedWallet.module.css"\n\nexport const SelectedWallet = () => {\n  const { selectedWallet, selectedAccount, disconnectWallet } = useWalletProvider()\n\n  return (\n    <>\n      <h2 className={styles.userAccount}>{selectedAccount ? "" : "No "}Wallet Selected</h2>\n      {selectedAccount &&\n        <>\n          <div className={styles.selectedWallet}>\n            <img src={selectedWallet.info.icon} alt={selectedWallet.info.name} />\n            <div>{selectedWallet.info.name}</div>\n            <div>({formatAddress(selectedAccount)})</div>\n            <div><strong>uuid:</strong> {selectedWallet.info.uuid}</div>\n            <div><strong>rdns:</strong> {selectedWallet.info.rdns}</div>\n          </div>\n          <button onClick={disconnectWallet}>Disconnect Wallet</button>\n        </>\n      }\n    </>\n )\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The code in lines 11-22 have conditional rendering for ",(0,s.jsx)(t.code,{children:"{selectedAccount && (...)}"}),".\nThis conditional rendering ensures that the content inside is only displayed if ",(0,s.jsx)(t.code,{children:"selectedAccount"})," is true.\nThis ensures that detailed information about the selected wallet is only displayed when an active\nwallet is connected.\nYou can then display information about the wallet, and conditionally render anything related to the following:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Wallet address"}),"\n",(0,s.jsx)(t.li,{children:"Wallet balance"}),"\n",(0,s.jsx)(t.li,{children:"Chain ID or name"}),"\n",(0,s.jsx)(t.li,{children:"Other components that first need a connected wallet to work"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["If you uncomment the ",(0,s.jsx)(t.code,{children:"SelectedWallet"})," component in ",(0,s.jsx)(t.code,{children:"src/App.tsx"}),", run the dapp and connect to\nMetaMask, the following is displayed:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"View of SelectedWallet component",src:n(70459).A+"",width:"2000",height:"1424"})}),"\n",(0,s.jsx)(t.h3,{id:"7-show-wallet-connection-errors",children:"7. Show wallet connection errors"}),"\n",(0,s.jsxs)(t.p,{children:["Add the following code to ",(0,s.jsx)(t.code,{children:"src/components/WalletError.tsx"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletError.tsx"',children:'import { useWalletProvider } from "~/hooks/useWalletProvider"\nimport styles from "./WalletError.module.css"\n\nexport const WalletError = () => {\n  const { errorMessage, clearError } = useWalletProvider()\n  const isError = !!errorMessage\n\n  return (\n    <div className={styles.walletError} style={isError ? { backgroundColor: "brown" } : {}}>\n      {isError &&\n        <div onClick={clearError}>\n          <strong>Error:</strong> {errorMessage}\n        </div>\n      }\n    </div>\n )\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.code,{children:"div"})," with the error message renders only if ",(0,s.jsx)(t.code,{children:"errorMessage"})," contains data."]}),"\n",(0,s.jsxs)(t.p,{children:["After selecting ",(0,s.jsx)(t.code,{children:"div"}),", reset ",(0,s.jsx)(t.code,{children:"errorMessage"})," to an empty string, which hides the content."]}),"\n",(0,s.jsx)(t.p,{children:"This method demonstrates how to display specific content, such as a modal or notification, in\nresponse to connection errors when connecting to a wallet."}),"\n",(0,s.jsxs)(t.p,{children:["To see the error handling, uncomment the ",(0,s.jsx)(t.code,{children:"WalletError"})," component in ",(0,s.jsx)(t.code,{children:"src/App.tsx"}),".\nThen, run the dapp, disconnect from MetaMask, reconnect, and reject or cancel the connection.\nThe following is displayed:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"View of WalletError component",src:n(94584).A+"",width:"2000",height:"1424"})}),"\n",(0,s.jsx)(t.h3,{id:"8-run-the-final-state-of-the-dapp",children:"8. Run the final state of the dapp"}),"\n",(0,s.jsxs)(t.p,{children:["Uncomment the code in ",(0,s.jsx)(t.code,{children:"App.tsx"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="App.tsx"',children:'import "./App.css"\nimport { WalletProvider } from "~/hooks/WalletProvider"\nimport { WalletList } from "./components/WalletList"\nimport { SelectedWallet } from "./components/SelectedWallet"\nimport { WalletError } from "./components/WalletError"\n\nfunction App() {\n  return (\n    <WalletProvider>\n      <WalletList />\n      <hr />\n      <SelectedWallet />\n      <WalletError />\n    </WalletProvider>\n )\n}\n\nexport default App\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Run ",(0,s.jsx)(t.code,{children:"npm run dev"})," to view the wallet list and select a wallet to connect to.\nThe final state of the dapp when connected to a MetaMask wallet will look similar to the following:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Final view of dapp",src:n(19599).A+"",width:"2000",height:"1424"})}),"\n",(0,s.jsx)(t.h3,{id:"9-test-the-dapp-features",children:"9. Test the dapp features"}),"\n",(0,s.jsx)(t.p,{children:"You can conduct user tests to evaluate the functionality and features demonstrated in this tutorial:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Test the ability to connect and disconnect from multiple wallets installed in your browser."}),"\n",(0,s.jsxs)(t.li,{children:["After selecting a wallet, refresh the page and ensure that the selected wallet persists without\nreverting to ",(0,s.jsx)(t.strong,{children:"No Wallet Selected"}),"."]}),"\n",(0,s.jsx)(t.li,{children:"Select a wallet, disable it, refresh the page, then re-enable the wallet and refresh the page again.\nObserve the behavior of the dapp."}),"\n",(0,s.jsxs)(t.li,{children:["When connecting to a wallet, deliberately cancel the connection or close the wallet prompt.\nThis action should trigger the ",(0,s.jsx)(t.code,{children:"WalletError"})," component, which can be dismissed by selecting it."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(t.p,{children:["This tutorial guided you through applying your knowledge of EIP-6963 to connect to wallets,\nspecifically MetaMask.\nThis method also works with any wallet that ",(0,s.jsx)(t.a,{href:"https://github.com/WalletConnect/EIP6963/blob/master/src/utils/constants.ts",children:"complies with\nEIP-6963"})," and supports\nmulti-injected provider discovery.\nIn this tutorial, you addressed edge cases and created a context provider that facilitates data\nsharing, manages functions for connecting and disconnecting from wallets, and handles errors.\nYou can view the ",(0,s.jsx)(t.a,{href:"https://github.com/MetaMask/vite-react-global-tutorial",children:"project source code"})," for\nthe final state of this dapp tutorial on GitHub."]})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},19365:(e,t,n)=>{n.d(t,{A:()=>o});n(96540);var s=n(18215);const l={tabItem:"tabItem_Ymn6"};var r=n(74848);function o(e){let{children:t,hidden:n,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(l.tabItem,o),hidden:n,children:t})}},11470:(e,t,n)=>{n.d(t,{A:()=>b});var s=n(96540),l=n(18215),r=n(23104),o=n(56347),i=n(205),a=n(57485),c=n(31682),d=n(70679);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:l}}=e;return{value:t,label:n,attributes:s,default:l}}))}(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function x(e){let{queryString:t=!1,groupId:n}=e;const l=(0,o.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,a.aZ)(r),(0,s.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(l.location.search);t.set(r,e),l.replace({...l.location,search:t.toString()})}),[r,l])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:l}=e,r=u(e),[o,a]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:r}))),[c,h]=x({queryString:n,groupId:l}),[m,j]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[l,r]=(0,d.Dv)(n);return[l,(0,s.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:l}),f=(()=>{const e=c??m;return p({value:e,tabValues:r})?e:null})();(0,i.A)((()=>{f&&a(f)}),[f]);return{selectedValue:o,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);a(e),h(e),j(e)}),[h,j,r]),tabValues:r}}var j=n(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(74848);function v(e){let{className:t,block:n,selectedValue:s,selectValue:o,tabValues:i}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),d=e=>{const t=e.currentTarget,n=a.indexOf(t),l=i[n].value;l!==s&&(c(t),o(l))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=a.indexOf(e.currentTarget)+1;t=a[n]??a[0];break}case"ArrowLeft":{const n=a.indexOf(e.currentTarget)-1;t=a[n]??a[a.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>a.push(e),onKeyDown:h,onClick:d,...r,className:(0,l.A)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function w(e){let{lazy:t,children:n,selectedValue:l}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===l));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==l})))})}function W(e){const t=m(e);return(0,g.jsxs)("div",{className:(0,l.A)("tabs-container",f.tabList),children:[(0,g.jsx)(v,{...t,...e}),(0,g.jsx)(w,{...t,...e})]})}function b(e){const t=(0,j.A)();return(0,g.jsx)(W,{...e,children:h(e.children)},String(t))}},19599:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/react-tutorial-02-final-preview-e928aaf154bc9a369a0af4c739973975.png"},70459:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/react-tutorial-02-selected-wallet-b113a4d4240d78b74b306d44a56519bc.png"},94584:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/react-tutorial-02-wallet-error-327006445e4296385e50aee4c1fd4bfa.png"},99696:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/react-tutorial-02-wallet-list-171994ab199334b9ed18f81f3456206a.png"},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(96540);const l={},r=s.createContext(l);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);