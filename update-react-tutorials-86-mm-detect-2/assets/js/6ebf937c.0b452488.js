"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[5690],{93592:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var l=n(74848),r=n(28453);n(11470),n(19365);const s={description:"Create a multi-component React dapp with global state using EIP-6963.",toc_max_heading_level:4,sidebar_position:2},o="Create a React dapp with global state",a={id:"tutorials/react-dapp-global-state",title:"Create a React dapp with global state",description:"Create a multi-component React dapp with global state using EIP-6963.",source:"@site/wallet/tutorials/react-dapp-global-state.md",sourceDirName:"tutorials",slug:"/tutorials/react-dapp-global-state",permalink:"/update-react-tutorials-86-mm-detect-2/wallet/tutorials/react-dapp-global-state",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/wallet/tutorials/react-dapp-global-state.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Create a multi-component React dapp with global state using EIP-6963.",toc_max_heading_level:4,sidebar_position:2},sidebar:"walletSidebar",previous:{title:"Create a React dapp with local state",permalink:"/update-react-tutorials-86-mm-detect-2/wallet/tutorials/react-dapp-local-state"},next:{title:"Create a simple dapp",permalink:"/update-react-tutorials-86-mm-detect-2/wallet/tutorials/javascript-dapp-simple"}},i={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"1. Set up the project",id:"1-set-up-the-project",level:3},{value:"1.1. Style the components",id:"11-style-the-components",level:4},{value:"1.2. Project structure",id:"12-project-structure",level:4},{value:"2. Import EIP-6963 interfaces",id:"2-import-eip-6963-interfaces",level:3},{value:"3. Build the context provider",id:"3-build-the-context-provider",level:3},{value:"4. Update the utility file",id:"4-update-the-utility-file",level:3},{value:"5. Wrap components with the context provider",id:"5-wrap-components-with-the-context-provider",level:3},{value:"6. Display detected wallets",id:"6-display-detected-wallets",level:3},{value:"7. Display wallet data",id:"7-display-wallet-data",level:3},{value:"8. Display wallet connection errors",id:"8-display-wallet-connection-errors",level:3},{value:"9. Run the final state of the dapp",id:"9-run-the-final-state-of-the-dapp",level:3},{value:"10. Test the dapp features",id:"10-test-the-dapp-features",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=t;return s||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.h1,{id:"create-a-react-dapp-with-global-state",children:"Create a React dapp with global state"}),"\n",(0,l.jsxs)(t.p,{children:["This tutorial walks you through integrating a React dapp with MetaMask.\nThe dapp has multiple components and requires managing the state globally, which can be helpful for\nreal-world use cases.\nYou'll use the ",(0,l.jsx)(t.a,{href:"https://v3.vitejs.dev/guide",children:"Vite"})," build tool with React and TypeScript to create\nthe dapp."]}),"\n",(0,l.jsx)(t.p,{children:"The final state of the dapp will look like the following:"}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.img,{alt:"React dapp with global state",src:n(19599).A+"",width:"2000",height:"1424"})}),"\n",(0,l.jsxs)(t.p,{children:["In this tutorial, you'll put the state into a ",(0,l.jsx)(t.a,{href:"https://react.dev/reference/react/useContext",children:"React\nContext"})," component, creating a ",(0,l.jsx)(t.a,{href:"https://react.dev/learn/reusing-logic-with-custom-hooks#custom-hooks-sharing-logic-between-components",children:"global\nstate"}),"\nthat allows other components and UI elements to benefit from its data and functions.\nYou'll use ",(0,l.jsx)(t.code,{children:"localStorage"})," to persist the selected wallet, ensuring the last connected wallet state\nremains intact even after a page refresh."]}),"\n",(0,l.jsxs)(t.p,{children:["This tutorial addresses the edge case where a browser wallet might be disabled or uninstalled\nbetween refreshes or visits to the dapp.\nYou'll add a disconnect function to reset the state, and use\n",(0,l.jsx)(t.a,{href:"/wallet/reference/wallet_revokePermissions",children:(0,l.jsx)(t.code,{children:"wallet_revokePermissions"})})," to properly disconnect from MetaMask."]}),"\n",(0,l.jsx)(t.admonition,{title:"Project source code",type:"info",children:(0,l.jsxs)(t.p,{children:["You can view the ",(0,l.jsx)(t.a,{href:"https://github.com/MetaMask/vite-react-global-tutorial",children:"dapp source code on GitHub"}),"."]})}),"\n",(0,l.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.a,{href:"https://nodejs.org/",children:"Node.js"})," version 18+"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.a,{href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm",children:"npm"})," version 9+"]}),"\n",(0,l.jsxs)(t.li,{children:["A text editor (for example, ",(0,l.jsx)(t.a,{href:"https://code.visualstudio.com/",children:"VS Code"}),")"]}),"\n",(0,l.jsxs)(t.li,{children:["The ",(0,l.jsx)(t.a,{href:"https://metamask.io/download",children:"MetaMask extension"})," installed"]}),"\n",(0,l.jsx)(t.li,{children:"Basic knowledge of TypeScript, React, React Context, and React Hooks"}),"\n"]}),"\n",(0,l.jsxs)(t.admonition,{type:"tip",children:[(0,l.jsxs)(t.p,{children:["We recommend following the ",(0,l.jsx)(t.a,{href:"/update-react-tutorials-86-mm-detect-2/wallet/tutorials/react-dapp-local-state",children:"Create a React dapp with local state"}),"\ntutorial first, which introduces ",(0,l.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-6963",children:"EIP-6963"}),".\nThe tutorial demonstrates how to iterate over all discovered providers, connect to the selected\nwallet, and remember the selection within a single component."]}),(0,l.jsxs)(t.p,{children:["If you skip the tutorial, consider reviewing ",(0,l.jsx)(t.a,{href:"/update-react-tutorials-86-mm-detect-2/wallet/concepts/wallet-interoperability",children:"wallet\ninteroperability"})," to understand how multiple injected wallet\nproviders work."]})]}),"\n",(0,l.jsx)(t.h2,{id:"steps",children:"Steps"}),"\n",(0,l.jsx)(t.h3,{id:"1-set-up-the-project",children:"1. Set up the project"}),"\n",(0,l.jsx)(t.p,{children:"This project introduces a new structure, independent of previous tutorials.\nInstead of reusing code or states, this tutorial guides you through breaking down the\nsingle-component structure into multiple components."}),"\n",(0,l.jsx)(t.p,{children:"Set up a new project using Vite, React, and TypeScript by running the following command:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:"npm create vite@latest vite-react-global-state -- --template react-ts\n"})}),"\n",(0,l.jsx)(t.p,{children:"Install the node module dependencies:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:"cd vite-react-global-state && npm install\n"})}),"\n",(0,l.jsx)(t.p,{children:"Launch the development server:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,l.jsxs)(t.p,{children:["This displays a ",(0,l.jsx)(t.code,{children:"localhost"})," URL in your terminal, where you can view the dapp in your browser."]}),"\n",(0,l.jsx)(t.admonition,{type:"note",children:(0,l.jsxs)(t.p,{children:["If you use VS Code, you can run the command ",(0,l.jsx)(t.code,{children:"code ."})," to open the project.\nIf the development server has stopped, you can run the command ",(0,l.jsx)(t.code,{children:"npx vite"})," or ",(0,l.jsx)(t.code,{children:"npm run dev"})," to\nrestart your project."]})}),"\n",(0,l.jsxs)(t.p,{children:["Open the project in your editor.\nCreate three directories, ",(0,l.jsx)(t.code,{children:"src/components"}),", ",(0,l.jsx)(t.code,{children:"src/hooks"}),", and ",(0,l.jsx)(t.code,{children:"src/utils"}),", in the root of the project\nusing the following commands:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:"mkdir src/components && mkdir src/hooks && mkdir src/utils\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Create the following files in ",(0,l.jsx)(t.code,{children:"src/components"}),", which will be used to create components for listing\ninstalled wallets, displaying connected wallet information, and handling errors:"]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:(0,l.jsx)(t.code,{children:"WalletList.tsx"})}),"\n",(0,l.jsx)(t.li,{children:(0,l.jsx)(t.code,{children:"WalletList.module.css"})}),"\n",(0,l.jsx)(t.li,{children:(0,l.jsx)(t.code,{children:"SelectedWallet.tsx"})}),"\n",(0,l.jsx)(t.li,{children:(0,l.jsx)(t.code,{children:"SelectedWallet.module.css"})}),"\n",(0,l.jsx)(t.li,{children:(0,l.jsx)(t.code,{children:"WalletError.tsx"})}),"\n",(0,l.jsx)(t.li,{children:(0,l.jsx)(t.code,{children:"WalletError.module.css"})}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["Create the following files in ",(0,l.jsx)(t.code,{children:"src/hooks"}),":"]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:(0,l.jsx)(t.code,{children:"Eip6963Provider.tsx"})}),"\n",(0,l.jsx)(t.li,{children:(0,l.jsx)(t.code,{children:"useEip6963Provider.tsx"})}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["Create the following file in ",(0,l.jsx)(t.code,{children:"src/utils"}),":"]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:(0,l.jsx)(t.code,{children:"index.ts"})}),"\n"]}),"\n",(0,l.jsx)(t.h4,{id:"11-style-the-components",children:"1.1. Style the components"}),"\n",(0,l.jsxs)(t.p,{children:["Add the following CSS code to ",(0,l.jsx)(t.code,{children:"SelectedWallet.module.css"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-css",metastring:'title="SelectedWallet.module.css"',children:".selectedWallet {\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: flex-start;\n\n  padding: 0.6em 1.2em;\n  margin-bottom: 0.5em;\n\n  font-family: inherit;\n  font-size: 1em;\n  font-weight: 500;\n}\n.selectedWallet > img {\n  width: 2em;\n  height: 1.5em;\n  margin-right: 1em;\n}\n\n.providers {\n  display: flex;\n  flex-flow: column wrap;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n\n  padding: 0.6em 1.2em;\n}\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Add the following CSS code to ",(0,l.jsx)(t.code,{children:"WalletError.module.css"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-css",metastring:'title="WalletError.module.css"',children:".walletError {\n  margin-top: 1em;\n  border-radius: 0.5em;\n  height: 36px;\n  padding: 16px;\n  color: #EFEFEF;\n  background-color: transparent;\n  user-select: none;\n}\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Add the following CSS code to ",(0,l.jsx)(t.code,{children:"WalletList.module.css"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-css",metastring:'title="WalletList.module.css"',children:".walletList {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Append the following code to the end of ",(0,l.jsx)(t.code,{children:"src/index.css"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-css",metastring:'title="index.css"',children:"/* Added CSS */\n:root {\n  text-align: left;\n}\n\nhr {\n  margin-top: 2em;\n  height: 1px;\n}\n\nbutton {\n  min-width: 12em;\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: flex-start;\n\n  align-items: center;\n  border-radius: 0.5em;\n  margin-bottom: 0.5em;\n  border: 1px solid transparent;\n}\n\nbutton > img {\n  width: 1.5em;\n  height: 1.5em;\n  margin-right: 1em;\n}\n\nbutton:hover {\n  border-color: #75079d;\n}\n\nbutton:first-child {\n  margin-top: 0.5em;\n}\nbutton:last-child {\n  margin-bottom: 0;\n}\n"})}),"\n",(0,l.jsx)(t.h4,{id:"12-project-structure",children:"1.2. Project structure"}),"\n",(0,l.jsxs)(t.p,{children:["You now have some basic global and component-level styling for your dapp.\nThe directory structure in the dapp's ",(0,l.jsx)(t.code,{children:"/src"})," directory should look like the following:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-text",children:"\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 components\n\u2502   \u2502   \u251c\u2500\u2500  SelectedWallet.module.css\n\u2502   \u2502   \u251c\u2500\u2500  SelectedWallet.tsx\n\u2502   \u2502   \u251c\u2500\u2500  WalletError.module.css\n\u2502   \u2502   \u251c\u2500\u2500  WalletError.tsx\n\u2502   \u2502   \u251c\u2500\u2500  WalletList.module.css\n\u2502   \u2502   \u2514\u2500\u2500  WalletList.tsx\n\u2502   \u251c\u2500\u2500 hooks\n\u2502   \u2502   \u251c\u2500\u2500 WalletProvider.tsx\n\u2502   \u2502   \u2514\u2500\u2500 useWalletProvider.tsx\n\u2502   \u251c\u2500\u2500 utils\n\u2502   \u2502   \u2514\u2500\u2500 index.tsx\n\u251c\u2500\u2500 App.css\n\u251c\u2500\u2500 App.tsx\n\u251c\u2500\u2500 index.css\n\u251c\u2500\u2500 main.tsx\n\u251c\u2500\u2500 vite-env.d.ts\n"})}),"\n",(0,l.jsx)(t.h3,{id:"2-import-eip-6963-interfaces",children:"2. Import EIP-6963 interfaces"}),"\n",(0,l.jsxs)(t.p,{children:["The dapp will connect to MetaMask using the mechanism introduced by\n",(0,l.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-6963",children:"EIP-6963"}),"."]}),"\n",(0,l.jsx)(t.admonition,{title:"Why EIP-6963?",type:"info",children:(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-6963",children:"EIP-6963"})," introduces an alternative wallet detection\nmechanism to the ",(0,l.jsx)(t.code,{children:"window.ethereum"})," injected provider.\nThis alternative mechanism enables dapps to support\n",(0,l.jsx)(t.a,{href:"/update-react-tutorials-86-mm-detect-2/wallet/concepts/wallet-interoperability",children:"wallet interoperability"})," by discovering multiple injected\nwallet providers in a user's browser."]})}),"\n",(0,l.jsxs)(t.p,{children:["Update the Vite environment variable file, ",(0,l.jsx)(t.code,{children:"src/vite-env.d.ts"}),", with the types and interfaces\nneeded for ",(0,l.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-6963",children:"EIP-6963"})," and\n",(0,l.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-1193",children:"EIP-1193"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-tsx",metastring:'title="vite-env.d.ts"',children:'/// <reference types="vite/client" />\n\n// Describes metadata related to a provider based on EIP-6963.\ninterface EIP6963ProviderInfo {\n  rdns: string\n  uuid: string\n  name: string\n  icon: string\n}\n\n// Represents the structure of a provider based on EIP-1193.\ninterface EIP1193Provider {\n  isStatus?: boolean\n  host?: string\n  path?: string\n  sendAsync?: (request: { method: string, params?: Array<unknown> }, callback: (error: Error | null, response: unknown) => void) => void\n  send?: (request: { method: string, params?: Array<unknown> }, callback: (error: Error | null, response: unknown) => void) => void\n  request: (request: { method: string, params?: Array<unknown> }) => Promise<unknown>\n}\n\n// Combines the provider\'s metadata with an actual provider object, creating a complete picture of a\n// wallet provider at a glance.\ninterface EIP6963ProviderDetail {\n  info: EIP6963ProviderInfo\n  provider: EIP1193Provider\n}\n\n// Represents the structure of an event dispatched by a wallet to announce its presence based on EIP-6963.\ntype EIP6963AnnounceProviderEvent = {\n  detail:{\n    info: EIP6963ProviderInfo,\n    provider: Readonly<EIP1193Provider>\n }\n}\n\n// An error object with optional properties, commonly encountered when handling eth_requestAccounts errors.\ninterface WalletError {\n  code?: string\n  message?: string\n}\n'})}),"\n",(0,l.jsx)(t.h3,{id:"3-build-the-context-provider",children:"3. Build the context provider"}),"\n",(0,l.jsx)(t.p,{children:"In this step, you'll create the React Context component, which wraps the dapp and provides all\ncomponents access to the state and functions required to modify the state and manage connections to\ndiscovered wallets."}),"\n",(0,l.jsxs)(t.p,{children:["Add the following code to ",(0,l.jsx)(t.code,{children:"src/hooks/WalletProvider.tsx"})," to import the context, define the\ntype alias, and define the context interface for the EIP-6963 provider:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletProvider.tsx"',children:'import { PropsWithChildren, createContext, useCallback, useEffect, useState } from "react"\n\n// Type alias for a record where the keys are wallet identifiers and the values are account\n// addresses or null.\ntype SelectedAccountByWallet = Record<string, string | null>\n\n// Context interface for the EIP-6963 provider.\ninterface WalletProviderContext {\n  wallets: Record<string, EIP6963ProviderDetail> // A list of wallets.\n  selectedWallet: EIP6963ProviderDetail | null // The selected wallet.\n  selectedAccount: string | null // The selected account address.\n  errorMessage: string | null // An error message.\n  connectWallet: (walletUuid: string) => Promise<void> // Function to connect wallets.\n  disconnectWallet: () => void // Function to disconnect wallets.\n  clearError: () => void\n}\n'})}),"\n",(0,l.jsxs)(t.p,{children:["Add the following code to ",(0,l.jsx)(t.code,{children:"src/hooks/WalletProvider.tsx"})," to extend the global ",(0,l.jsx)(t.code,{children:"WindowEventMap"}),"\ninterface with the custom ",(0,l.jsx)(t.code,{children:"eip6963:announceProvider"})," event:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletProvider.tsx"',children:'declare global{\n  interface WindowEventMap {\n    "eip6963:announceProvider": CustomEvent\n  }\n}\n'})}),"\n",(0,l.jsxs)(t.p,{children:["Explicitly declaring the custom ",(0,l.jsx)(t.code,{children:"eip6963:announceProvider"})," event prevents type errors, enables\nproper type checking, and supports autocompletion in TypeScript."]}),"\n",(0,l.jsxs)(t.p,{children:["Add the following code to ",(0,l.jsx)(t.code,{children:"src/hooks/WalletProvider.tsx"})," to create the React Context for the\nEIP-6963 provider with the defined interface ",(0,l.jsx)(t.code,{children:"WalletProviderContext"}),", and define the\n",(0,l.jsx)(t.code,{children:"WalletProvider"})," component:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletProvider.tsx" showLineNumbers {6-12,14}',children:'export const WalletProviderContext = createContext<WalletProviderContext>(null)\n\n// The WalletProvider component wraps all other components in the dapp, providing them with the\n// necessary data and functions related to wallets.\nexport const WalletProvider: React.FC<PropsWithChildren> = ({ children }) => {\n  const [wallets, setWallets] = useState<Record<string, EIP6963ProviderDetail>>({})\n  const [selectedWalletRdns, setSelectedWalletRdns] = useState<string | null>(null)\n  const [selectedAccountByWalletRdns, setSelectedAccountByWalletRdns] = useState<SelectedAccountByWallet>({})\n\n  const [errorMessage, setErrorMessage] = useState("")\n  const clearError = () => setErrorMessage("")\n  const setError = (error: string) => setErrorMessage(error)\n\n  useEffect(() => {\n    const savedSelectedWalletRdns = localStorage.getItem("selectedWalletRdns")\n    const savedSelectedAccountByWalletRdns = localStorage.getItem("selectedAccountByWalletRdns")\n\n    if (savedSelectedAccountByWalletRdns) {\n      setSelectedAccountByWalletRdns(JSON.parse(savedSelectedAccountByWalletRdns))\n    }\n\n    function onAnnouncement(event: EIP6963AnnounceProviderEvent){\n      setWallets(currentWallets => ({\n        ...currentWallets,\n        [event.detail.info.rdns]: event.detail\n      }))\n\n      if (savedSelectedWalletRdns && event.detail.info.rdns === savedSelectedWalletRdns) {\n        setSelectedWalletRdns(savedSelectedWalletRdns)\n      }\n    }\n\n    window.addEventListener("eip6963:announceProvider", onAnnouncement)\n    window.dispatchEvent(new Event("eip6963:requestProvider"))\n    \n    return () => window.removeEventListener("eip6963:announceProvider", onAnnouncement)\n  }, [])\n'})}),"\n",(0,l.jsx)(t.p,{children:"In this code sample, lines 6\u201312 are state definitions:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"wallets"})," - State to hold detected wallets."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"selectedWalletRdns"})," - State to hold the Reverse Domain Name System (RDNS) of the selected wallet."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"selectedAccountByWalletRdns"})," - State to hold accounts associated with each wallet."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"errorMessage"})," - State to hold the error message when a wallet throws an error on connection."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"clearError"})," - Function to clear the state in ",(0,l.jsx)(t.code,{children:"errorMessage"}),"."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"setError"})," - Function to set the state in ",(0,l.jsx)(t.code,{children:"errorMessage"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["Line 14 is the ",(0,l.jsx)(t.code,{children:"useEffect"})," hook and it handles the following:"]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Local storage retrieval - On mount, it retrieves the saved selected wallet and accounts from local storage."}),"\n",(0,l.jsxs)(t.li,{children:["Event listener - It adds an event listener for the custom ",(0,l.jsx)(t.code,{children:"eip6963:announceProvider"})," event."]}),"\n",(0,l.jsx)(t.li,{children:"State update - When the provider announces itself, it updates the state."}),"\n",(0,l.jsx)(t.li,{children:"Provider request - It dispatches an event to request existing providers."}),"\n",(0,l.jsx)(t.li,{children:"Cleanup - It removes the event listener on unmount."}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["Add the following code to ",(0,l.jsx)(t.code,{children:"src/hooks/WalletProvider.tsx"})," to connect a wallet and update the component's state:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletProvider.tsx"',children:'const connectWallet = useCallback(async (walletRdns: string) => {\n  try {\n    const wallet = wallets[walletRdns]\n    const accounts = await wallet.provider.request({method:"eth_requestAccounts"}) as string[]\n\n    if(accounts?.[0]) {\n      setSelectedWalletRdns(wallet.info.rdns)\n      setSelectedAccountByWalletRdns((currentAccounts) => ({\n        ...currentAccounts,\n        [wallet.info.rdns]: accounts[0],\n      }))\n\n      localStorage.setItem("selectedWalletRdns", wallet.info.rdns)\n      localStorage.setItem("selectedAccountByWalletRdns", JSON.stringify({\n        ...selectedAccountByWalletRdns,\n        [wallet.info.rdns]: accounts[0],\n      }))\n    }\n  } catch (error) {\n    console.error("Failed to connect to provider:", error)\n    const walletError: WalletError = error as WalletError\n    setError(`Code: ${walletError.code} \\nError Message: ${walletError.message}`)\n  }\n}, [wallets, selectedAccountByWalletRdns])\n'})}),"\n",(0,l.jsxs)(t.p,{children:["This code uses the ",(0,l.jsx)(t.code,{children:"walletRdns"})," parameter to identify the wallet's RDNS for connecting.\nIt performs an asynchronous operation to request accounts from the wallet provider using the\n",(0,l.jsx)(t.a,{href:"/wallet/reference/eth_requestaccounts",children:(0,l.jsx)(t.code,{children:"eth_requestAccounts"})})," RPC method."]}),"\n",(0,l.jsxs)(t.p,{children:["Add the following code to ",(0,l.jsx)(t.code,{children:"src/hooks/WalletProvider.tsx"})," to disconnect from a wallet:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletProvider.tsx"',children:'const disconnectWallet = useCallback(async () => {\n  if (selectedWalletRdns) {\n    setSelectedAccountByWalletRdns((currentAccounts) => ({\n      ...currentAccounts,\n      [selectedWalletRdns]: null,\n    }))\n\n    const wallet = wallets[selectedWalletRdns];\n    setSelectedWalletRdns(null)\n    localStorage.removeItem("selectedWalletRdns")\n\n    try {\n      await wallet.provider.request({\n        method: "wallet_revokePermissions",\n        params: [{ "eth_accounts": {} }]\n      });\n    } catch (error) {\n      console.error("Failed to revoke permissions:", error);\n    }\n  }\n}, [selectedWalletRdns, wallets])\n'})}),"\n",(0,l.jsx)(t.admonition,{title:"important",type:"caution",children:(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.a,{href:"/wallet/reference/wallet_revokePermissions",children:(0,l.jsx)(t.code,{children:"wallet_revokePermission"})})," is an experimental RPC\nmethod that might only work with MetaMask.\nConfiguring the revocation in a try/catch block and separating it from the rest of the cleanup\nensures that if a wallet does not support this feature, the rest of the disconnect functionality\nwill still execute."]})}),"\n",(0,l.jsxs)(s,{children:[(0,l.jsx)("summary",{children:(0,l.jsxs)("b",{children:["Use of ",(0,l.jsx)(t.code,{children:"useCallback"})]})}),(0,l.jsxs)("p",{children:[(0,l.jsxs)(t.p,{children:["Both of the previous functions use ",(0,l.jsx)(t.code,{children:"useCallback"}),".\nIt is used to memoize the ",(0,l.jsx)(t.code,{children:"connectWallet"})," function, optimize performance, and prevent unnecessary re-renders.\nIt ensures the function instance remains consistent between renders if its dependencies are changed."]}),(0,l.jsxs)(t.p,{children:["For example, when using ",(0,l.jsx)(t.code,{children:"disconnectWallet"}),", each time the ",(0,l.jsx)(t.code,{children:"WalletProvider"})," component re-renders\nwithout ",(0,l.jsx)(t.code,{children:"useCallback"}),", a new instance of ",(0,l.jsx)(t.code,{children:"disconnectWallet"})," is created.\nThis can cause unnecessary re-renders of child components that depend on this function.\nBy memoizing it with ",(0,l.jsx)(t.code,{children:"useCallback"}),", React keeps the function instance consistent between renders, as\nlong as its dependencies (wallets and ",(0,l.jsx)(t.code,{children:"selectedWalletRdns"}),") haven't changed, preventing unnecessary\nre-renders of child components."]}),(0,l.jsxs)(t.p,{children:["Although ",(0,l.jsx)(t.code,{children:"useCallback"})," is not strictly necessary, it demonstrates best practices.\nPredicting how a context provider will be used or how the dapp might change or scale is difficult.\nUsing ",(0,l.jsx)(t.code,{children:"useCallback"})," can improve performance in some cases by reducing unnecessary re-renders."]})]})]}),"\n",(0,l.jsxs)(t.p,{children:["Add the following code to ",(0,l.jsx)(t.code,{children:"src/hooks/WalletProvider.tsx"})," to bundle the state and functions using ",(0,l.jsx)(t.code,{children:"contextValue"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletProvider.tsx"',children:"const contextValue: WalletProviderContext = {\n  wallets,\n  selectedWallet: selectedWalletRdns === null ? null : wallets[selectedWalletRdns],\n  selectedAccount: selectedWalletRdns === null ? null : selectedAccountByWalletRdns[selectedWalletRdns],\n  errorMessage,\n  connectWallet,\n  disconnectWallet,\n  clearError,\n}\n\nreturn (\n <WalletProviderContext.Provider value={contextValue}>\n   {children}\n </WalletProviderContext.Provider>\n)\n"})}),"\n",(0,l.jsxs)(t.p,{children:["In the return statement, the ",(0,l.jsx)(t.code,{children:"contextValue"})," object is constructed with all necessary state and\nfunctions related to wallet management.\nIt is passed to the ",(0,l.jsx)(t.code,{children:"WalletProviderContext.Provider"}),", making wallet-related data and functions\navailable to all descendant components.\nThe context provider wraps the children components, allowing them to access the context values."]}),"\n",(0,l.jsxs)(t.p,{children:["Add the following code to ",(0,l.jsx)(t.code,{children:"src/hooks/useWalletProvider.tsx"})," to provide a custom hook that simplifies\nthe process of consuming the ",(0,l.jsx)(t.code,{children:"WalletProviderContext"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-tsx",metastring:'title="useWalletProvider.tsx"',children:'import { useContext } from "react"\nimport { WalletProviderContext } from "./WalletProvider"\n\nexport const useWalletProvider = () => useContext(WalletProviderContext)\n'})}),"\n",(0,l.jsxs)(t.p,{children:["The benefit of this separate file exporting the hook is that components can directly call\n",(0,l.jsx)(t.code,{children:"useWalletProvider()"})," instead of ",(0,l.jsx)(t.code,{children:"useContext(WalletProviderContext)"}),", making the code cleaner and\nmore readable."]}),"\n",(0,l.jsx)(t.h3,{id:"4-update-the-utility-file",children:"4. Update the utility file"}),"\n",(0,l.jsxs)(t.p,{children:["Add the following code to ",(0,l.jsx)(t.code,{children:"src/utils/index.ts"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",metastring:'title="index.ts"',children:"export const formatBalance = (rawBalance: string) => {\n  const balance = (parseInt(rawBalance) / 1000000000000000000).toFixed(2)\n  return balance\n}\n\nexport const formatChainAsNum = (chainIdHex: string) => {\n  const chainIdNum = parseInt(chainIdHex)\n  return chainIdNum\n}\n\nexport const formatAddress = (addr: string) => {\n  const upperAfterLastTwo = addr.slice(0,2) + addr.slice(2)\n  return `${upperAfterLastTwo.substring(0, 5)}...${upperAfterLastTwo.substring(39)}`\n}\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Although ",(0,l.jsx)(t.code,{children:"formatAddress"})," is the only function used, ",(0,l.jsx)(t.code,{children:"formatBalance"})," and ",(0,l.jsx)(t.code,{children:"formatChainAsNum"})," are\nadded as useful utility functions.\nExplore ",(0,l.jsx)(t.a,{href:"https://viem.sh/docs/chains/formatters",children:"Viem formatters"})," or other libraries for additional\nformatting options."]}),"\n",(0,l.jsx)(t.h3,{id:"5-wrap-components-with-the-context-provider",children:"5. Wrap components with the context provider"}),"\n",(0,l.jsxs)(t.p,{children:["With ",(0,l.jsx)(t.code,{children:"WalletProvider.tsx"})," and ",(0,l.jsx)(t.code,{children:"useWalletProvider.tsx"}),", the dapp can manage and access wallet-related\nstate and functionality across various components.\nYou can now wrap the entire dapp (the part that requires wallet connection and data) with a\n",(0,l.jsx)(t.code,{children:"WalletProvider"})," component.\nReplace the code in ",(0,l.jsx)(t.code,{children:"src/App.tsx"})," with the following:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-tsx",metastring:'title="App.tsx"',children:'import "./App.css"\nimport { WalletProvider } from "~/hooks/WalletProvider"\n// import { WalletList } from "./components/WalletList"\n// import { SelectedWallet } from "./components/SelectedWallet"\n// import { WalletError } from "./components/WalletError"\n\nfunction App() {\n  return (\n    <WalletProvider>\n    {/* \n      <WalletList />\n      <hr />\n      <SelectedWallet />\n      <WalletError /> \n    */}\n    </WalletProvider>\n )\n}\n\nexport default App\n'})}),"\n",(0,l.jsx)(t.p,{children:"The child components are currently commented out, but as you create each of these components, you'll\nuncomment the specific lines."}),"\n",(0,l.jsx)(t.h3,{id:"6-display-detected-wallets",children:"6. Display detected wallets"}),"\n",(0,l.jsxs)(t.p,{children:["Add the following code to ",(0,l.jsx)(t.code,{children:"src/components/WalletList.tsx"})," to display detected wallets:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletList.tsx"',children:'import { useWalletProvider } from "~/hooks/useWalletProvider"\nimport styles from "./WalletList.module.css"\n\nexport const WalletList = () => {\n  const { wallets, connectWallet } = useWalletProvider()\n  return (\n    <>\n      <h2>Wallets Detected:</h2>\n      <div className={styles.walletList}>\n        {\n          Object.keys(wallets).length > 0 \n            ? Object.values(wallets).map((provider: EIP6963ProviderDetail) => (\n              <button key={provider.info.uuid} onClick={() => connectWallet(provider.info.rdns)}>\n                <img src={provider.info.icon} alt={provider.info.name} />\n                <div>{provider.info.name}</div>\n              </button>\n            )) \n            : <div>there are no Announced Providers</div>\n        }\n      </div>\n    </>\n )\n}\n'})}),"\n",(0,l.jsx)(t.p,{children:"This component checks if there are any detected wallets.\nIf wallets are detected, it iterates over them and renders a button for each one."}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"Object.keys(wallets)"})," returns an array of the wallet keys (",(0,l.jsx)(t.code,{children:"rdns"})," values).\nIt is used to check the length."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"Object.values(wallets)"})," returns an array of the wallet objects.\nIt is used to map and render."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"wallet.info.rdns"})," is used as the key to ensure that each wallet button is uniquely identified."]}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["Uncomment the ",(0,l.jsx)(t.code,{children:"WalletList"})," component in ",(0,l.jsx)(t.code,{children:"src/App.tsx"})," and run the dapp.\nSomething like the following displays:"]}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.img,{alt:"View of WalletList component",src:n(99696).A+"",width:"2000",height:"1424"})}),"\n",(0,l.jsx)(t.h3,{id:"7-display-wallet-data",children:"7. Display wallet data"}),"\n",(0,l.jsxs)(t.p,{children:["Add the following code to ",(0,l.jsx)(t.code,{children:"src/components/SelectedWallet.tsx"})," to display data for the selected wallet:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-tsx",metastring:'title="SelectedWallet.tsx" showLineNumbers {11-22}',children:'import { useWalletProvider } from "~/hooks/useWalletProvider"\nimport { formatAddress } from "~/utils"\nimport styles from "./SelectedWallet.module.css"\n\nexport const SelectedWallet = () => {\n  const { selectedWallet, selectedAccount, disconnectWallet } = useWalletProvider()\n\n  return (\n    <>\n      <h2 className={styles.userAccount}>{selectedAccount ? "" : "No "}Wallet Selected</h2>\n      {selectedAccount &&\n        <>\n          <div className={styles.selectedWallet}>\n            <img src={selectedWallet.info.icon} alt={selectedWallet.info.name} />\n            <div>{selectedWallet.info.name}</div>\n            <div>({formatAddress(selectedAccount)})</div>\n            <div><strong>uuid:</strong> {selectedWallet.info.uuid}</div>\n            <div><strong>rdns:</strong> {selectedWallet.info.rdns}</div>\n          </div>\n          <button onClick={disconnectWallet}>Disconnect Wallet</button>\n        </>\n      }\n    </>\n )\n}\n'})}),"\n",(0,l.jsxs)(t.p,{children:["The code in lines 11-22 have conditional rendering, ensuring that the content inside is only\ndisplayed if ",(0,l.jsx)(t.code,{children:"selectedAccount"})," is true.\nThis ensures that detailed information about the selected wallet is only displayed when an active\nwallet is connected.\nYou can display information about the wallet, and conditionally render anything related to the following:"]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Wallet address"}),"\n",(0,l.jsx)(t.li,{children:"Wallet balance"}),"\n",(0,l.jsx)(t.li,{children:"Chain ID or name"}),"\n",(0,l.jsx)(t.li,{children:"Other components that first need a connected wallet to work"}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["Uncomment the ",(0,l.jsx)(t.code,{children:"SelectedWallet"})," component in ",(0,l.jsx)(t.code,{children:"src/App.tsx"})," and run the dapp.\nWhen you connect to MetaMask, something like the following displays:"]}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.img,{alt:"View of SelectedWallet component",src:n(70459).A+"",width:"2000",height:"1424"})}),"\n",(0,l.jsx)(t.h3,{id:"8-display-wallet-connection-errors",children:"8. Display wallet connection errors"}),"\n",(0,l.jsxs)(t.p,{children:["Add the following code to ",(0,l.jsx)(t.code,{children:"src/components/WalletError.tsx"})," to handle wallet connection errors:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-tsx",metastring:'title="WalletError.tsx"',children:'import { useWalletProvider } from "~/hooks/useWalletProvider"\nimport styles from "./WalletError.module.css"\n\nexport const WalletError = () => {\n  const { errorMessage, clearError } = useWalletProvider()\n  const isError = !!errorMessage\n\n  return (\n    <div className={styles.walletError} style={isError ? { backgroundColor: "brown" } : {}}>\n      {isError &&\n        <div onClick={clearError}>\n          <strong>Error:</strong> {errorMessage}\n        </div>\n      }\n    </div>\n )\n}\n'})}),"\n",(0,l.jsxs)(t.p,{children:["An error message renders only if ",(0,l.jsx)(t.code,{children:"errorMessage"})," contains data.\nAfter the error is selected, ",(0,l.jsx)(t.code,{children:"errorMessage"})," resets to an empty string, which hides the content."]}),"\n",(0,l.jsx)(t.p,{children:"This method demonstrates how to display specific content, such as a modal or notification, in\nresponse to connection errors when connecting to a wallet."}),"\n",(0,l.jsxs)(t.p,{children:["Uncomment the ",(0,l.jsx)(t.code,{children:"WalletError"})," component in ",(0,l.jsx)(t.code,{children:"src/App.tsx"})," and run the dapp.\nDisconnect from MetaMask, reconnect, and reject or cancel the connection.\nSomething like the following displays:"]}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.img,{alt:"View of WalletError component",src:n(94584).A+"",width:"2000",height:"1424"})}),"\n",(0,l.jsx)(t.h3,{id:"9-run-the-final-state-of-the-dapp",children:"9. Run the final state of the dapp"}),"\n",(0,l.jsxs)(t.p,{children:["Make sure all code in ",(0,l.jsx)(t.code,{children:"App.tsx"})," is uncommented:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-tsx",metastring:'title="App.tsx"',children:'import "./App.css"\nimport { WalletProvider } from "~/hooks/WalletProvider"\nimport { WalletList } from "./components/WalletList"\nimport { SelectedWallet } from "./components/SelectedWallet"\nimport { WalletError } from "./components/WalletError"\n\nfunction App() {\n  return (\n    <WalletProvider>\n      <WalletList />\n      <hr />\n      <SelectedWallet />\n      <WalletError />\n    </WalletProvider>\n )\n}\n\nexport default App\n'})}),"\n",(0,l.jsx)(t.p,{children:"Run the dapp to view the wallet list and select a wallet to connect to.\nThe final state of the dapp when connected to MetaMask looks like the following:"}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.img,{alt:"Final view of dapp",src:n(19599).A+"",width:"2000",height:"1424"})}),"\n",(0,l.jsx)(t.h3,{id:"10-test-the-dapp-features",children:"10. Test the dapp features"}),"\n",(0,l.jsx)(t.p,{children:"You can conduct user tests to evaluate the functionality and features demonstrated in this tutorial:"}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsx)(t.li,{children:"Test the ability to connect and disconnect from multiple wallets installed in your browser."}),"\n",(0,l.jsxs)(t.li,{children:["After selecting a wallet, refresh the page and ensure that the selected wallet persists without\nreverting to ",(0,l.jsx)(t.strong,{children:"No Wallet Selected"}),"."]}),"\n",(0,l.jsx)(t.li,{children:"Select a wallet, disable it, refresh the page, then re-enable the wallet and refresh the page again.\nObserve the behavior of the dapp."}),"\n",(0,l.jsxs)(t.li,{children:["When connecting to a wallet, deliberately cancel the connection or close the wallet prompt.\nThis action should trigger the ",(0,l.jsx)(t.code,{children:"WalletError"})," component, which you can dismiss by selecting it."]}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,l.jsxs)(t.p,{children:["This tutorial guided you through applying EIP-6963 to connect to MetaMask.\nThis method also works with any wallet that ",(0,l.jsx)(t.a,{href:"https://github.com/WalletConnect/EIP6963/blob/master/src/utils/constants.ts",children:"complies with\nEIP-6963"})," and supports\nmulti-injected provider discovery."]}),"\n",(0,l.jsxs)(t.p,{children:["In this tutorial, you addressed edge cases and created a context provider that facilitates data\nsharing, manages functions for connecting and disconnecting from wallets, and handles errors.\nYou can view the ",(0,l.jsx)(t.a,{href:"https://github.com/MetaMask/vite-react-global-tutorial",children:"project source code on GitHub"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},19365:(e,t,n)=>{n.d(t,{A:()=>o});n(96540);var l=n(18215);const r={tabItem:"tabItem_Ymn6"};var s=n(74848);function o(e){let{children:t,hidden:n,className:o}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,l.A)(r.tabItem,o),hidden:n,children:t})}},11470:(e,t,n)=>{n.d(t,{A:()=>y});var l=n(96540),r=n(18215),s=n(23104),o=n(56347),a=n(205),i=n(57485),c=n(31682),d=n(70679);function h(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:t,children:n}=e;return(0,l.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:n,attributes:l,default:r}}=e;return{value:t,label:n,attributes:l,default:r}}))}(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i.aZ)(s),(0,l.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(r.location.search);t.set(s,e),r.replace({...r.location,search:t.toString()})}),[s,r])]}function x(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,s=u(e),[o,i]=(0,l.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const l=n.find((e=>e.default))??n[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:t,tabValues:s}))),[c,h]=m({queryString:n,groupId:r}),[x,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,s]=(0,d.Dv)(n);return[r,(0,l.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:r}),g=(()=>{const e=c??x;return p({value:e,tabValues:s})?e:null})();(0,a.A)((()=>{g&&i(g)}),[g]);return{selectedValue:o,selectValue:(0,l.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),h(e),f(e)}),[h,f,s]),tabValues:s}}var f=n(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=n(74848);function v(e){let{className:t,block:n,selectedValue:l,selectValue:o,tabValues:a}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),d=e=>{const t=e.currentTarget,n=i.indexOf(t),r=a[n].value;r!==l&&(c(t),o(r))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t),children:a.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,ref:e=>i.push(e),onKeyDown:h,onClick:d,...s,className:(0,r.A)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":l===t}),children:n??t},t)}))})}function w(e){let{lazy:t,children:n,selectedValue:r}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===r));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function b(e){const t=x(e);return(0,j.jsxs)("div",{className:(0,r.A)("tabs-container",g.tabList),children:[(0,j.jsx)(v,{...t,...e}),(0,j.jsx)(w,{...t,...e})]})}function y(e){const t=(0,f.A)();return(0,j.jsx)(b,{...e,children:h(e.children)},String(t))}},19599:(e,t,n)=>{n.d(t,{A:()=>l});const l=n.p+"assets/images/react-tutorial-02-final-preview-e928aaf154bc9a369a0af4c739973975.png"},70459:(e,t,n)=>{n.d(t,{A:()=>l});const l=n.p+"assets/images/react-tutorial-02-selected-wallet-b113a4d4240d78b74b306d44a56519bc.png"},94584:(e,t,n)=>{n.d(t,{A:()=>l});const l=n.p+"assets/images/react-tutorial-02-wallet-error-327006445e4296385e50aee4c1fd4bfa.png"},99696:(e,t,n)=>{n.d(t,{A:()=>l});const l=n.p+"assets/images/react-tutorial-02-wallet-list-171994ab199334b9ed18f81f3456206a.png"},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var l=n(96540);const r={},s=l.createContext(r);function o(e){const t=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),l.createElement(s.Provider,{value:t},e.children)}}}]);