"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[3523],{88280:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>w,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var r=n(74848),o=n(28453);const a={description:"Detect a user's network and network changes.",sidebar_position:1},s="Detect a user's network",c={id:"how-to/manage-networks/detect-network",title:"Detect a user's network",description:"Detect a user's network and network changes.",source:"@site/wallet/how-to/manage-networks/detect-network.md",sourceDirName:"how-to/manage-networks",slug:"/how-to/manage-networks/detect-network",permalink:"/feat-reference-req/wallet/how-to/manage-networks/detect-network",draft:!1,unlisted:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/wallet/how-to/manage-networks/detect-network.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Detect a user's network and network changes.",sidebar_position:1},sidebar:"walletSidebar",previous:{title:"Manage networks",permalink:"/feat-reference-req/wallet/how-to/manage-networks"},next:{title:"Add a network",permalink:"/feat-reference-req/wallet/how-to/manage-networks/add-network"}},i={},d=[];function h(e){const t={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"detect-a-users-network",children:"Detect a user's network"}),"\n",(0,r.jsx)(t.p,{children:"It's important to keep track of the user's network chain ID because all RPC requests are submitted\nto the currently connected network."}),"\n",(0,r.jsxs)(t.p,{children:["Use the ",(0,r.jsx)(t.a,{href:"/wallet/reference/eth_chainId",children:(0,r.jsx)(t.code,{children:"eth_chainId"})}),"\nRPC method to detect the chain ID of the user's current network.\nListen to the ",(0,r.jsx)(t.a,{href:"/feat-reference-req/wallet/reference/provider-api#chainchanged",children:(0,r.jsx)(t.code,{children:"chainChanged"})})," provider event to\ndetect when the user changes networks."]}),"\n",(0,r.jsx)(t.p,{children:"For example, the following code detects a user's network and when the user changes networks:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",metastring:'title="index.js"',children:'const chainId = await provider // Or window.ethereum if you don\'t support EIP-6963.\n  .request({ method: "eth_chainId" });\n\nprovider // Or window.ethereum if you don\'t support EIP-6963.\n  .on("chainChanged", handleChainChanged);\n\nfunction handleChainChanged(chainId) {\n  // We recommend reloading the page, unless you must do otherwise.\n  window.location.reload();\n}\n'})})]})}function w(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var r=n(96540);const o={},a=r.createContext(o);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);