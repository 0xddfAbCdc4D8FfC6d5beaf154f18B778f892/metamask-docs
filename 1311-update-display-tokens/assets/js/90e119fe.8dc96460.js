"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[9107],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>m});var a=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},y="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,p=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),y=l(n),u=i,m=y["".concat(p,".").concat(u)]||y[u]||f[u]||s;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=u;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[y]="string"==typeof e?e:i,o[1]=r;for(var l=2;l<s;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},22188:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>f,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var a=n(58168),i=(n(96540),n(15680));const s={description:"Notify users directly in MetaMask, or natively in their OS.",sidebar_position:10},o="Notifications",r={unversionedId:"features/notifications",id:"features/notifications",title:"Notifications",description:"Notify users directly in MetaMask, or natively in their OS.",source:"@site/snaps/features/notifications.md",sourceDirName:"features",slug:"/features/notifications",permalink:"/1311-update-display-tokens/snaps/features/notifications",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/features/notifications.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{description:"Notify users directly in MetaMask, or natively in their OS.",sidebar_position:10},sidebar:"snapsSidebar",previous:{title:"Non-EVM networks",permalink:"/1311-update-display-tokens/snaps/features/non-evm-networks"},next:{title:"Signature insights",permalink:"/1311-update-display-tokens/snaps/features/signature-insights"}},p={},l=[{value:"Steps",id:"steps",level:2},{value:"1. Request permission to notify users",id:"1-request-permission-to-notify-users",level:3},{value:"2. Create a notification",id:"2-create-a-notification",level:3},{value:"Example",id:"example",level:2}],c={toc:l},y="wrapper";function f(e){let{components:t,...s}=e;return(0,i.yg)(y,(0,a.A)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"notifications"},"Notifications"),(0,i.yg)("p",null,"You can display notifications directly in MetaMask or natively in a user's operating system (OS)\nusing the ",(0,i.yg)("a",{parentName:"p",href:"/1311-update-display-tokens/snaps/reference/snaps-api#snap_notify"},(0,i.yg)("inlineCode",{parentName:"a"},"snap_notify"))," API method."),(0,i.yg)("h2",{id:"steps"},"Steps"),(0,i.yg)("h3",{id:"1-request-permission-to-notify-users"},"1. Request permission to notify users"),(0,i.yg)("p",null,"Request the ",(0,i.yg)("a",{parentName:"p",href:"/1311-update-display-tokens/snaps/reference/snaps-api#snap_notify"},(0,i.yg)("inlineCode",{parentName:"a"},"snap_notify"))," permission.\nAdd the following to your Snap's manifest file:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="snap.manifest.json"',title:'"snap.manifest.json"'},'"initialPermissions": {\n  "snap_notify": {}\n}\n')),(0,i.yg)("h3",{id:"2-create-a-notification"},"2. Create a notification"),(0,i.yg)("p",null,"Create a notification by calling ",(0,i.yg)("a",{parentName:"p",href:"/1311-update-display-tokens/snaps/reference/snaps-api#snap_notify"},(0,i.yg)("inlineCode",{parentName:"a"},"snap_notify")),", which takes\na notification ",(0,i.yg)("inlineCode",{parentName:"p"},"type")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"message"),".\nSpecify ",(0,i.yg)("inlineCode",{parentName:"p"},'type: "inApp"')," to display the notification in the MetaMask UI, or ",(0,i.yg)("inlineCode",{parentName:"p"},'type: "native"')," to\ndisplay the notification in the user's OS."),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},"We recommend using ",(0,i.yg)("inlineCode",{parentName:"p"},'type: "inApp"')," because there's no guarantee that native notifications are\ndisplayed to the user.\nYou can also call ",(0,i.yg)("inlineCode",{parentName:"p"},"snap_notify")," twice, which each notification type, to trigger both an in-app and\nnative notification.")),(0,i.yg)("p",null,'The following example displays a notification in MetaMask, with the message "Hello, world!":'),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="index.js"',title:'"index.js"'},'await snap.request({\n  method: "snap_notify",\n  params: {\n    type: "inApp",\n    message: "Hello, world!",\n  },\n});\n')),(0,i.yg)("div",{class:"row"},(0,i.yg)("div",{class:"column"},(0,i.yg)("img",{src:n(30911).A,width:"250px",alt:"Notification alert",style:{border:"1px solid #DCDCDC"}})),(0,i.yg)("div",{class:"column"},(0,i.yg)("img",{src:n(45636).A,width:"300px",alt:"Notification message",style:{border:"1px solid #DCDCDC"}}))),(0,i.yg)("admonition",{title:"Notification rate limits",type:"info"},(0,i.yg)("p",{parentName:"admonition"},"Each Snap can trigger up to:"),(0,i.yg)("ul",{parentName:"admonition"},(0,i.yg)("li",{parentName:"ul"},"Five in-app notifications per minute."),(0,i.yg)("li",{parentName:"ul"},"Two native notifications per five minutes."))),(0,i.yg)("h2",{id:"example"},"Example"),(0,i.yg)("p",null,"See the\n",(0,i.yg)("a",{parentName:"p",href:"https://github.com/MetaMask/snaps/tree/main/packages/examples/packages/notifications"},(0,i.yg)("inlineCode",{parentName:"a"},"@metamask/notifications-example-snap")),"\npackage for a full example of implementing notifications using\n",(0,i.yg)("a",{parentName:"p",href:"/1311-update-display-tokens/snaps/reference/snaps-api#snap_notify"},(0,i.yg)("inlineCode",{parentName:"a"},"snap_notify")),".\nThis example exposes a ",(0,i.yg)("a",{parentName:"p",href:"/1311-update-display-tokens/snaps/learn/about-snaps/apis#custom-json-rpc-apis"},"custom JSON-RPC API")," for\ndapps to display in-app and native notifications."))}f.isMDXComponent=!0},30911:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/notifications-1-124974c2b537df6987224a2ce123fc48.png"},45636:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/notifications-2-a31a9c479c1713aabe039d2945a79210.png"}}]);