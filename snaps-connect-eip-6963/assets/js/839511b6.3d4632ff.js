"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[5044],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var a=t(96540);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(t),h=s,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return t?a.createElement(m,r(r({ref:n},c),{},{components:t})):a.createElement(m,r({ref:n},c))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,r=new Array(o);r[0]=h;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:s,r[1]=i;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},86530:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(58168),s=(t(96540),t(15680)),o=t(96763);const r={description:"Connect your dapp to existing, third-party Snaps.",sidebar_position:9},i="Connect to a Snap",l={unversionedId:"how-to/connect-to-a-snap",id:"how-to/connect-to-a-snap",title:"Connect to a Snap",description:"Connect your dapp to existing, third-party Snaps.",source:"@site/snaps/how-to/connect-to-a-snap.md",sourceDirName:"how-to",slug:"/how-to/connect-to-a-snap",permalink:"/snaps-connect-eip-6963/snaps/how-to/connect-to-a-snap",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/how-to/connect-to-a-snap.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{description:"Connect your dapp to existing, third-party Snaps.",sidebar_position:9},sidebar:"snapsSidebar",previous:{title:"Get allowlisted",permalink:"/snaps-connect-eip-6963/snaps/how-to/get-allowlisted"},next:{title:"Reference",permalink:"/snaps-connect-eip-6963/snaps/reference"}},p={},c=[{value:"Detect wallet",id:"detect-wallet",level:2},{value:"Detect MetaMask Flask",id:"detect-metamask-flask",level:3},{value:"Connect to a Snap",id:"connect-to-a-snap-1",level:2},{value:"User rejects the installation request",id:"user-rejects-the-installation-request",level:3},{value:"User approves the installation request",id:"user-approves-the-installation-request",level:3},{value:"Snap is already installed",id:"snap-is-already-installed",level:3},{value:"Determine whether a Snap is installed",id:"determine-whether-a-snap-is-installed",level:2},{value:"Reconnect to a Snap",id:"reconnect-to-a-snap",level:2}],d=e=>function(n){return o.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.yg)("div",n)},u=d("Tabs"),h=d("TabItem"),m={toc:c},y="wrapper";function g(e){let{components:n,...t}=e;return(0,s.yg)(y,(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.yg)("h1",{id:"connect-to-a-snap"},"Connect to a Snap"),(0,s.yg)("p",null,"Dapps can connect to Snaps designed to communicate with dapps.\nDapps can use these Snaps to take advantage of new features enabled by Snaps.\nThis is possible because Snaps can expose a ",(0,s.yg)("a",{parentName:"p",href:"/snaps-connect-eip-6963/snaps/learn/about-snaps/apis#custom-json-rpc-apis"},"custom JSON-RPC API"),"."),(0,s.yg)("admonition",{type:"info"},(0,s.yg)("p",{parentName:"admonition"},"A dapp must connect to a Snap with ",(0,s.yg)("inlineCode",{parentName:"p"},"wallet_requestSnaps")," before it can communicate with custom JSON-RPC APIs exposed by the Snap. "),(0,s.yg)("p",{parentName:"admonition"},"You can check if your dapp is authorized to communicate with a Snap by calling ",(0,s.yg)("inlineCode",{parentName:"p"},"wallet_getSnaps"),". ")),(0,s.yg)("h2",{id:"detect-wallet"},"Detect wallet"),(0,s.yg)("p",null,"To connect to a Snap, dapps must first detect MetaMask in the user's browser.\nSee the Wallet documentation on ",(0,s.yg)("a",{parentName:"p",href:"/wallet/how-to/connect"},"how to connect to MetaMask"),"."),(0,s.yg)("h3",{id:"detect-metamask-flask"},"Detect MetaMask Flask"),(0,s.yg)("p",null,"While you are developing your Snap, you may need to require\n",(0,s.yg)("a",{parentName:"p",href:"/snaps-connect-eip-6963/snaps/get-started/install-flask"},"MetaMask Flask"),"\nin your dapp.\nThe recommended method to detect MetaMask Flask is to use EIP-6963.\nAlternatively, you can use the injected provider, but this may fail if the user is running multiple wallet extensions simultaneously. "),(0,s.yg)("p",null,"The following code can be added to ",(0,s.yg)("inlineCode",{parentName:"p"},"window.onload"),": "),(0,s.yg)(u,{mdxType:"Tabs"},(0,s.yg)(h,{value:"EIP-6963 example",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="index.js"',title:'"index.js"'},"window.addEventListener('eip6963:announceProvider', (event) => {\n  /* event.detail contains the discovered provider interface */\n  const providerDetail = event.detail;\n\n  /* providerDetail.info.rdns is the best way to distinguish a wallet extension */\n  if (providerDetail.info.rdns === 'io.metamask.flask') {\n    console.log(\"MetaMask Flask successfully detected!\");\n    // Now you can use Snaps!\n  } else { \n    console.error(\"Please install MetaMask Flask!\", error);\n  }\n});\n\nwindow.dispatchEvent(new Event('eip6963:requestProvider'));\n"))),(0,s.yg)(h,{value:"Injected provider example",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="index.js"',title:'"index.js"'},'const provider = window.ethereum; \n\nconst isFlask = ( \n  await provider?.request({ method: "web3_clientVersion" })\n)?.includes("flask"); \n\nif (provider && isFlask) {\n  console.log("MetaMask Flask successfully detected!");\n  // Now you can use Snaps!\n} else {\n  console.error("Please install MetaMask Flask!", error);\n}\n')))),(0,s.yg)("h2",{id:"connect-to-a-snap-1"},"Connect to a Snap"),(0,s.yg)("p",null,"Connect to a Snap by calling the ",(0,s.yg)("a",{parentName:"p",href:"/wallet/reference/wallet_requestsnaps"},(0,s.yg)("inlineCode",{parentName:"a"},"wallet_requestSnaps")),"\nmethod from your dapp.\nIf a user doesn't have the Snap installed in their MetaMask wallet, MetaMask prompts the user to\ninstall the Snap."),(0,s.yg)("p",null,"The following are different possible outcomes from calling ",(0,s.yg)("inlineCode",{parentName:"p"},"wallet_requestSnaps"),"."),(0,s.yg)("h3",{id:"user-rejects-the-installation-request"},"User rejects the installation request"),(0,s.yg)("p",null,"If the user rejects the installation request, the call to ",(0,s.yg)("inlineCode",{parentName:"p"},"wallet_requestSnaps")," throws the following error:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-json"},'{ "code": 4001, "message": "User rejected the request." }\n')),(0,s.yg)("h3",{id:"user-approves-the-installation-request"},"User approves the installation request"),(0,s.yg)("p",null,"If the user approves the installation request, the call to ",(0,s.yg)("inlineCode",{parentName:"p"},"wallet_requestSnaps")," returns an object\nwith the following shape:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "SNAP_ID": {\n    "blocked": false,\n    "enabled": true,\n    "id": "SNAP_ID",\n    "initialPermissions": {\n      // The permissions in the Snap\'s manifest file.\n    },\n    "version": "SNAP_VERSION"\n  }\n}\n')),(0,s.yg)("h3",{id:"snap-is-already-installed"},"Snap is already installed"),(0,s.yg)("p",null,"If the Snap is already installed, the call to ",(0,s.yg)("inlineCode",{parentName:"p"},"wallet_requestSnaps")," returns the same object as for a\nnew installation of the Snap, but the user won't see a confirmation pop-up asking them to install the Snap."),(0,s.yg)("admonition",{title:"important",type:"caution"},(0,s.yg)("p",{parentName:"admonition"},"Snaps are installed into the MetaMask instance of each user.\nIf a Snap stores data, that data is specific to that user's MetaMask instance.\nHowever, that data can be shared with multiple dapps.\nDo not assume that data stored by a Snap is unique to your dapp. ")),(0,s.yg)("h2",{id:"determine-whether-a-snap-is-installed"},"Determine whether a Snap is installed"),(0,s.yg)("p",null,"Determine whether a Snap is installed by calling the\n",(0,s.yg)("a",{parentName:"p",href:"/wallet/reference/wallet_getsnaps"},(0,s.yg)("inlineCode",{parentName:"a"},"wallet_getSnaps"))," method from your dapp.\nThis method returns a list of only those Snaps that are connected to your current dapp."),(0,s.yg)("p",null,"The response is in the form of an object keyed by the ID of the Snap.\nEach value is a nested object with additional information, such as the version of the Snap that is installed."),(0,s.yg)("admonition",{type:"note"},(0,s.yg)("p",{parentName:"admonition"},(0,s.yg)("inlineCode",{parentName:"p"},"wallet_getSnaps")," only returns the Snaps that are connected to your dapp.\nThe user may have other Snaps installed that your dapp is not aware of. ")),(0,s.yg)("p",null,"The following example verifies whether a Snap with ID ",(0,s.yg)("inlineCode",{parentName:"p"},"npm:super-snap")," is installed:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},'const snaps = await ethereum.request({\n    method: "wallet_getSnaps"\n});\n\nconst isMySnapInstalled = Object.keys(snaps).includes("npm:super-snap");\n')),(0,s.yg)("p",null,"If you need to work with a specific version of a Snap, you can instead iterate over\n",(0,s.yg)("inlineCode",{parentName:"p"},"Object.values(snaps)"),", and use the ",(0,s.yg)("inlineCode",{parentName:"p"},"id")," and ",(0,s.yg)("inlineCode",{parentName:"p"},"version")," properties inside each object to determine\nwhether the Snap is installed with the required version."),(0,s.yg)("admonition",{type:"note"},(0,s.yg)("p",{parentName:"admonition"},"A user cannot install multiple versions of a Snap into a single MetaMask instance.\nYou should avoid requiring a specific version of a Snap unless you absolutely need to.\nIn most cases, you should request the latest version of the Snap and architect your dapp to be able\nto work with that version.")),(0,s.yg)("h2",{id:"reconnect-to-a-snap"},"Reconnect to a Snap"),(0,s.yg)("p",null,"At any time, a user can open their MetaMask Snaps settings menu and see all the dapps connected to a Snap.\nFrom that menu they can revoke a dapp connection.\nIf your dapp loses the connection to a Snap, you can reconnect by calling\n",(0,s.yg)("a",{parentName:"p",href:"/wallet/reference/wallet_requestsnaps"},(0,s.yg)("inlineCode",{parentName:"a"},"wallet_requestSnaps")),".\nSince the Snap is already installed, this returns a success response without MetaMask showing a pop-up.\nHowever, if the user has disabled the Snap, the response has ",(0,s.yg)("inlineCode",{parentName:"p"},"enabled")," set to ",(0,s.yg)("inlineCode",{parentName:"p"},"false")," for your ",(0,s.yg)("inlineCode",{parentName:"p"},"SNAP_ID"),":"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "SNAP_ID": {\n    "blocked": false,\n    "enabled": false,\n    "id": "SNAP_ID",\n    "initialPermissions": {\n      // The permissions in the Snap\'s manifest file.\n    },\n    "version": "SNAP_VERSION"\n  }\n}\n')))}g.isMDXComponent=!0}}]);