"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[4939],{15680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>f});var a=t(96540);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=l(t),d=s,f=u["".concat(p,".").concat(d)]||u[d]||c[d]||o;return t?a.createElement(f,r(r({ref:n},m),{},{components:t})):a.createElement(f,r({ref:n},m))}));function f(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,r=new Array(o);r[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[u]="string"==typeof e?e:s,r[1]=i;for(var l=2;l<o;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},41304:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=t(58168),s=(t(96540),t(15680));const o={description:"Resolve names to addresses and vice versa.",sidebar_position:6,sidebar_custom_props:{flask_only:!0}},r="Custom name resolution",i={unversionedId:"features/custom-name-resolution",id:"features/custom-name-resolution",title:"Custom name resolution",description:"Resolve names to addresses and vice versa.",source:"@site/snaps/features/custom-name-resolution.md",sourceDirName:"features",slug:"/features/custom-name-resolution",permalink:"/1269-snaps-examples/snaps/features/custom-name-resolution",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/features/custom-name-resolution.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{description:"Resolve names to addresses and vice versa.",sidebar_position:6,sidebar_custom_props:{flask_only:!0}},sidebar:"snapsSidebar",previous:{title:"Static files",permalink:"/1269-snaps-examples/snaps/features/static-files"},next:{title:"Signature insights",permalink:"/1269-snaps-examples/snaps/features/signature-insights"}},p={},l=[{value:"Steps",id:"steps",level:2},{value:"1. Request permission to provide name resolution",id:"1-request-permission-to-provide-name-resolution",level:3},{value:"2. Implement custom name resolution",id:"2-implement-custom-name-resolution",level:3},{value:"Example",id:"example",level:2}],m={toc:l},u="wrapper";function c(e){let{components:n,...t}=e;return(0,s.yg)(u,(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.yg)("h1",{id:"custom-name-resolution"},"Custom name resolution"),(0,s.yg)("admonition",{type:"flaskOnly"}),(0,s.yg)("p",null,"You can implement custom domain resolution and reverse resolution using the following steps."),(0,s.yg)("h2",{id:"steps"},"Steps"),(0,s.yg)("h3",{id:"1-request-permission-to-provide-name-resolution"},"1. Request permission to provide name resolution"),(0,s.yg)("p",null,"Request the ",(0,s.yg)("a",{parentName:"p",href:"/1269-snaps-examples/snaps/reference/permissions#endowmentname-lookup"},(0,s.yg)("inlineCode",{parentName:"a"},"endowment:name-lookup"))," permission."),(0,s.yg)("p",null,"For example, to resolve Ethereum Mainnet domains, add the following to your Snap's manifest file:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="snap.manifest.json"',title:'"snap.manifest.json"'},'"initialPermissions": {\n    "endowment:name-lookup": {\n        "chains": ["eip155:1"]\n    }\n}\n')),(0,s.yg)("h3",{id:"2-implement-custom-name-resolution"},"2. Implement custom name resolution"),(0,s.yg)("p",null,"Expose an ",(0,s.yg)("a",{parentName:"p",href:"/1269-snaps-examples/snaps/reference/entry-points#onnamelookup"},(0,s.yg)("inlineCode",{parentName:"a"},"onNameLookup"))," entry point, which receives a\n",(0,s.yg)("inlineCode",{parentName:"p"},"chainId")," and either a ",(0,s.yg)("inlineCode",{parentName:"p"},"domain")," or an ",(0,s.yg)("inlineCode",{parentName:"p"},"address"),".\nThe following example implements a very basic resolution from Unstoppable Domains domain names to\nEthereum addresses in ",(0,s.yg)("inlineCode",{parentName:"p"},"onNameLookup"),":"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-typescript",metastring:'title="index.ts"',title:'"index.ts"'},'import type { OnNameLookupHandler } from "@metamask/snaps-types";\n\nconst UNSTOPPABLE_API_KEY = "xxx";\n\nexport const onNameLookup: OnNameLookupHandler = async (request) => {\n    const { chainId, domain } = request;\n\n    if (domain && chainId === "eip155:1") {\n        const response = await fetch(`https://api.unstoppabledomains.com/resolve/domains/${domain}`, {\n            headers: {\n                accept: "application/json",\n                authorization: `Bearer ${UNSTOPPABLE_API_KEY}`,\n            },\n        });\n        const data = await response.json();\n        const resolvedAddress = data.records["crypto.ETH.address"];\n        if (address) {\n            return {\n                resolvedAddresses: [{ resolvedAddress, protocol: "Unstoppable Domains" }],\n            };\n        }\n    }\n\n    return null;\n};\n')),(0,s.yg)("h2",{id:"example"},"Example"),(0,s.yg)("p",null,"See the ",(0,s.yg)("a",{parentName:"p",href:"https://github.com/MetaMask/snaps/tree/main/packages/examples/packages/name-lookup"},(0,s.yg)("inlineCode",{parentName:"a"},"@metamask/name-lookup-example-snap")),"\npackage for a full example of implementing custom name resolution."))}c.isMDXComponent=!0}}]);