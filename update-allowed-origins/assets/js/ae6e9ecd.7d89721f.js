"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[5693],{15680:(e,t,r)=>{r.d(t,{xA:()=>l,yg:()=>h});var n=r(96540);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(r),u=o,h=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return r?n.createElement(h,a(a({ref:t},l),{},{components:r})):n.createElement(h,a({ref:t},l))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},17036:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(58168),o=(r(96540),r(15680));const i={description:"Restrict your Snap's RPC API methods.",sidebar_label:"Restrict RPC API methods",sidebar_position:4},a="Restrict a Snap's RPC API methods",s={unversionedId:"how-to/restrict-rpc-api",id:"how-to/restrict-rpc-api",title:"Restrict a Snap's RPC API methods",description:"Restrict your Snap's RPC API methods.",source:"@site/snaps/how-to/restrict-rpc-api.md",sourceDirName:"how-to",slug:"/how-to/restrict-rpc-api",permalink:"/update-allowed-origins/snaps/how-to/restrict-rpc-api",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/how-to/restrict-rpc-api.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Restrict your Snap's RPC API methods.",sidebar_label:"Restrict RPC API methods",sidebar_position:4},sidebar:"snapsSidebar",previous:{title:"Use environment variables",permalink:"/update-allowed-origins/snaps/how-to/use-environment-variables"},next:{title:"Test a Snap",permalink:"/update-allowed-origins/snaps/how-to/test-a-snap"}},p={},c=[{value:"Restrict the whole API",id:"restrict-the-whole-api",level:2},{value:"Restrict by method and origin",id:"restrict-by-method-and-origin",level:2}],l={toc:c},d="wrapper";function m(e){let{components:t,...r}=e;return(0,o.yg)(d,(0,n.A)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"restrict-a-snaps-rpc-api-methods"},"Restrict a Snap's RPC API methods"),(0,o.yg)("p",null,"If the ",(0,o.yg)("inlineCode",{parentName:"p"},"dapps")," caveat of the ",(0,o.yg)("a",{parentName:"p",href:"/update-allowed-origins/snaps/reference/permissions#endowmentrpc"},(0,o.yg)("inlineCode",{parentName:"a"},"endowment:rpc"))," permission\nis set to ",(0,o.yg)("inlineCode",{parentName:"p"},"true"),", any dapp can call the Snap's RPC API by default.\nYou can ",(0,o.yg)("a",{parentName:"p",href:"#restrict-the-whole-api"},"restrict the whole API")," to specific dapp origins or\n",(0,o.yg)("a",{parentName:"p",href:"#restrict-by-method-and-origin"},"restrict the API by method and origin"),"."),(0,o.yg)("h2",{id:"restrict-the-whole-api"},"Restrict the whole API"),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"endowment:rpc")," permission has an optional\n",(0,o.yg)("a",{parentName:"p",href:"/update-allowed-origins/snaps/reference/permissions#allowed-origins"},(0,o.yg)("inlineCode",{parentName:"a"},"allowedOrigins"))," caveat.\nYou can use this to restrict the domains that are allowed to make calls to the Snap's RPC API."),(0,o.yg)("h2",{id:"restrict-by-method-and-origin"},"Restrict by method and origin"),(0,o.yg)("p",null,"Sometimes a more granular control is required, such as filtering by method ",(0,o.yg)("em",{parentName:"p"},"and")," caller origin."),(0,o.yg)("p",null,"You can restrict by method and origin using the ",(0,o.yg)("inlineCode",{parentName:"p"},"origin")," parameter of the\n",(0,o.yg)("a",{parentName:"p",href:"/update-allowed-origins/snaps/reference/entry-points#onrpcrequest"},(0,o.yg)("inlineCode",{parentName:"a"},"onRpcRequest"))," entry point.\nFor example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript",metastring:'title="index.ts"',title:'"index.ts"'},'import type { OnRpcRequestHandler, UnauthorizedError } from "@metamask/snaps-sdk";\n\ntype MethodPermission = "*" | string[];\n\nconst RPC_PERMISSIONS: Record<string, MethodPermission> = {\n    hello: "*",\n    secureMethod: [\n        "https://metamask.io",\n        "https://www.mydomain.com",\n    ]\n};\n\nconst isAllowed = (method: string, origin: string) => {\n    return RPC_PERMISSIONS[method] === "*" || RPC_PERMISSIONS[method].includes(origin);\n};\n\nexport const onRpcRequest: OnRpcRequestHandler = async ({\n    origin,\n    request,\n}) => {\n    // Check permissions\n    if (!isAllowed(request.method, origin)) {\n        throw new UnauthorizedError(`Method ${request.method} not authorized for origin ${origin}.`);\n    }\n\n    switch (request.method) {\n        case "hello":\n            return "world!";\n    \n        case "secureMethod":\n            return "The secret is: 42";\n\n        default:\n            throw new Error("Method not found.");\n    }\n};\n')),(0,o.yg)("p",null,"You can construct more powerful filtering methods using regular expressions or any other logic of\nyour choice."))}m.isMDXComponent=!0}}]);