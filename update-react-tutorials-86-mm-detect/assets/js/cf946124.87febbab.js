"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[5246],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>h});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},10665:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(58168),r=(n(96540),n(15680));const o={description:"Create a single component React dapp with local state.",toc_max_heading_level:4,sidebar_position:1},i="Create a React dapp with local state",l={unversionedId:"tutorials/react-dapp-local-state",id:"tutorials/react-dapp-local-state",title:"Create a React dapp with local state",description:"Create a single component React dapp with local state.",source:"@site/wallet/tutorials/react-dapp-local-state.md",sourceDirName:"tutorials",slug:"/tutorials/react-dapp-local-state",permalink:"/update-react-tutorials-86-mm-detect/wallet/tutorials/react-dapp-local-state",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/wallet/tutorials/react-dapp-local-state.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Create a single component React dapp with local state.",toc_max_heading_level:4,sidebar_position:1},sidebar:"walletSidebar",previous:{title:"Tutorials",permalink:"/update-react-tutorials-86-mm-detect/wallet/tutorials"},next:{title:"Create a React dapp with global state",permalink:"/update-react-tutorials-86-mm-detect/wallet/tutorials/react-dapp-global-state"}},s={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"1. Set up the project",id:"1-set-up-the-project",level:3},{value:"2. Discover Wallet Providers (Browser Extensions)",id:"2-discover-wallet-providers-browser-extensions",level:3},{value:"3. Detect Multiple Wallet Providers",id:"3-detect-multiple-wallet-providers",level:3},{value:"Conclusion",id:"conclusion",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...o}=e;return(0,r.yg)(d,(0,a.A)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"create-a-react-dapp-with-local-state"},"Create a React dapp with local state"),(0,r.yg)("p",null,"This tutorial walks you through integrating a simple React dapp with MetaMask.\nThe dapp has a single component, so only requires managing local state.\nYou'll use the ",(0,r.yg)("a",{parentName:"p",href:"https://v3.vitejs.dev/guide"},"Vite")," build tool with React and TypeScript to create\nthe dapp."),(0,r.yg)("p",null,"This tutorial builds up your knowledge of working with MetaMask incrementally; this means you won't\nimplement the best solution at first, but you'll experiment with the MetaMask API and continually\nwork towards better solutions."),(0,r.yg)("admonition",{title:"Why React?",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"React is familiar to most web developers, and it makes it easy to work with state management and\nbuild with components that need updating.")),(0,r.yg)("admonition",{title:"Project source code",type:"info"},(0,r.yg)("p",{parentName:"admonition"},"You can see the source code for the\n",(0,r.yg)("a",{parentName:"p",href:"https://github.com/MetaMask/react-dapp-tutorial/tree/local-state-start"},"starting point")," and\n",(0,r.yg)("a",{parentName:"p",href:"https://github.com/MetaMask/react-dapp-tutorial/tree/local-state-final"},"final state")," of this dapp.")),(0,r.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://nodejs.org/"},"Node.js")," version 18+"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"},"npm")," version 9+"),(0,r.yg)("li",{parentName:"ul"},"A text editor (for example, ",(0,r.yg)("a",{parentName:"li",href:"https://code.visualstudio.com/"},"VS Code"),")"),(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("a",{parentName:"li",href:"https://metamask.io/download"},"MetaMask extension")," installed"),(0,r.yg)("li",{parentName:"ul"},"Basic knowledge of JavaScript and React")),(0,r.yg)("h2",{id:"steps"},"Steps"),(0,r.yg)("h3",{id:"1-set-up-the-project"},"1. Set up the project"),(0,r.yg)("p",null,"Set up a new project using Vite, React, and TypeScript, by running the following command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npm create vite@latest mm-dapp-react -- --template react-ts\n")),(0,r.yg)("p",null,"Install the node module dependencies:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cd mm-dapp-react && npm install\n")),(0,r.yg)("p",null,"Launch the development server:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,r.yg)("p",null,"This displays a ",(0,r.yg)("inlineCode",{parentName:"p"},"localhost")," URL on your terminal. Copy this URL into your browser and open it."),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"You can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"npx vite")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"npm run dev")," command to run your project at any time if the\ndevelopment server has been stopped.")),(0,r.yg)("p",null,"Open the project in your editor editor.\nTo start with a blank slate, replace the code in ",(0,r.yg)("inlineCode",{parentName:"p"},"src/App.tsx")," with the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import "./App.css";\n\nconst App = () => {\n  return (\n    <div className="App">\n      <button>Button for Discovered Wallets</button>\n    </div>\n  );\n};\n\nexport default App;\n')),(0,r.yg)("p",null,"You'll need to get around type-checking by defining the ",(0,r.yg)("inlineCode",{parentName:"p"},"window.ethereum")," object as ",(0,r.yg)("inlineCode",{parentName:"p"},"any"),".\nUpdate ",(0,r.yg)("inlineCode",{parentName:"p"},"src/vite-env.d.ts")," to the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="vite-env.d.ts"',title:'"vite-env.d.ts"'},'/// <reference types="vite/client" />\n\ninterface Window {\n  ethereum: any;\n}\n')),(0,r.yg)("p",null,"Also, update ",(0,r.yg)("inlineCode",{parentName:"p"},"src/App.css")," to the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-css",metastring:'title="App.css"',title:'"App.css"'},".App {\n  display: flex;\n  flex-direction: column;\n  place-items: center;\n  min-width: 100vw;\n  min-height: 100vh;\n}\nbutton {\n  margin-top: 0.5em;\n}\n")),(0,r.yg)("p",null,"At this point, you have a working React app with some basic styling and a button that you'll use to\nconnect to MetaMask."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Initial App State with Button",src:n(89409).A,width:"1516",height:"1280"})),(0,r.yg)("h3",{id:"2-discover-wallet-providers-browser-extensions"},"2. Discover Wallet Providers (Browser Extensions)"),(0,r.yg)("p",null,"Currently we do not recommend the Vanilla JS detection of injected provider or the legacy MetaMask Detect provider, but they are working solutions and I will cover them quickly or you can choose to skip this section as we will not be using it in the dapp that we are building."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#3-using-eip-6963"},'Skip to Modern EIP-6963" Multi Injected Provider Discovery')),(0,r.yg)("h3",{id:"3-detect-multiple-wallet-providers"},"3. Detect Multiple Wallet Providers"),(0,r.yg)("p",null,"We will opt to use the most up to date way of detecting wallet providers with EIP-6963."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-6963"},"Why EIP-6963"),": The current method where browser extensions inject Ethereum providers (EIP-1193) into ",(0,r.yg)("inlineCode",{parentName:"p"},"window.ethereum")," leads to conflicts when multiple extensions are installed, due to a race condition that favors the last loaded wallet. This creates an undesirable user experience. EIP-6963 improves interoperability and user experience by introducing a two-way communication protocol via ",(0,r.yg)("inlineCode",{parentName:"p"},"window")," events, enabling discovery and users ability to connect to their preferred wallet provider through a unique identifier.")),(0,r.yg)("p",null,"The first code we need to update is our environment variable file.\nFor the purpose of using EIP-6963 we will import the the types and interfaces needed that are outlined in EIP-6963 and EIP-1193. "),(0,r.yg)("p",null,"Update the ",(0,r.yg)("inlineCode",{parentName:"p"},"src/vite-env.d.ts")," to the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="vite-env.d.ts"',title:'"vite-env.d.ts"'},'/// <reference types="vite/client" />\n\n// Describes metadata related to a provider according to EIP-6963\ninterface EIP6963ProviderInfo {\n  walletId: string\n  uuid: string\n  name: string\n  icon: string\n}\n\n// Represents the structure of an Ethereum provider based on the EIP-1193 standard\ninterface EIP1193Provider {\n  isStatus?: boolean\n  host?: string\n  path?: string\n  sendAsync?: (request: { method: string, params?: Array<unknown> }, callback: (error: Error | null, response: unknown) => void) => void\n  send?: (request: { method: string, params?: Array<unknown> }, callback: (error: Error | null, response: unknown) => void) => void\n  request: (request: { method: string, params?: Array<unknown> }) => Promise<unknown>\n}\n\n// Combines the provider\'s metadata with an actual provider object\n// Creating a complete picture of a wallet provider at a glance and for purposes of working with them\ninterface EIP6963ProviderDetail {\n  info: EIP6963ProviderInfo\n  provider: EIP1193Provider\n}\n\n// This type represents the structure of an event dispatched by a wallet to announce its presence based on EIP-6963\ntype EIP6963AnnounceProviderEvent = {\n  detail:{\n    info: EIP6963ProviderInfo,\n    provider: EIP1193Provider\n  }\n}\n')),(0,r.yg)("p",null,"To manage the state of detected wallet providers across our application, we'll create a store file. This file provides a centralized place to store and synchronize the detected wallet providers, ensuring that our application always has access to the latest provider information. Comments within the code explain its various parts (feel free to remove them if you like):"),(0,r.yg)("p",null,"Add the following code to ",(0,r.yg)("inlineCode",{parentName:"p"},"src/hooks/store.ts"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="store.ts"',title:'"store.ts"'},'// This part extends the WindowEventMap interface to include a custom event named "eip6963:announceProvider".\ndeclare global{\n  interface WindowEventMap {\n    "eip6963:announceProvider": CustomEvent\n  }\n}\n\n// An array that stores detected wallet providers along with their details.\nlet providers: EIP6963ProviderDetail[] = []\n\n// An object containing two methods, the store holds the state of detected Ethereum wallet providers. \n// It\'s implemented as an external store, making it available for subscription and synchronization across the app. \nexport const store = {\n  // A function that returns the current state of providers.\n  value: ()=> providers,\n  // A function that subscribes to provider announcements and updates the store accordingly. \n  // It takes a callback function to be invoked on each store update and returns a function to unsubscribe from the event.\n  subscribe: (callback: ()=> void) => {\n    function onAnnouncement(event: EIP6963AnnounceProviderEvent){\n      if(providers.map(p => p.info.uuid).includes(event.detail.info.uuid)) return\n      providers = [...providers, event.detail]\n      callback()\n    }\n    window.addEventListener("eip6963:announceProvider", onAnnouncement);\n    window.dispatchEvent(new Event("eip6963:requestProvider"));\n\n    return () => window.removeEventListener("eip6963:announceProvider", onAnnouncement)\n  }\n}\n')),(0,r.yg)("p",null,"With the store in place, we will use a custom hook that synchronizes the provider state with the React component. It uses ",(0,r.yg)("a",{parentName:"p",href:"https://react.dev/reference/react/useSyncExternalStore"},"useSyncExternalStore"),' from "react" to subscribe to changes in the provider store and ensure the component re-renders whenever the store updates. '),(0,r.yg)("p",null,"In our example, the external store refers to the store object defined in store.ts. This store object holds the state of detected Ethereum wallet providers."),(0,r.yg)("p",null,"Create the following file at ",(0,r.yg)("inlineCode",{parentName:"p"},"src/hooks/useSyncProviders.ts")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="useSyncProviders.ts"',title:'"useSyncProviders.ts"'},'import { useSyncExternalStore } from "react";\nimport { store } from "./store";\n\nexport const useSyncProviders = ()=> useSyncExternalStore(store.subscribe, store.value, store.value)\n')),(0,r.yg)("p",null,"The useSyncExternalStore hook is used to synchronize the external store (store) with a React component.\nIt takes three arguments:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A subscription function (store.subscribe in our case) to listen for changes in the external store."),(0,r.yg)("li",{parentName:"ul"},"A function to get the current value of the store (store.value)."),(0,r.yg)("li",{parentName:"ul"},"An initial value for the store (also store.value in our case).")),(0,r.yg)("p",null,"Whenever the external store (store) updates, useSyncExternalStore automatically triggers a re-render of the component with the latest state."),(0,r.yg)("p",null,"Next, we want to list out our providers as buttons that will connect to the EIP-6963 compliant wallet providers that we find.\nUpdate ",(0,r.yg)("inlineCode",{parentName:"p"},"src/App.tsx")," to the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"import { useSyncProviders } from './hooks/useSyncProviders'\n\nconst App = () => {\n  const providers = useSyncProviders()\n\n  const handleConnect = async (providerWithInfo: EIP6963ProviderDetail) => {\n    try {\n      await providerWithInfo.provider.request({ \n        method: 'eth_requestAccounts' \n      });\n\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h2>Wallets Detected:</h2>\n      <div>\n        {\n          providers.length > 0 ? providers?.map((provider: EIP6963ProviderDetail) => (\n            <button key={provider.info.uuid} onClick={() => handleConnect(provider)} >\n              <img src={provider.info.icon} alt={provider.info.name} />\n              <div>{provider.info.name}</div>\n            </button>\n          )) :\n            <div>\n              No Announced Wallet Providers\n            </div>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default App\n")),(0,r.yg)("p",null,"Let's add some CSS to clean things up. Update the file at ",(0,r.yg)("inlineCode",{parentName:"p"},"src/index.css")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-css",metastring:'title="index.css"',title:'"index.css"'},":root {\n  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;\n  line-height: 1.5;\n  font-weight: 400;\n\n  color-scheme: light dark;\n  color: rgba(255, 255, 255, 0.87);\n  background-color: #242424;\n\n  font-synthesis: none;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: left;\n}\n\na {\n  font-weight: 500;\n  color: #646cff;\n  text-decoration: inherit;\n}\na:hover {\n  color: #535bf2;\n}\n\nbody {\n  margin: 0;\n  display: flex;\n  min-width: 320px;\n  min-height: 100vh;\n}\n\nh1 {\n  font-size: 3.2em;\n  line-height: 1.1;\n}\n\nhr {\n  margin-top: 2em;\n  height: 1px;\n}\n\nbutton {\n  min-width: 12em;\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: flex-start;\n\n  align-items: center;\n  border-radius: 0.5em;\n  padding: 0.6em 1.2em;\n  margin-bottom: 0.5em;\n\n  font-family: inherit;\n  font-size: 1em;\n  font-weight: 500;\n\n  cursor: pointer;\n\n  transition: border-color 0.25s;\n  border: 1px solid transparent;\n  background-color: #1a1a1a;\n}\nbutton > img {\n  width: 1.5em;\n  height: 1.5em;\n  margin-right: 1em;\n}\nbutton:hover {\n  border-color: #75079d;\n}\nbutton:focus,\nbutton:focus-visible {\n  outline: 4px auto -webkit-focus-ring-color;\n}\nbutton:first-child {\n  margin-top: 0.5em;\n}\nbutton:last-child {\n  margin-bottom: 0;\n}\n\n@media (prefers-color-scheme: light) {\n  :root {\n    color: #213547;\n    background-color: #ffffff;\n  }\n  a:hover {\n    color: #747bff;\n  }\n  button {\n    background-color: #f9f9f9;\n  }\n}\n")),(0,r.yg)("p",null,"To test our application, let's ensure that we are signed into our MetaMask wallet and that it is not currently connected to our dapp.\nThen we can run:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,r.yg)("h2",{id:"conclusion"},"Conclusion"),(0,r.yg)("p",null,"This tutorial walked you through creating a single component dapp using Vite, some basics of\ndetecting wallet providers via EIP-6963, and managing the state in React locally."),(0,r.yg)("p",null,"You can see the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/MetaMask/react-dapp-tutorial/tree/local-state-final"},"UPDATE TBD"),"\nfor the final state of this dapp tutorial."),(0,r.yg)("p",null,"As a next step, you can ",(0,r.yg)("a",{parentName:"p",href:"/update-react-tutorials-86-mm-detect/wallet/tutorials/react-dapp-global-state"},"create a React dapp with global state"),".\nThis follow-up tutorial walks you through adding more than one component and working with global state.\nYou'll use ",(0,r.yg)("a",{parentName:"p",href:"https://react.dev/reference/react/useContext"},"React's Context API")," to manage the state\nglobally and ensure that any component in your dapp can be aware and conditionally render or display\ninformation about your MetaMask wallet."))}u.isMDXComponent=!0},89409:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/pt1-01-558683076cea7f3726d3eca8f86fd4ac.png"}}]);