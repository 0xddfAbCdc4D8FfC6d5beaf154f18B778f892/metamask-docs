"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[1343],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>y});var a=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,y=u["".concat(l,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(y,i(i({ref:t},c),{},{components:n})):a.createElement(y,i({ref:t},c))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},78985:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(58168),o=(n(96540),n(15680));const r={sidebar_position:6,description:"Call an action when your Snap is installed or updated."},i="Lifecycle hooks",s={unversionedId:"features/lifecycle-hooks",id:"features/lifecycle-hooks",title:"Lifecycle hooks",description:"Call an action when your Snap is installed or updated.",source:"@site/snaps/features/lifecycle-hooks.md",sourceDirName:"features",slug:"/features/lifecycle-hooks",permalink:"/update-react-tutorials-86-mm-detect/snaps/features/lifecycle-hooks",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/features/lifecycle-hooks.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,description:"Call an action when your Snap is installed or updated."},sidebar:"snapsSidebar",previous:{title:"Data storage",permalink:"/update-react-tutorials-86-mm-detect/snaps/features/data-storage"},next:{title:"Localization",permalink:"/update-react-tutorials-86-mm-detect/snaps/features/localization"}},l={},p=[{value:"Steps",id:"steps",level:2},{value:"1. Request permission to implement lifecycle hooks",id:"1-request-permission-to-implement-lifecycle-hooks",level:3},{value:"2. Run an action on installation",id:"2-run-an-action-on-installation",level:3},{value:"3. Run an action on update",id:"3-run-an-action-on-update",level:3},{value:"Example",id:"example",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.yg)(u,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"lifecycle-hooks"},"Lifecycle hooks"),(0,o.yg)("p",null,"You can implement lifecycle hooks to automatically run an action, such as displaying a dialog or\nnotification, when a user installs or updates your Snap."),(0,o.yg)("h2",{id:"steps"},"Steps"),(0,o.yg)("h3",{id:"1-request-permission-to-implement-lifecycle-hooks"},"1. Request permission to implement lifecycle hooks"),(0,o.yg)("p",null,"Request the ",(0,o.yg)("a",{parentName:"p",href:"/update-react-tutorials-86-mm-detect/snaps/reference/permissions#endowmentlifecycle-hooks"},(0,o.yg)("inlineCode",{parentName:"a"},"endowment:lifecycle-hooks")),"\npermission.\nAdd the following to your Snap's manifest file:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="snap.manifest.json"',title:'"snap.manifest.json"'},'"initialPermissions": {\n  "endowment:lifecycle-hooks": {}\n}\n')),(0,o.yg)("h3",{id:"2-run-an-action-on-installation"},"2. Run an action on installation"),(0,o.yg)("p",null,"To run an action when a user installs your Snap, expose the\n",(0,o.yg)("a",{parentName:"p",href:"/update-react-tutorials-86-mm-detect/snaps/reference/entry-points#oninstall"},(0,o.yg)("inlineCode",{parentName:"a"},"onInstall"))," entry point and implement the action.\nFor example, you can use ",(0,o.yg)("inlineCode",{parentName:"p"},"onInstall")," to perform any initialization that is required upon installation."),(0,o.yg)("p",null,"The following example displays an ",(0,o.yg)("a",{parentName:"p",href:"/update-react-tutorials-86-mm-detect/snaps/features/custom-ui/dialogs#display-an-alert-dialog"},"alert dialog")," upon installation:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript",metastring:'title="index.ts"',title:'"index.ts"'},'import type { OnInstallHandler } from "@metamask/snaps-sdk";\nimport { heading, panel, text } from "@metamask/snaps-sdk";\n\nexport const onInstall: OnInstallHandler = async () => {\n  await snap.request({\n    method: "snap_dialog",\n    params: {\n      type: "alert",\n      content: panel([\n        heading("Installation successful"),\n        text(\n          "To use this Snap, visit the companion dapp at [metamask.io](https://metamask.io).",\n        ),\n      ]),\n    },\n  });\n};\n')),(0,o.yg)("h3",{id:"3-run-an-action-on-update"},"3. Run an action on update"),(0,o.yg)("p",null,"To run an action when a user updates your Snap, expose the\n",(0,o.yg)("a",{parentName:"p",href:"/update-react-tutorials-86-mm-detect/snaps/reference/entry-points#onupdate"},(0,o.yg)("inlineCode",{parentName:"a"},"onUpdate"))," entry point and implement the action.\nFor example, you can use ",(0,o.yg)("inlineCode",{parentName:"p"},"onUpdate")," to perform any migrations that are required upon update."),(0,o.yg)("p",null,"The following example displays an ",(0,o.yg)("a",{parentName:"p",href:"/update-react-tutorials-86-mm-detect/snaps/features/custom-ui/dialogs#display-an-alert-dialog"},"alert dialog")," upon update:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript",metastring:'title="index.ts"',title:'"index.ts"'},'import type { OnUpdateHandler } from "@metamask/snaps-sdk";\nimport { heading, panel, text } from "@metamask/snaps-sdk";\n\nexport const onUpdate: OnUpdateHandler = async () => {\n  await snap.request({\n    method: "snap_dialog",\n    params: {\n      type: "alert",\n      content: panel([\n        heading("Update successful"),\n        text(\n          "New features added in this version:",\n        ),\n        text(\n          "Added a dialog that appears when updating."\n        ), \n      ]),\n    },\n  });\n};\n')),(0,o.yg)("h2",{id:"example"},"Example"),(0,o.yg)("p",null,"See the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/MetaMask/snaps/tree/main/packages/examples/packages/lifecycle-hooks"},(0,o.yg)("inlineCode",{parentName:"a"},"@metamask/lifecycle-hooks-example-snap")),"\npackage for a full example of implementing lifecycle hooks."))}m.isMDXComponent=!0}}]);